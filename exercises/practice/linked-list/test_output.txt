============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 24 items

exercises/practice/linked-list/linked_list_test.py FFFFFFFFFFFF.FF...FFF [ 87%]
FFF                                                                      [100%]

=================================== FAILURES ===================================
___ LinkedListTest.test_can_return_with_pop_and_then_raise_an_error_if_empty ___

self = <linked_list_test.LinkedListTest testMethod=test_can_return_with_pop_and_then_raise_an_error_if_empty>

    def test_can_return_with_pop_and_then_raise_an_error_if_empty(self):
        lst = LinkedList()
        lst.push(1)
>       lst.unshift(5)
E       AttributeError: 'LinkedList' object has no attribute 'unshift'. Did you mean: 'shift'?

exercises/practice/linked-list/linked_list_test.py:177: AttributeError
__ LinkedListTest.test_can_return_with_shift_and_then_raise_an_error_if_empty __

self = <linked_list_test.LinkedListTest testMethod=test_can_return_with_shift_and_then_raise_an_error_if_empty>

    def test_can_return_with_shift_and_then_raise_an_error_if_empty(self):
        lst = LinkedList()
        lst.push(1)
>       lst.unshift(5)
E       AttributeError: 'LinkedList' object has no attribute 'unshift'. Did you mean: 'shift'?

exercises/practice/linked-list/linked_list_test.py:195: AttributeError
_________________ LinkedListTest.test_count_a_list_with_items __________________

self = <linked_list_test.LinkedListTest testMethod=test_count_a_list_with_items>

    def test_count_a_list_with_items(self):
        lst = LinkedList()
        lst.push(37)
        lst.push(1)
>       self.assertEqual(len(lst), 2)
E       TypeError: object of type 'LinkedList' has no len()

exercises/practice/linked-list/linked_list_test.py:65: TypeError
___________________ LinkedListTest.test_count_an_empty_list ____________________

self = <linked_list_test.LinkedListTest testMethod=test_count_an_empty_list>

    def test_count_an_empty_list(self):
        lst = LinkedList()
>       self.assertEqual(len(lst), 0)
E       TypeError: object of type 'LinkedList' has no len()

exercises/practice/linked-list/linked_list_test.py:59: TypeError
_____________ LinkedListTest.test_count_is_correct_after_mutation ______________

self = <linked_list_test.LinkedListTest testMethod=test_count_is_correct_after_mutation>

    def test_count_is_correct_after_mutation(self):
        lst = LinkedList()
        lst.push(31)
>       self.assertEqual(len(lst), 1)
E       TypeError: object of type 'LinkedList' has no len()

exercises/practice/linked-list/linked_list_test.py:70: TypeError
____________ LinkedListTest.test_deletes_only_the_first_occurrence _____________

self = <linked_list_test.LinkedListTest testMethod=test_deletes_only_the_first_occurrence>

    def test_deletes_only_the_first_occurrence(self):
        lst = LinkedList()
        lst.push(73)
        lst.push(9)
        lst.push(9)
        lst.push(107)
>       lst.delete(9)
E       AttributeError: 'LinkedList' object has no attribute 'delete'

exercises/practice/linked-list/linked_list_test.py:160: AttributeError
_ LinkedListTest.test_deletes_the_element_with_the_specified_value_from_the_list _

self = <linked_list_test.LinkedListTest testMethod=test_deletes_the_element_with_the_specified_value_from_the_list>

    def test_deletes_the_element_with_the_specified_value_from_the_list(self):
        lst = LinkedList()
        lst.push(71)
        lst.push(83)
        lst.push(79)
>       lst.delete(83)
E       AttributeError: 'LinkedList' object has no attribute 'delete'

exercises/practice/linked-list/linked_list_test.py:109: AttributeError
_ LinkedListTest.test_deletes_the_element_with_the_specified_value_from_the_list_re_assigns_head _

self = <linked_list_test.LinkedListTest testMethod=test_deletes_the_element_with_the_specified_value_from_the_list_re_assigns_head>

    def test_deletes_the_element_with_the_specified_value_from_the_list_re_assigns_head(
        self,
    ):
        lst = LinkedList()
        lst.push(71)
        lst.push(83)
        lst.push(79)
>       lst.delete(83)
E       AttributeError: 'LinkedList' object has no attribute 'delete'

exercises/practice/linked-list/linked_list_test.py:133: AttributeError
_ LinkedListTest.test_deletes_the_element_with_the_specified_value_from_the_list_re_assigns_tail _

self = <linked_list_test.LinkedListTest testMethod=test_deletes_the_element_with_the_specified_value_from_the_list_re_assigns_tail>

    def test_deletes_the_element_with_the_specified_value_from_the_list_re_assigns_tail(
        self,
    ):
        lst = LinkedList()
        lst.push(71)
        lst.push(83)
        lst.push(79)
>       lst.delete(83)
E       AttributeError: 'LinkedList' object has no attribute 'delete'

exercises/practice/linked-list/linked_list_test.py:121: AttributeError
____________ LinkedListTest.test_deletes_the_first_of_two_elements _____________

self = <linked_list_test.LinkedListTest testMethod=test_deletes_the_first_of_two_elements>

    def test_deletes_the_first_of_two_elements(self):
        lst = LinkedList()
        lst.push(97)
        lst.push(101)
>       lst.delete(97)
E       AttributeError: 'LinkedList' object has no attribute 'delete'

exercises/practice/linked-list/linked_list_test.py:142: AttributeError
_________________ LinkedListTest.test_deletes_the_only_element _________________

self = <linked_list_test.LinkedListTest testMethod=test_deletes_the_only_element>

    def test_deletes_the_only_element(self):
        lst = LinkedList()
        lst.push(61)
>       lst.delete(61)
E       AttributeError: 'LinkedList' object has no attribute 'delete'

exercises/practice/linked-list/linked_list_test.py:101: AttributeError
____________ LinkedListTest.test_deletes_the_second_of_two_elements ____________

self = <linked_list_test.LinkedListTest testMethod=test_deletes_the_second_of_two_elements>

    def test_deletes_the_second_of_two_elements(self):
        lst = LinkedList()
        lst.push(97)
        lst.push(101)
>       lst.delete(101)
E       AttributeError: 'LinkedList' object has no attribute 'delete'

exercises/practice/linked-list/linked_list_test.py:150: AttributeError
___ LinkedListTest.test_pop_push_shift_and_unshift_can_be_used_in_any_order ____

self = <linked_list_test.LinkedListTest testMethod=test_pop_push_shift_and_unshift_can_be_used_in_any_order>

    def test_pop_push_shift_and_unshift_can_be_used_in_any_order(self):
        lst = LinkedList()
        lst.push(1)
        lst.push(2)
        self.assertEqual(lst.pop(), 2)
        lst.push(3)
        self.assertEqual(lst.shift(), 1)
>       lst.unshift(4)
E       AttributeError: 'LinkedList' object has no attribute 'unshift'. Did you mean: 'shift'?

exercises/practice/linked-list/linked_list_test.py:51: AttributeError
_________ LinkedListTest.test_popping_to_empty_doesn_t_break_the_list __________

self = <linked_list_test.LinkedListTest testMethod=test_popping_to_empty_doesn_t_break_the_list>

    def test_popping_to_empty_doesn_t_break_the_list(self):
        lst = LinkedList()
        lst.push(41)
        lst.push(59)
        lst.pop()
        lst.pop()
        lst.push(47)
>       self.assertEqual(len(lst), 1)
E       TypeError: object of type 'LinkedList' has no len()

exercises/practice/linked-list/linked_list_test.py:85: TypeError
_________ LinkedListTest.test_shifting_to_empty_doesn_t_break_the_list _________

self = <linked_list_test.LinkedListTest testMethod=test_shifting_to_empty_doesn_t_break_the_list>

    def test_shifting_to_empty_doesn_t_break_the_list(self):
        lst = LinkedList()
        lst.push(41)
        lst.push(59)
        lst.shift()
        lst.shift()
        lst.push(47)
>       self.assertEqual(len(lst), 1)
E       TypeError: object of type 'LinkedList' has no len()

exercises/practice/linked-list/linked_list_test.py:95: TypeError
________ LinkedListTest.test_unshift_adds_element_at_start_of_the_list _________

self = <linked_list_test.LinkedListTest testMethod=test_unshift_adds_element_at_start_of_the_list>

    def test_unshift_adds_element_at_start_of_the_list(self):
        lst = LinkedList()
>       lst.unshift(23)
E       AttributeError: 'LinkedList' object has no attribute 'unshift'. Did you mean: 'shift'?

exercises/practice/linked-list/linked_list_test.py:39: AttributeError
____ LinkedListTest.test_using_delete_raises_an_error_if_the_list_is_empty _____

self = <linked_list_test.LinkedListTest testMethod=test_using_delete_raises_an_error_if_the_list_is_empty>

    def test_using_delete_raises_an_error_if_the_list_is_empty(self):
        lst = LinkedList()
        with self.assertRaises(ValueError) as err:
>           lst.delete(0)
E           AttributeError: 'LinkedList' object has no attribute 'delete'

exercises/practice/linked-list/linked_list_test.py:206: AttributeError
__ LinkedListTest.test_using_delete_raises_an_error_if_the_value_is_not_found __

self = <linked_list_test.LinkedListTest testMethod=test_using_delete_raises_an_error_if_the_value_is_not_found>

    def test_using_delete_raises_an_error_if_the_value_is_not_found(self):
        lst = LinkedList()
        lst.push(5)
        lst.push(7)
        self.assertEqual(lst.pop(), 7)
        with self.assertRaises(ValueError) as err:
>           lst.delete(0)
E           AttributeError: 'LinkedList' object has no attribute 'delete'

exercises/practice/linked-list/linked_list_test.py:216: AttributeError
______ LinkedListTest.test_using_pop_raises_an_error_if_the_list_is_empty ______

self = <linked_list_test.LinkedListTest testMethod=test_using_pop_raises_an_error_if_the_list_is_empty>

    def test_using_pop_raises_an_error_if_the_list_is_empty(self):
        lst = LinkedList()
        with self.assertRaises(IndexError) as err:
            lst.pop()
>           self.assertEqual(type(err.exception), IndexError)
E           AttributeError: '_AssertRaisesContext' object has no attribute 'exception'

exercises/practice/linked-list/linked_list_test.py:171: AttributeError
_____ LinkedListTest.test_using_shift_raises_an_error_if_the_list_is_empty _____

self = <linked_list_test.LinkedListTest testMethod=test_using_shift_raises_an_error_if_the_list_is_empty>

    def test_using_shift_raises_an_error_if_the_list_is_empty(self):
        lst = LinkedList()
        with self.assertRaises(IndexError) as err:
            lst.shift()
>           self.assertEqual(type(err.exception), IndexError)
E           AttributeError: '_AssertRaisesContext' object has no attribute 'exception'

exercises/practice/linked-list/linked_list_test.py:189: AttributeError
=========================== short test summary info ============================
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_can_return_with_pop_and_then_raise_an_error_if_empty
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_can_return_with_shift_and_then_raise_an_error_if_empty
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_count_a_list_with_items
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_count_an_empty_list
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_count_is_correct_after_mutation
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_deletes_only_the_first_occurrence
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_deletes_the_element_with_the_specified_value_from_the_list
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_deletes_the_element_with_the_specified_value_from_the_list_re_assigns_head
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_deletes_the_element_with_the_specified_value_from_the_list_re_assigns_tail
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_deletes_the_first_of_two_elements
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_deletes_the_only_element
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_deletes_the_second_of_two_elements
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_pop_push_shift_and_unshift_can_be_used_in_any_order
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_popping_to_empty_doesn_t_break_the_list
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_shifting_to_empty_doesn_t_break_the_list
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_unshift_adds_element_at_start_of_the_list
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_using_delete_raises_an_error_if_the_list_is_empty
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_using_delete_raises_an_error_if_the_value_is_not_found
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_using_pop_raises_an_error_if_the_list_is_empty
FAILED exercises/practice/linked-list/linked_list_test.py::LinkedListTest::test_using_shift_raises_an_error_if_the_list_is_empty
========================= 20 failed, 4 passed in 0.14s =========================
