============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 25 items

exercises/practice/wordy/wordy_test.py .FFFFF.FF..FF.FFFFFFFFF.F         [100%]

=================================== FAILURES ===================================
__________________ WordyTest.test_addition_and_multiplication __________________

self = <wordy_test.WordyTest testMethod=test_addition_and_multiplication>

    def test_addition_and_multiplication(self):
>       self.assertEqual(answer("What is -3 plus 7 multiplied by -2?"), -8)

exercises/practice/wordy/wordy_test.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

question = 'What is -3 plus 7 multiplied by -2?'

    def answer(question):
        # Iteration 0 - Numbers
        if re.match(r"What is \d+\?", question):
            return int(question.split()[2])
    
        # Iteration 1 - Addition
        if re.match(r"What is \d+ plus \d+\?", question):
            numbers = re.findall(r"\d+", question)
            return int(numbers[0]) + int(numbers[1])
    
        # Iteration 2 - Subtraction, Multiplication, and Division
        if re.match(r"What is \d+ (minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            if "minus" in question:
                return int(numbers[0]) - int(numbers[1])
            elif "multiplied by" in question:
                return int(numbers[0]) * int(numbers[1])
            elif "divided by" in question:
                return int(numbers[0]) / int(numbers[1])
    
        # Iteration 3 - Multiple Operations
        if re.match(r"What is \d+ (plus|minus|multiplied by|divided by) \d+ (plus|minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            operations = re.findall(r"(plus|minus|multiplied by|divided by)", question)
            result = int(numbers[0])
            for i in range(1, len(numbers)):
                if operations[i-1] == "plus":
                    result += int(numbers[i])
                elif operations[i-1] == "minus":
                    result -= int(numbers[i])
                elif operations[i-1] == "multiplied by":
                    result *= int(numbers[i])
                elif operations[i-1] == "divided by":
                    result /= int(numbers[i])
            return result
    
        # Iteration 4 - Errors
        if re.match(r"What is \d+ (cubed|plus plus \d+)\?", question):
            raise ValueError("Unsupported operation")
        if re.match(r"(Who|What) is", question):
>           raise ValueError("Non-math question")
E           ValueError: Non-math question

exercises/practice/wordy/wordy.py:43: ValueError
___________________ WordyTest.test_addition_and_subtraction ____________________

self = <wordy_test.WordyTest testMethod=test_addition_and_subtraction>

    def test_addition_and_subtraction(self):
>       self.assertEqual(answer("What is 1 plus 5 minus -2?"), 8)

exercises/practice/wordy/wordy_test.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

question = 'What is 1 plus 5 minus -2?'

    def answer(question):
        # Iteration 0 - Numbers
        if re.match(r"What is \d+\?", question):
            return int(question.split()[2])
    
        # Iteration 1 - Addition
        if re.match(r"What is \d+ plus \d+\?", question):
            numbers = re.findall(r"\d+", question)
            return int(numbers[0]) + int(numbers[1])
    
        # Iteration 2 - Subtraction, Multiplication, and Division
        if re.match(r"What is \d+ (minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            if "minus" in question:
                return int(numbers[0]) - int(numbers[1])
            elif "multiplied by" in question:
                return int(numbers[0]) * int(numbers[1])
            elif "divided by" in question:
                return int(numbers[0]) / int(numbers[1])
    
        # Iteration 3 - Multiple Operations
        if re.match(r"What is \d+ (plus|minus|multiplied by|divided by) \d+ (plus|minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            operations = re.findall(r"(plus|minus|multiplied by|divided by)", question)
            result = int(numbers[0])
            for i in range(1, len(numbers)):
                if operations[i-1] == "plus":
                    result += int(numbers[i])
                elif operations[i-1] == "minus":
                    result -= int(numbers[i])
                elif operations[i-1] == "multiplied by":
                    result *= int(numbers[i])
                elif operations[i-1] == "divided by":
                    result /= int(numbers[i])
            return result
    
        # Iteration 4 - Errors
        if re.match(r"What is \d+ (cubed|plus plus \d+)\?", question):
            raise ValueError("Unsupported operation")
        if re.match(r"(Who|What) is", question):
>           raise ValueError("Non-math question")
E           ValueError: Non-math question

exercises/practice/wordy/wordy.py:43: ValueError
________________ WordyTest.test_addition_with_negative_numbers _________________

self = <wordy_test.WordyTest testMethod=test_addition_with_negative_numbers>

    def test_addition_with_negative_numbers(self):
>       self.assertEqual(answer("What is -1 plus -10?"), -11)

exercises/practice/wordy/wordy_test.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

question = 'What is -1 plus -10?'

    def answer(question):
        # Iteration 0 - Numbers
        if re.match(r"What is \d+\?", question):
            return int(question.split()[2])
    
        # Iteration 1 - Addition
        if re.match(r"What is \d+ plus \d+\?", question):
            numbers = re.findall(r"\d+", question)
            return int(numbers[0]) + int(numbers[1])
    
        # Iteration 2 - Subtraction, Multiplication, and Division
        if re.match(r"What is \d+ (minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            if "minus" in question:
                return int(numbers[0]) - int(numbers[1])
            elif "multiplied by" in question:
                return int(numbers[0]) * int(numbers[1])
            elif "divided by" in question:
                return int(numbers[0]) / int(numbers[1])
    
        # Iteration 3 - Multiple Operations
        if re.match(r"What is \d+ (plus|minus|multiplied by|divided by) \d+ (plus|minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            operations = re.findall(r"(plus|minus|multiplied by|divided by)", question)
            result = int(numbers[0])
            for i in range(1, len(numbers)):
                if operations[i-1] == "plus":
                    result += int(numbers[i])
                elif operations[i-1] == "minus":
                    result -= int(numbers[i])
                elif operations[i-1] == "multiplied by":
                    result *= int(numbers[i])
                elif operations[i-1] == "divided by":
                    result /= int(numbers[i])
            return result
    
        # Iteration 4 - Errors
        if re.match(r"What is \d+ (cubed|plus plus \d+)\?", question):
            raise ValueError("Unsupported operation")
        if re.match(r"(Who|What) is", question):
>           raise ValueError("Non-math question")
E           ValueError: Non-math question

exercises/practice/wordy/wordy.py:43: ValueError
___________________________ WordyTest.test_division ____________________________

self = <wordy_test.WordyTest testMethod=test_division>

    def test_division(self):
>       self.assertEqual(answer("What is 33 divided by -3?"), -11)

exercises/practice/wordy/wordy_test.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

question = 'What is 33 divided by -3?'

    def answer(question):
        # Iteration 0 - Numbers
        if re.match(r"What is \d+\?", question):
            return int(question.split()[2])
    
        # Iteration 1 - Addition
        if re.match(r"What is \d+ plus \d+\?", question):
            numbers = re.findall(r"\d+", question)
            return int(numbers[0]) + int(numbers[1])
    
        # Iteration 2 - Subtraction, Multiplication, and Division
        if re.match(r"What is \d+ (minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            if "minus" in question:
                return int(numbers[0]) - int(numbers[1])
            elif "multiplied by" in question:
                return int(numbers[0]) * int(numbers[1])
            elif "divided by" in question:
                return int(numbers[0]) / int(numbers[1])
    
        # Iteration 3 - Multiple Operations
        if re.match(r"What is \d+ (plus|minus|multiplied by|divided by) \d+ (plus|minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            operations = re.findall(r"(plus|minus|multiplied by|divided by)", question)
            result = int(numbers[0])
            for i in range(1, len(numbers)):
                if operations[i-1] == "plus":
                    result += int(numbers[i])
                elif operations[i-1] == "minus":
                    result -= int(numbers[i])
                elif operations[i-1] == "multiplied by":
                    result *= int(numbers[i])
                elif operations[i-1] == "divided by":
                    result /= int(numbers[i])
            return result
    
        # Iteration 4 - Errors
        if re.match(r"What is \d+ (cubed|plus plus \d+)\?", question):
            raise ValueError("Unsupported operation")
        if re.match(r"(Who|What) is", question):
>           raise ValueError("Non-math question")
E           ValueError: Non-math question

exercises/practice/wordy/wordy.py:43: ValueError
_________________________ WordyTest.test_just_a_number _________________________

self = <wordy_test.WordyTest testMethod=test_just_a_number>

    def test_just_a_number(self):
>       self.assertEqual(answer("What is 5?"), 5)

exercises/practice/wordy/wordy_test.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

question = 'What is 5?'

    def answer(question):
        # Iteration 0 - Numbers
        if re.match(r"What is \d+\?", question):
>           return int(question.split()[2])
E           ValueError: invalid literal for int() with base 10: '5?'

exercises/practice/wordy/wordy.py:6: ValueError
________________________ WordyTest.test_missing_number _________________________

self = <wordy_test.WordyTest testMethod=test_missing_number>

    def test_missing_number(self):
        with self.assertRaises(ValueError) as err:
            answer("What is 7 plus multiplied by -2?")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "syntax error")
E       AssertionError: 'Non-math question' != 'syntax error'
E       - Non-math question
E       + syntax error

exercises/practice/wordy/wordy_test.py:118: AssertionError
_______________________ WordyTest.test_missing_operation _______________________

self = <wordy_test.WordyTest testMethod=test_missing_operation>

    def test_missing_operation(self):
        with self.assertRaises(ValueError) as err:
            answer("What is 2 2 minus 3?")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "syntax error")
E       AssertionError: 'Non-math question' != 'syntax error'
E       - Non-math question
E       + syntax error

exercises/practice/wordy/wordy_test.py:112: AssertionError
_______________________ WordyTest.test_multiple_division _______________________

self = <wordy_test.WordyTest testMethod=test_multiple_division>

    def test_multiple_division(self):
>       self.assertEqual(answer("What is -12 divided by 2 divided by -3?"), 2)

exercises/practice/wordy/wordy_test.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

question = 'What is -12 divided by 2 divided by -3?'

    def answer(question):
        # Iteration 0 - Numbers
        if re.match(r"What is \d+\?", question):
            return int(question.split()[2])
    
        # Iteration 1 - Addition
        if re.match(r"What is \d+ plus \d+\?", question):
            numbers = re.findall(r"\d+", question)
            return int(numbers[0]) + int(numbers[1])
    
        # Iteration 2 - Subtraction, Multiplication, and Division
        if re.match(r"What is \d+ (minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            if "minus" in question:
                return int(numbers[0]) - int(numbers[1])
            elif "multiplied by" in question:
                return int(numbers[0]) * int(numbers[1])
            elif "divided by" in question:
                return int(numbers[0]) / int(numbers[1])
    
        # Iteration 3 - Multiple Operations
        if re.match(r"What is \d+ (plus|minus|multiplied by|divided by) \d+ (plus|minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            operations = re.findall(r"(plus|minus|multiplied by|divided by)", question)
            result = int(numbers[0])
            for i in range(1, len(numbers)):
                if operations[i-1] == "plus":
                    result += int(numbers[i])
                elif operations[i-1] == "minus":
                    result -= int(numbers[i])
                elif operations[i-1] == "multiplied by":
                    result *= int(numbers[i])
                elif operations[i-1] == "divided by":
                    result /= int(numbers[i])
            return result
    
        # Iteration 4 - Errors
        if re.match(r"What is \d+ (cubed|plus plus \d+)\?", question):
            raise ValueError("Unsupported operation")
        if re.match(r"(Who|What) is", question):
>           raise ValueError("Non-math question")
E           ValueError: Non-math question

exercises/practice/wordy/wordy.py:43: ValueError
____________________ WordyTest.test_multiple_multiplication ____________________

self = <wordy_test.WordyTest testMethod=test_multiple_multiplication>

    def test_multiple_multiplication(self):
>       self.assertEqual(answer("What is 2 multiplied by -2 multiplied by 3?"), -12)

exercises/practice/wordy/wordy_test.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

question = 'What is 2 multiplied by -2 multiplied by 3?'

    def answer(question):
        # Iteration 0 - Numbers
        if re.match(r"What is \d+\?", question):
            return int(question.split()[2])
    
        # Iteration 1 - Addition
        if re.match(r"What is \d+ plus \d+\?", question):
            numbers = re.findall(r"\d+", question)
            return int(numbers[0]) + int(numbers[1])
    
        # Iteration 2 - Subtraction, Multiplication, and Division
        if re.match(r"What is \d+ (minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            if "minus" in question:
                return int(numbers[0]) - int(numbers[1])
            elif "multiplied by" in question:
                return int(numbers[0]) * int(numbers[1])
            elif "divided by" in question:
                return int(numbers[0]) / int(numbers[1])
    
        # Iteration 3 - Multiple Operations
        if re.match(r"What is \d+ (plus|minus|multiplied by|divided by) \d+ (plus|minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            operations = re.findall(r"(plus|minus|multiplied by|divided by)", question)
            result = int(numbers[0])
            for i in range(1, len(numbers)):
                if operations[i-1] == "plus":
                    result += int(numbers[i])
                elif operations[i-1] == "minus":
                    result -= int(numbers[i])
                elif operations[i-1] == "multiplied by":
                    result *= int(numbers[i])
                elif operations[i-1] == "divided by":
                    result /= int(numbers[i])
            return result
    
        # Iteration 4 - Errors
        if re.match(r"What is \d+ (cubed|plus plus \d+)\?", question):
            raise ValueError("Unsupported operation")
        if re.match(r"(Who|What) is", question):
>           raise ValueError("Non-math question")
E           ValueError: Non-math question

exercises/practice/wordy/wordy.py:43: ValueError
________________________ WordyTest.test_multiplication _________________________

self = <wordy_test.WordyTest testMethod=test_multiplication>

    def test_multiplication(self):
>       self.assertEqual(answer("What is -3 multiplied by 25?"), -75)

exercises/practice/wordy/wordy_test.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

question = 'What is -3 multiplied by 25?'

    def answer(question):
        # Iteration 0 - Numbers
        if re.match(r"What is \d+\?", question):
            return int(question.split()[2])
    
        # Iteration 1 - Addition
        if re.match(r"What is \d+ plus \d+\?", question):
            numbers = re.findall(r"\d+", question)
            return int(numbers[0]) + int(numbers[1])
    
        # Iteration 2 - Subtraction, Multiplication, and Division
        if re.match(r"What is \d+ (minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            if "minus" in question:
                return int(numbers[0]) - int(numbers[1])
            elif "multiplied by" in question:
                return int(numbers[0]) * int(numbers[1])
            elif "divided by" in question:
                return int(numbers[0]) / int(numbers[1])
    
        # Iteration 3 - Multiple Operations
        if re.match(r"What is \d+ (plus|minus|multiplied by|divided by) \d+ (plus|minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            operations = re.findall(r"(plus|minus|multiplied by|divided by)", question)
            result = int(numbers[0])
            for i in range(1, len(numbers)):
                if operations[i-1] == "plus":
                    result += int(numbers[i])
                elif operations[i-1] == "minus":
                    result -= int(numbers[i])
                elif operations[i-1] == "multiplied by":
                    result *= int(numbers[i])
                elif operations[i-1] == "divided by":
                    result /= int(numbers[i])
            return result
    
        # Iteration 4 - Errors
        if re.match(r"What is \d+ (cubed|plus plus \d+)\?", question):
            raise ValueError("Unsupported operation")
        if re.match(r"(Who|What) is", question):
>           raise ValueError("Non-math question")
E           ValueError: Non-math question

exercises/practice/wordy/wordy.py:43: ValueError
_______________________ WordyTest.test_non_math_question _______________________

self = <wordy_test.WordyTest testMethod=test_non_math_question>

    def test_non_math_question(self):
        with self.assertRaises(ValueError) as err:
            answer("Who is the President of the United States?")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "unknown operation")
E       AssertionError: 'Non-math question' != 'unknown operation'
E       - Non-math question
E       + unknown operation

exercises/practice/wordy/wordy_test.py:68: AssertionError
____________________ WordyTest.test_reject_postfix_notation ____________________

self = <wordy_test.WordyTest testMethod=test_reject_postfix_notation>

    def test_reject_postfix_notation(self):
        with self.assertRaises(ValueError) as err:
            answer("What is 1 2 plus?")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "syntax error")
E       AssertionError: 'Non-math question' != 'syntax error'
E       - Non-math question
E       + syntax error

exercises/practice/wordy/wordy_test.py:98: AssertionError
____________________ WordyTest.test_reject_prefix_notation _____________________

self = <wordy_test.WordyTest testMethod=test_reject_prefix_notation>

    def test_reject_prefix_notation(self):
        with self.assertRaises(ValueError) as err:
            answer("What is plus 1 2?")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "syntax error")
E       AssertionError: 'Non-math question' != 'syntax error'
E       - Non-math question
E       + syntax error

exercises/practice/wordy/wordy_test.py:104: AssertionError
_______________ WordyTest.test_reject_problem_missing_an_operand _______________

self = <wordy_test.WordyTest testMethod=test_reject_problem_missing_an_operand>

    def test_reject_problem_missing_an_operand(self):
        with self.assertRaises(ValueError) as err:
            answer("What is 1 plus?")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "syntax error")
E       AssertionError: 'Non-math question' != 'syntax error'
E       - Non-math question
E       + syntax error

exercises/practice/wordy/wordy_test.py:74: AssertionError
_________ WordyTest.test_reject_problem_with_no_operands_or_operators __________

self = <wordy_test.WordyTest testMethod=test_reject_problem_with_no_operands_or_operators>

    def test_reject_problem_with_no_operands_or_operators(self):
        with self.assertRaises(ValueError) as err:
            answer("What is?")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "syntax error")
E       AssertionError: 'Non-math question' != 'syntax error'
E       - Non-math question
E       + syntax error

exercises/practice/wordy/wordy_test.py:80: AssertionError
__________________ WordyTest.test_reject_two_numbers_in_a_row __________________

self = <wordy_test.WordyTest testMethod=test_reject_two_numbers_in_a_row>

    def test_reject_two_numbers_in_a_row(self):
        with self.assertRaises(ValueError) as err:
            answer("What is 1 plus 2 1?")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "syntax error")
E       AssertionError: 'Non-math question' != 'syntax error'
E       - Non-math question
E       + syntax error

exercises/practice/wordy/wordy_test.py:92: AssertionError
________________ WordyTest.test_reject_two_operations_in_a_row _________________

self = <wordy_test.WordyTest testMethod=test_reject_two_operations_in_a_row>

    def test_reject_two_operations_in_a_row(self):
        with self.assertRaises(ValueError) as err:
            answer("What is 1 plus plus 2?")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "syntax error")
E       AssertionError: 'Unsupported operation' != 'syntax error'
E       - Unsupported operation
E       + syntax error

exercises/practice/wordy/wordy_test.py:86: AssertionError
__________________________ WordyTest.test_subtraction __________________________

self = <wordy_test.WordyTest testMethod=test_subtraction>

    def test_subtraction(self):
>       self.assertEqual(answer("What is 4 minus -12?"), 16)

exercises/practice/wordy/wordy_test.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

question = 'What is 4 minus -12?'

    def answer(question):
        # Iteration 0 - Numbers
        if re.match(r"What is \d+\?", question):
            return int(question.split()[2])
    
        # Iteration 1 - Addition
        if re.match(r"What is \d+ plus \d+\?", question):
            numbers = re.findall(r"\d+", question)
            return int(numbers[0]) + int(numbers[1])
    
        # Iteration 2 - Subtraction, Multiplication, and Division
        if re.match(r"What is \d+ (minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            if "minus" in question:
                return int(numbers[0]) - int(numbers[1])
            elif "multiplied by" in question:
                return int(numbers[0]) * int(numbers[1])
            elif "divided by" in question:
                return int(numbers[0]) / int(numbers[1])
    
        # Iteration 3 - Multiple Operations
        if re.match(r"What is \d+ (plus|minus|multiplied by|divided by) \d+ (plus|minus|multiplied by|divided by) \d+\?", question):
            numbers = re.findall(r"\d+", question)
            operations = re.findall(r"(plus|minus|multiplied by|divided by)", question)
            result = int(numbers[0])
            for i in range(1, len(numbers)):
                if operations[i-1] == "plus":
                    result += int(numbers[i])
                elif operations[i-1] == "minus":
                    result -= int(numbers[i])
                elif operations[i-1] == "multiplied by":
                    result *= int(numbers[i])
                elif operations[i-1] == "divided by":
                    result /= int(numbers[i])
            return result
    
        # Iteration 4 - Errors
        if re.match(r"What is \d+ (cubed|plus plus \d+)\?", question):
            raise ValueError("Unsupported operation")
        if re.match(r"(Who|What) is", question):
>           raise ValueError("Non-math question")
E           ValueError: Non-math question

exercises/practice/wordy/wordy.py:43: ValueError
_______________________ WordyTest.test_unknown_operation _______________________

self = <wordy_test.WordyTest testMethod=test_unknown_operation>

    def test_unknown_operation(self):
        with self.assertRaises(ValueError) as err:
            answer("What is 52 cubed?")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "unknown operation")
E       AssertionError: 'Unsupported operation' != 'unknown operation'
E       - Unsupported operation
E       + unknown operation

exercises/practice/wordy/wordy_test.py:62: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_addition_and_multiplication
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_addition_and_subtraction
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_addition_with_negative_numbers
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_division - Val...
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_just_a_number
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_missing_number
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_missing_operation
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_multiple_division
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_multiple_multiplication
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_multiplication
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_non_math_question
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_reject_postfix_notation
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_reject_prefix_notation
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_reject_problem_missing_an_operand
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_reject_problem_with_no_operands_or_operators
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_reject_two_numbers_in_a_row
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_reject_two_operations_in_a_row
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_subtraction - ...
FAILED exercises/practice/wordy/wordy_test.py::WordyTest::test_unknown_operation
========================= 19 failed, 6 passed in 0.18s =========================
