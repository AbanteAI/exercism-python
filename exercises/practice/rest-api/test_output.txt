============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 9 items

exercises/practice/rest-api/rest_api_test.py FFFFFFFFF                   [100%]

=================================== FAILURES ===================================
__________________________ RestApiTest.test_add_user ___________________________

self = <rest_api_test.RestApiTest testMethod=test_add_user>

    def test_add_user(self):
        database = {"users": []}
        api = RestAPI(database)
        payload = json.dumps({"user": "Adam"})
>       response = api.post("/add", payload)

exercises/practice/rest-api/rest_api_test.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_api.RestAPI object at 0x7f72e108dd50>, url = '/add'
payload = '{"user": "Adam"}'

    def post(self, url, payload=None):
        if url == "/add":
            new_user = {
>               "name": payload["user"],
                "owes": {},
                "owed_by": {},
                "balance": 0
            }
E           TypeError: string indices must be integers

exercises/practice/rest-api/rest_api.py:16: TypeError
________________ RestApiTest.test_borrower_has_negative_balance ________________

self = <rest_api_test.RestApiTest testMethod=test_borrower_has_negative_balance>

    def test_borrower_has_negative_balance(self):
        database = {
            "users": [
                {"name": "Adam", "owes": {}, "owed_by": {}, "balance": 0.0},
                {"name": "Bob", "owes": {"Chuck": 3.0}, "owed_by": {}, "balance": -3.0},
                {"name": "Chuck", "owes": {}, "owed_by": {"Bob": 3.0}, "balance": 3.0},
            ]
        }
        api = RestAPI(database)
        payload = json.dumps({"lender": "Adam", "borrower": "Bob", "amount": 3.0})
>       response = api.post("/iou", payload)

exercises/practice/rest-api/rest_api_test.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_api.RestAPI object at 0x7f72e10de140>, url = '/iou'
payload = '{"lender": "Adam", "borrower": "Bob", "amount": 3.0}'

    def post(self, url, payload=None):
        if url == "/add":
            new_user = {
                "name": payload["user"],
                "owes": {},
                "owed_by": {},
                "balance": 0
            }
            self.database["users"].append(new_user)
            return new_user
        elif url == "/iou":
>           lender = self.find_user(payload["lender"])
E           TypeError: string indices must be integers

exercises/practice/rest-api/rest_api.py:24: TypeError
__________________ RestApiTest.test_both_users_have_0_balance __________________

self = <rest_api_test.RestApiTest testMethod=test_both_users_have_0_balance>

    def test_both_users_have_0_balance(self):
        database = {
            "users": [
                {"name": "Adam", "owes": {}, "owed_by": {}, "balance": 0.0},
                {"name": "Bob", "owes": {}, "owed_by": {}, "balance": 0.0},
            ]
        }
        api = RestAPI(database)
        payload = json.dumps({"lender": "Adam", "borrower": "Bob", "amount": 3.0})
>       response = api.post("/iou", payload)

exercises/practice/rest-api/rest_api_test.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_api.RestAPI object at 0x7f72e10e8d90>, url = '/iou'
payload = '{"lender": "Adam", "borrower": "Bob", "amount": 3.0}'

    def post(self, url, payload=None):
        if url == "/add":
            new_user = {
                "name": payload["user"],
                "owes": {},
                "owed_by": {},
                "balance": 0
            }
            self.database["users"].append(new_user)
            return new_user
        elif url == "/iou":
>           lender = self.find_user(payload["lender"])
E           TypeError: string indices must be integers

exercises/practice/rest-api/rest_api.py:24: TypeError
_______________________ RestApiTest.test_get_single_user _______________________

self = <rest_api_test.RestApiTest testMethod=test_get_single_user>

    def test_get_single_user(self):
        database = {
            "users": [
                {"name": "Adam", "owes": {}, "owed_by": {}, "balance": 0.0},
                {"name": "Bob", "owes": {}, "owed_by": {}, "balance": 0.0},
            ]
        }
        api = RestAPI(database)
        payload = json.dumps({"users": ["Bob"]})
>       response = api.get("/users", payload)

exercises/practice/rest-api/rest_api_test.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/rest-api/rest_api.py:8: in get
    return {"users": [user for user in self.database["users"] if user["name"] in payload["users"]]}
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f72e108fc10>

>   return {"users": [user for user in self.database["users"] if user["name"] in payload["users"]]}
E   TypeError: string indices must be integers

exercises/practice/rest-api/rest_api.py:8: TypeError
_________________ RestApiTest.test_lender_has_negative_balance _________________

self = <rest_api_test.RestApiTest testMethod=test_lender_has_negative_balance>

    def test_lender_has_negative_balance(self):
        database = {
            "users": [
                {"name": "Adam", "owes": {}, "owed_by": {}, "balance": 0.0},
                {"name": "Bob", "owes": {"Chuck": 3.0}, "owed_by": {}, "balance": -3.0},
                {"name": "Chuck", "owes": {}, "owed_by": {"Bob": 3.0}, "balance": 3.0},
            ]
        }
        api = RestAPI(database)
        payload = json.dumps({"lender": "Bob", "borrower": "Adam", "amount": 3.0})
>       response = api.post("/iou", payload)

exercises/practice/rest-api/rest_api_test.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_api.RestAPI object at 0x7f72e10eaaa0>, url = '/iou'
payload = '{"lender": "Bob", "borrower": "Adam", "amount": 3.0}'

    def post(self, url, payload=None):
        if url == "/add":
            new_user = {
                "name": payload["user"],
                "owes": {},
                "owed_by": {},
                "balance": 0
            }
            self.database["users"].append(new_user)
            return new_user
        elif url == "/iou":
>           lender = self.find_user(payload["lender"])
E           TypeError: string indices must be integers

exercises/practice/rest-api/rest_api.py:24: TypeError
____________________ RestApiTest.test_lender_owes_borrower _____________________

self = <rest_api_test.RestApiTest testMethod=test_lender_owes_borrower>

    def test_lender_owes_borrower(self):
        database = {
            "users": [
                {"name": "Adam", "owes": {"Bob": 3.0}, "owed_by": {}, "balance": -3.0},
                {"name": "Bob", "owes": {}, "owed_by": {"Adam": 3.0}, "balance": 3.0},
            ]
        }
        api = RestAPI(database)
        payload = json.dumps({"lender": "Adam", "borrower": "Bob", "amount": 2.0})
>       response = api.post("/iou", payload)

exercises/practice/rest-api/rest_api_test.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_api.RestAPI object at 0x7f72e108e320>, url = '/iou'
payload = '{"lender": "Adam", "borrower": "Bob", "amount": 2.0}'

    def post(self, url, payload=None):
        if url == "/add":
            new_user = {
                "name": payload["user"],
                "owes": {},
                "owed_by": {},
                "balance": 0
            }
            self.database["users"].append(new_user)
            return new_user
        elif url == "/iou":
>           lender = self.find_user(payload["lender"])
E           TypeError: string indices must be integers

exercises/practice/rest-api/rest_api.py:24: TypeError
___________ RestApiTest.test_lender_owes_borrower_less_than_new_loan ___________

self = <rest_api_test.RestApiTest testMethod=test_lender_owes_borrower_less_than_new_loan>

    def test_lender_owes_borrower_less_than_new_loan(self):
        database = {
            "users": [
                {"name": "Adam", "owes": {"Bob": 3.0}, "owed_by": {}, "balance": -3.0},
                {"name": "Bob", "owes": {}, "owed_by": {"Adam": 3.0}, "balance": 3.0},
            ]
        }
        api = RestAPI(database)
        payload = json.dumps({"lender": "Adam", "borrower": "Bob", "amount": 4.0})
>       response = api.post("/iou", payload)

exercises/practice/rest-api/rest_api_test.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_api.RestAPI object at 0x7f72e10dc640>, url = '/iou'
payload = '{"lender": "Adam", "borrower": "Bob", "amount": 4.0}'

    def post(self, url, payload=None):
        if url == "/add":
            new_user = {
                "name": payload["user"],
                "owes": {},
                "owed_by": {},
                "balance": 0
            }
            self.database["users"].append(new_user)
            return new_user
        elif url == "/iou":
>           lender = self.find_user(payload["lender"])
E           TypeError: string indices must be integers

exercises/practice/rest-api/rest_api.py:24: TypeError
____________ RestApiTest.test_lender_owes_borrower_same_as_new_loan ____________

self = <rest_api_test.RestApiTest testMethod=test_lender_owes_borrower_same_as_new_loan>

    def test_lender_owes_borrower_same_as_new_loan(self):
        database = {
            "users": [
                {"name": "Adam", "owes": {"Bob": 3.0}, "owed_by": {}, "balance": -3.0},
                {"name": "Bob", "owes": {}, "owed_by": {"Adam": 3.0}, "balance": 3.0},
            ]
        }
        api = RestAPI(database)
        payload = json.dumps({"lender": "Adam", "borrower": "Bob", "amount": 3.0})
>       response = api.post("/iou", payload)

exercises/practice/rest-api/rest_api_test.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rest_api.RestAPI object at 0x7f72e10d86a0>, url = '/iou'
payload = '{"lender": "Adam", "borrower": "Bob", "amount": 3.0}'

    def post(self, url, payload=None):
        if url == "/add":
            new_user = {
                "name": payload["user"],
                "owes": {},
                "owed_by": {},
                "balance": 0
            }
            self.database["users"].append(new_user)
            return new_user
        elif url == "/iou":
>           lender = self.find_user(payload["lender"])
E           TypeError: string indices must be integers

exercises/practice/rest-api/rest_api.py:24: TypeError
__________________________ RestApiTest.test_no_users ___________________________

self = <rest_api_test.RestApiTest testMethod=test_no_users>

    def test_no_users(self):
        database = {"users": []}
        api = RestAPI(database)
    
        response = api.get("/users")
        expected = {"users": []}
>       self.assertDictEqual(json.loads(response), expected)

exercises/practice/rest-api/rest_api_test.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s = {'users': []}, cls = None, object_hook = None, parse_float = None
parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}

    def loads(s, *, cls=None, object_hook=None, parse_float=None,
            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
        """Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance
        containing a JSON document) to a Python object.
    
        ``object_hook`` is an optional function that will be called with the
        result of any object literal decode (a ``dict``). The return value of
        ``object_hook`` will be used instead of the ``dict``. This feature
        can be used to implement custom decoders (e.g. JSON-RPC class hinting).
    
        ``object_pairs_hook`` is an optional function that will be called with the
        result of any object literal decoded with an ordered list of pairs.  The
        return value of ``object_pairs_hook`` will be used instead of the ``dict``.
        This feature can be used to implement custom decoders.  If ``object_hook``
        is also defined, the ``object_pairs_hook`` takes priority.
    
        ``parse_float``, if specified, will be called with the string
        of every JSON float to be decoded. By default this is equivalent to
        float(num_str). This can be used to use another datatype or parser
        for JSON floats (e.g. decimal.Decimal).
    
        ``parse_int``, if specified, will be called with the string
        of every JSON int to be decoded. By default this is equivalent to
        int(num_str). This can be used to use another datatype or parser
        for JSON integers (e.g. float).
    
        ``parse_constant``, if specified, will be called with one of the
        following strings: -Infinity, Infinity, NaN.
        This can be used to raise an exception if invalid JSON numbers
        are encountered.
    
        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``
        kwarg; otherwise ``JSONDecoder`` is used.
        """
        if isinstance(s, str):
            if s.startswith('\ufeff'):
                raise JSONDecodeError("Unexpected UTF-8 BOM (decode using utf-8-sig)",
                                      s, 0)
        else:
            if not isinstance(s, (bytes, bytearray)):
>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                                f'not {s.__class__.__name__}')
E               TypeError: the JSON object must be str, bytes or bytearray, not dict

/usr/lib/python3.10/json/__init__.py:339: TypeError
=========================== short test summary info ============================
FAILED exercises/practice/rest-api/rest_api_test.py::RestApiTest::test_add_user
FAILED exercises/practice/rest-api/rest_api_test.py::RestApiTest::test_borrower_has_negative_balance
FAILED exercises/practice/rest-api/rest_api_test.py::RestApiTest::test_both_users_have_0_balance
FAILED exercises/practice/rest-api/rest_api_test.py::RestApiTest::test_get_single_user
FAILED exercises/practice/rest-api/rest_api_test.py::RestApiTest::test_lender_has_negative_balance
FAILED exercises/practice/rest-api/rest_api_test.py::RestApiTest::test_lender_owes_borrower
FAILED exercises/practice/rest-api/rest_api_test.py::RestApiTest::test_lender_owes_borrower_less_than_new_loan
FAILED exercises/practice/rest-api/rest_api_test.py::RestApiTest::test_lender_owes_borrower_same_as_new_loan
FAILED exercises/practice/rest-api/rest_api_test.py::RestApiTest::test_no_users
============================== 9 failed in 0.07s ===============================
