============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 17 items

exercises/practice/markdown/markdown_test.py FFFFFFFFFFFFFFFFF           [100%]

=================================== FAILURES ===================================
_______________ MarkdownTest.test_h7_header_level_is_a_paragraph _______________

self = <markdown_test.MarkdownTest testMethod=test_h7_header_level_is_a_paragraph>

    def test_h7_header_level_is_a_paragraph(self):
        self.assertEqual(
>           parse("####### This will not be an h7"),
            "<p>####### This will not be an h7</p>",
        )

exercises/practice/markdown/markdown_test.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '####### This will not be an h7'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
_____________ MarkdownTest.test_mixed_normal_italics_and_bold_text _____________

self = <markdown_test.MarkdownTest testMethod=test_mixed_normal_italics_and_bold_text>

    def test_mixed_normal_italics_and_bold_text(self):
        self.assertEqual(
>           parse("This will _be_ __mixed__"),
            "<p>This will <em>be</em> <strong>mixed</strong></p>",
        )

exercises/practice/markdown/markdown_test.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = 'This will _be_ __mixed__'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
_____________ MarkdownTest.test_parses_normal_text_as_a_paragraph ______________

self = <markdown_test.MarkdownTest testMethod=test_parses_normal_text_as_a_paragraph>

    def test_parses_normal_text_as_a_paragraph(self):
        self.assertEqual(
>           parse("This will be a paragraph"), "<p>This will be a paragraph</p>"
        )

exercises/practice/markdown/markdown_test.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = 'This will be a paragraph'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
_____________________ MarkdownTest.test_parsing_bold_text ______________________

self = <markdown_test.MarkdownTest testMethod=test_parsing_bold_text>

    def test_parsing_bold_text(self):
        self.assertEqual(
>           parse("__This will be bold__"), "<p><strong>This will be bold</strong></p>"
        )

exercises/practice/markdown/markdown_test.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '__This will be bold__'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
______________________ MarkdownTest.test_parsing_italics _______________________

self = <markdown_test.MarkdownTest testMethod=test_parsing_italics>

    def test_parsing_italics(self):
        self.assertEqual(
>           parse("_This will be italic_"), "<p><em>This will be italic</em></p>"
        )

exercises/practice/markdown/markdown_test.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '_This will be italic_'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
______________________ MarkdownTest.test_unordered_lists _______________________

self = <markdown_test.MarkdownTest testMethod=test_unordered_lists>

    def test_unordered_lists(self):
        self.assertEqual(
>           parse("* Item 1\n* Item 2"), "<ul><li>Item 1</li><li>Item 2</li></ul>"
        )

exercises/practice/markdown/markdown_test.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '* Item 1\n* Item 2'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
_ MarkdownTest.test_unordered_lists_close_properly_with_preceding_and_following_lines _

self = <markdown_test.MarkdownTest testMethod=test_unordered_lists_close_properly_with_preceding_and_following_lines>

    def test_unordered_lists_close_properly_with_preceding_and_following_lines(self):
        self.assertEqual(
>           parse("# Start a list\n* Item 1\n* Item 2\nEnd a list"),
            "<h1>Start a list</h1><ul><li>Item 1</li><li>Item 2</li></ul><p>End a list</p>",
        )

exercises/practice/markdown/markdown_test.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '# Start a list\n* Item 1\n* Item 2\nEnd a list'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
______________ MarkdownTest.test_with_a_little_bit_of_everything _______________

self = <markdown_test.MarkdownTest testMethod=test_with_a_little_bit_of_everything>

    def test_with_a_little_bit_of_everything(self):
        self.assertEqual(
>           parse("# Header!\n* __Bold Item__\n* _Italic Item_"),
            "<h1>Header!</h1><ul><li><strong>Bold Item</strong></li><li><em>Italic Item</em></li></ul>",
        )

exercises/practice/markdown/markdown_test.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '# Header!\n* __Bold Item__\n* _Italic Item_'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
____________________ MarkdownTest.test_with_h1_header_level ____________________

self = <markdown_test.MarkdownTest testMethod=test_with_h1_header_level>

    def test_with_h1_header_level(self):
>       self.assertEqual(parse("# This will be an h1"), "<h1>This will be an h1</h1>")

exercises/practice/markdown/markdown_test.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '# This will be an h1'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
____________________ MarkdownTest.test_with_h2_header_level ____________________

self = <markdown_test.MarkdownTest testMethod=test_with_h2_header_level>

    def test_with_h2_header_level(self):
>       self.assertEqual(parse("## This will be an h2"), "<h2>This will be an h2</h2>")

exercises/practice/markdown/markdown_test.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '## This will be an h2'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
____________________ MarkdownTest.test_with_h3_header_level ____________________

self = <markdown_test.MarkdownTest testMethod=test_with_h3_header_level>

    def test_with_h3_header_level(self):
>       self.assertEqual(parse("### This will be an h3"), "<h3>This will be an h3</h3>")

exercises/practice/markdown/markdown_test.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '### This will be an h3'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
____________________ MarkdownTest.test_with_h4_header_level ____________________

self = <markdown_test.MarkdownTest testMethod=test_with_h4_header_level>

    def test_with_h4_header_level(self):
        self.assertEqual(
>           parse("#### This will be an h4"), "<h4>This will be an h4</h4>"
        )

exercises/practice/markdown/markdown_test.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '#### This will be an h4'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
____________________ MarkdownTest.test_with_h5_header_level ____________________

self = <markdown_test.MarkdownTest testMethod=test_with_h5_header_level>

    def test_with_h5_header_level(self):
        self.assertEqual(
>           parse("##### This will be an h5"), "<h5>This will be an h5</h5>"
        )

exercises/practice/markdown/markdown_test.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '##### This will be an h5'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
____________________ MarkdownTest.test_with_h6_header_level ____________________

self = <markdown_test.MarkdownTest testMethod=test_with_h6_header_level>

    def test_with_h6_header_level(self):
        self.assertEqual(
>           parse("###### This will be an h6"), "<h6>This will be an h6</h6>"
        )

exercises/practice/markdown/markdown_test.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '###### This will be an h6'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
_ MarkdownTest.test_with_markdown_symbols_in_the_header_text_that_should_not_be_interpreted _

self = <markdown_test.MarkdownTest testMethod=test_with_markdown_symbols_in_the_header_text_that_should_not_be_interpreted>

    def test_with_markdown_symbols_in_the_header_text_that_should_not_be_interpreted(
        self,
    ):
        self.assertEqual(
>           parse("# This is a header with # and * in the text"),
            "<h1>This is a header with # and * in the text</h1>",
        )

exercises/practice/markdown/markdown_test.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '# This is a header with # and * in the text'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
_ MarkdownTest.test_with_markdown_symbols_in_the_list_item_text_that_should_not_be_interpreted _

self = <markdown_test.MarkdownTest testMethod=test_with_markdown_symbols_in_the_list_item_text_that_should_not_be_interpreted>

    def test_with_markdown_symbols_in_the_list_item_text_that_should_not_be_interpreted(
        self,
    ):
        self.assertEqual(
>           parse("* Item 1 with a # in the text\n* Item 2 with * in the text"),
            "<ul><li>Item 1 with a # in the text</li><li>Item 2 with * in the text</li></ul>",
        )

exercises/practice/markdown/markdown_test.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = '* Item 1 with a # in the text\n* Item 2 with * in the text'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
_ MarkdownTest.test_with_markdown_symbols_in_the_paragraph_text_that_should_not_be_interpreted _

self = <markdown_test.MarkdownTest testMethod=test_with_markdown_symbols_in_the_paragraph_text_that_should_not_be_interpreted>

    def test_with_markdown_symbols_in_the_paragraph_text_that_should_not_be_interpreted(
        self,
    ):
        self.assertEqual(
>           parse("This is a paragraph with # and * in the text"),
            "<p>This is a paragraph with # and * in the text</p>",
        )

exercises/practice/markdown/markdown_test.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

markdown = 'This is a paragraph with # and * in the text'

    def parse(markdown):
        lines = markdown.split('\n')
        res = ''
        in_list = False
        in_list_append = False
        for i in lines:
            for j in range(6, 0, -1):
>               if re.match(f'{"#" * j} (.*)', i) is not None:
E               NameError: name 're' is not defined

exercises/practice/markdown/markdown.py:10: NameError
=========================== short test summary info ============================
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_h7_header_level_is_a_paragraph
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_mixed_normal_italics_and_bold_text
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_parses_normal_text_as_a_paragraph
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_parsing_bold_text
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_parsing_italics
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_unordered_lists
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_unordered_lists_close_properly_with_preceding_and_following_lines
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_a_little_bit_of_everything
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_h1_header_level
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_h2_header_level
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_h3_header_level
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_h4_header_level
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_h5_header_level
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_h6_header_level
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_markdown_symbols_in_the_header_text_that_should_not_be_interpreted
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_markdown_symbols_in_the_list_item_text_that_should_not_be_interpreted
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_markdown_symbols_in_the_paragraph_text_that_should_not_be_interpreted
============================== 17 failed in 0.10s ==============================
