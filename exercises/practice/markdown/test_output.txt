============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1, asyncio-0.21.1
asyncio: mode=strict
collected 17 items

exercises/practice/markdown/markdown_test.py .F.FFFFF.......F.           [100%]

=================================== FAILURES ===================================
_____________ MarkdownTest.test_mixed_normal_italics_and_bold_text _____________

self = <markdown_test.MarkdownTest testMethod=test_mixed_normal_italics_and_bold_text>

    def test_mixed_normal_italics_and_bold_text(self):
>       self.assertEqual(
            parse("This will _be_ __mixed__"),
            "<p>This will <em>be</em> <strong>mixed</strong></p>",
        )
E       AssertionError: '<p>This will _be_ __mixed__</p>' != '<p>This will <em>be</em> <strong>mixed</strong></p>'
E       - <p>This will _be_ __mixed__</p>
E       + <p>This will <em>be</em> <strong>mixed</strong></p>

exercises/practice/markdown/markdown_test.py:29: AssertionError
_____________________ MarkdownTest.test_parsing_bold_text ______________________

self = <markdown_test.MarkdownTest testMethod=test_parsing_bold_text>

    def test_parsing_bold_text(self):
>       self.assertEqual(
            parse("__This will be bold__"), "<p><strong>This will be bold</strong></p>"
        )
E       AssertionError: '<p>__This will be bold__</p>' != '<p><strong>This will be bold</strong></p>'
E       - <p>__This will be bold__</p>
E       + <p><strong>This will be bold</strong></p>

exercises/practice/markdown/markdown_test.py:24: AssertionError
______________________ MarkdownTest.test_parsing_italics _______________________

self = <markdown_test.MarkdownTest testMethod=test_parsing_italics>

    def test_parsing_italics(self):
>       self.assertEqual(
            parse("_This will be italic_"), "<p><em>This will be italic</em></p>"
        )
E       AssertionError: '<p>_This will be italic_</p>' != '<p><em>This will be italic</em></p>'
E       - <p>_This will be italic_</p>
E       ?    ^                   ^
E       + <p><em>This will be italic</em></p>
E       ?    ^^^^                   ^^^^^

exercises/practice/markdown/markdown_test.py:19: AssertionError
______________________ MarkdownTest.test_unordered_lists _______________________

self = <markdown_test.MarkdownTest testMethod=test_unordered_lists>

    def test_unordered_lists(self):
        self.assertEqual(
>           parse("* Item 1\n* Item 2"), "<ul><li>Item 1</li><li>Item 2</li></ul>"
        )

exercises/practice/markdown/markdown_test.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/markdown/markdown.py:11: in parse
    line = parse_list_items(line, in_list)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

line = '* Item 1', in_list = False

    def parse_list_items(line, in_list):
        match = re.match(r'\* (.*)', line)
        if match:
            curr = match.group(1)
>           curr = parse_formatting(curr)
E           NameError: name 'parse_formatting' is not defined

exercises/practice/markdown/markdown.py:29: NameError
_ MarkdownTest.test_unordered_lists_close_properly_with_preceding_and_following_lines _

self = <markdown_test.MarkdownTest testMethod=test_unordered_lists_close_properly_with_preceding_and_following_lines>

    def test_unordered_lists_close_properly_with_preceding_and_following_lines(self):
        self.assertEqual(
>           parse("# Start a list\n* Item 1\n* Item 2\nEnd a list"),
            "<h1>Start a list</h1><ul><li>Item 1</li><li>Item 2</li></ul><p>End a list</p>",
        )

exercises/practice/markdown/markdown_test.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/markdown/markdown.py:11: in parse
    line = parse_list_items(line, in_list)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

line = '* Item 1', in_list = False

    def parse_list_items(line, in_list):
        match = re.match(r'\* (.*)', line)
        if match:
            curr = match.group(1)
>           curr = parse_formatting(curr)
E           NameError: name 'parse_formatting' is not defined

exercises/practice/markdown/markdown.py:29: NameError
______________ MarkdownTest.test_with_a_little_bit_of_everything _______________

self = <markdown_test.MarkdownTest testMethod=test_with_a_little_bit_of_everything>

    def test_with_a_little_bit_of_everything(self):
        self.assertEqual(
>           parse("# Header!\n* __Bold Item__\n* _Italic Item_"),
            "<h1>Header!</h1><ul><li><strong>Bold Item</strong></li><li><em>Italic Item</em></li></ul>",
        )

exercises/practice/markdown/markdown_test.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/markdown/markdown.py:11: in parse
    line = parse_list_items(line, in_list)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

line = '* __Bold Item__', in_list = False

    def parse_list_items(line, in_list):
        match = re.match(r'\* (.*)', line)
        if match:
            curr = match.group(1)
>           curr = parse_formatting(curr)
E           NameError: name 'parse_formatting' is not defined

exercises/practice/markdown/markdown.py:29: NameError
_ MarkdownTest.test_with_markdown_symbols_in_the_list_item_text_that_should_not_be_interpreted _

self = <markdown_test.MarkdownTest testMethod=test_with_markdown_symbols_in_the_list_item_text_that_should_not_be_interpreted>

    def test_with_markdown_symbols_in_the_list_item_text_that_should_not_be_interpreted(
        self,
    ):
        self.assertEqual(
>           parse("* Item 1 with a # in the text\n* Item 2 with * in the text"),
            "<ul><li>Item 1 with a # in the text</li><li>Item 2 with * in the text</li></ul>",
        )

exercises/practice/markdown/markdown_test.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/markdown/markdown.py:11: in parse
    line = parse_list_items(line, in_list)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

line = '* Item 1 with a # in the text', in_list = False

    def parse_list_items(line, in_list):
        match = re.match(r'\* (.*)', line)
        if match:
            curr = match.group(1)
>           curr = parse_formatting(curr)
E           NameError: name 'parse_formatting' is not defined

exercises/practice/markdown/markdown.py:29: NameError
=========================== short test summary info ============================
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_mixed_normal_italics_and_bold_text
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_parsing_bold_text
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_parsing_italics
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_unordered_lists
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_unordered_lists_close_properly_with_preceding_and_following_lines
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_a_little_bit_of_everything
FAILED exercises/practice/markdown/markdown_test.py::MarkdownTest::test_with_markdown_symbols_in_the_list_item_text_that_should_not_be_interpreted
========================= 7 failed, 10 passed in 0.07s =========================
