============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 55 items

exercises/practice/clock/clock_test.py ...........FFFFFFFFFFFF..FFFFFF.F [ 60%]
FFFFFFFFFFF..F........                                                   [100%]

=================================== FAILURES ===================================
___________________ ClockTest.test_clocks_with_hour_overflow ___________________

self = <clock_test.ClockTest testMethod=test_clocks_with_hour_overflow>

    def test_clocks_with_hour_overflow(self):
>       self.assertEqual(Clock(10, 37), Clock(34, 37))
E       AssertionError: Clock(10, 37) != Clock(34, 37)

exercises/practice/clock/clock_test.py:145: AssertionError
___________ ClockTest.test_clocks_with_hour_overflow_by_several_days ___________

self = <clock_test.ClockTest testMethod=test_clocks_with_hour_overflow_by_several_days>

    def test_clocks_with_hour_overflow_by_several_days(self):
>       self.assertEqual(Clock(3, 11), Clock(99, 11))
E       AssertionError: Clock(3, 11) != Clock(99, 11)

exercises/practice/clock/clock_test.py:148: AssertionError
__________________ ClockTest.test_clocks_with_minute_overflow __________________

self = <clock_test.ClockTest testMethod=test_clocks_with_minute_overflow>

    def test_clocks_with_minute_overflow(self):
>       self.assertEqual(Clock(0, 1), Clock(0, 1441))
E       AssertionError: Clock(0, 1) != Clock(0, 1441)

exercises/practice/clock/clock_test.py:160: AssertionError
__________ ClockTest.test_clocks_with_minute_overflow_by_several_days __________

self = <clock_test.ClockTest testMethod=test_clocks_with_minute_overflow_by_several_days>

    def test_clocks_with_minute_overflow_by_several_days(self):
>       self.assertEqual(Clock(2, 2), Clock(2, 4322))
E       AssertionError: Clock(2, 2) != Clock(2, 4322)

exercises/practice/clock/clock_test.py:163: AssertionError
___________________ ClockTest.test_clocks_with_negative_hour ___________________

self = <clock_test.ClockTest testMethod=test_clocks_with_negative_hour>

    def test_clocks_with_negative_hour(self):
>       self.assertEqual(Clock(22, 40), Clock(-2, 40))
E       AssertionError: Clock(22, 40) != Clock(-2, 40)

exercises/practice/clock/clock_test.py:151: AssertionError
_____________ ClockTest.test_clocks_with_negative_hour_that_wraps ______________

self = <clock_test.ClockTest testMethod=test_clocks_with_negative_hour_that_wraps>

    def test_clocks_with_negative_hour_that_wraps(self):
>       self.assertEqual(Clock(17, 3), Clock(-31, 3))
E       AssertionError: Clock(17, 3) != Clock(-31, 3)

exercises/practice/clock/clock_test.py:154: AssertionError
______ ClockTest.test_clocks_with_negative_hour_that_wraps_multiple_times ______

self = <clock_test.ClockTest testMethod=test_clocks_with_negative_hour_that_wraps_multiple_times>

    def test_clocks_with_negative_hour_that_wraps_multiple_times(self):
>       self.assertEqual(Clock(13, 49), Clock(-83, 49))
E       AssertionError: Clock(13, 49) != Clock(-83, 49)

exercises/practice/clock/clock_test.py:157: AssertionError
____________ ClockTest.test_clocks_with_negative_hours_and_minutes _____________

self = <clock_test.ClockTest testMethod=test_clocks_with_negative_hours_and_minutes>

    def test_clocks_with_negative_hours_and_minutes(self):
>       self.assertEqual(Clock(7, 32), Clock(-12, -268))
E       AssertionError: Clock(7, 32) != Clock(-12, -268)

exercises/practice/clock/clock_test.py:175: AssertionError
_______ ClockTest.test_clocks_with_negative_hours_and_minutes_that_wrap ________

self = <clock_test.ClockTest testMethod=test_clocks_with_negative_hours_and_minutes_that_wrap>

    def test_clocks_with_negative_hours_and_minutes_that_wrap(self):
>       self.assertEqual(Clock(18, 7), Clock(-54, -11513))
E       AssertionError: Clock(18, 7) != Clock(-54, -11513)

exercises/practice/clock/clock_test.py:178: AssertionError
__________________ ClockTest.test_clocks_with_negative_minute __________________

self = <clock_test.ClockTest testMethod=test_clocks_with_negative_minute>

    def test_clocks_with_negative_minute(self):
>       self.assertEqual(Clock(2, 40), Clock(3, -20))
E       AssertionError: Clock(2, 40) != Clock(3, -20)

exercises/practice/clock/clock_test.py:166: AssertionError
____________ ClockTest.test_clocks_with_negative_minute_that_wraps _____________

self = <clock_test.ClockTest testMethod=test_clocks_with_negative_minute_that_wraps>

    def test_clocks_with_negative_minute_that_wraps(self):
>       self.assertEqual(Clock(4, 10), Clock(5, -1490))
E       AssertionError: Clock(4, 10) != Clock(5, -1490)

exercises/practice/clock/clock_test.py:169: AssertionError
_____ ClockTest.test_clocks_with_negative_minute_that_wraps_multiple_times _____

self = <clock_test.ClockTest testMethod=test_clocks_with_negative_minute_that_wraps_multiple_times>

    def test_clocks_with_negative_minute_that_wraps_multiple_times(self):
>       self.assertEqual(Clock(6, 15), Clock(6, -4305))
E       AssertionError: Clock(6, 15) != Clock(6, -4305)

exercises/practice/clock/clock_test.py:172: AssertionError
__________________ ClockTest.test_full_clock_and_zeroed_clock __________________

self = <clock_test.ClockTest testMethod=test_full_clock_and_zeroed_clock>

    def test_full_clock_and_zeroed_clock(self):
>       self.assertEqual(Clock(24, 0), Clock(0, 0))
E       AssertionError: Clock(24, 0) != Clock(0, 0)

exercises/practice/clock/clock_test.py:181: AssertionError
__________________ ClockTest.test_hour_and_minutes_roll_over ___________________

self = <clock_test.ClockTest testMethod=test_hour_and_minutes_roll_over>

    def test_hour_and_minutes_roll_over(self):
>       self.assertEqual(str(Clock(25, 160)), "03:40")
E       AssertionError: '25:160' != '03:40'
E       - 25:160
E       + 03:40

exercises/practice/clock/clock_test.py:49: AssertionError
____________ ClockTest.test_hour_and_minutes_roll_over_continuously ____________

self = <clock_test.ClockTest testMethod=test_hour_and_minutes_roll_over_continuously>

    def test_hour_and_minutes_roll_over_continuously(self):
>       self.assertEqual(str(Clock(201, 3001)), "11:01")
E       AssertionError: '201:3001' != '11:01'
E       - 201:3001
E       + 11:01

exercises/practice/clock/clock_test.py:52: AssertionError
________ ClockTest.test_hour_and_minutes_roll_over_to_exactly_midnight _________

self = <clock_test.ClockTest testMethod=test_hour_and_minutes_roll_over_to_exactly_midnight>

    def test_hour_and_minutes_roll_over_to_exactly_midnight(self):
>       self.assertEqual(str(Clock(72, 8640)), "00:00")
E       AssertionError: '72:8640' != '00:00'
E       - 72:8640
E       + 00:00

exercises/practice/clock/clock_test.py:55: AssertionError
________________________ ClockTest.test_hour_rolls_over ________________________

self = <clock_test.ClockTest testMethod=test_hour_rolls_over>

    def test_hour_rolls_over(self):
>       self.assertEqual(str(Clock(25, 0)), "01:00")
E       AssertionError: '25:00' != '01:00'
E       - 25:00
E       + 01:00

exercises/practice/clock/clock_test.py:34: AssertionError
_________________ ClockTest.test_hour_rolls_over_continuously __________________

self = <clock_test.ClockTest testMethod=test_hour_rolls_over_continuously>

    def test_hour_rolls_over_continuously(self):
>       self.assertEqual(str(Clock(100, 0)), "04:00")
E       AssertionError: '100:00' != '04:00'
E       - 100:00
E       ? - ^
E       + 04:00
E       ?  ^

exercises/practice/clock/clock_test.py:37: AssertionError
____________________ ClockTest.test_midnight_is_zero_hours _____________________

self = <clock_test.ClockTest testMethod=test_midnight_is_zero_hours>

    def test_midnight_is_zero_hours(self):
>       self.assertEqual(str(Clock(24, 0)), "00:00")
E       AssertionError: '24:00' != '00:00'
E       - 24:00
E       + 00:00

exercises/practice/clock/clock_test.py:31: AssertionError
_______________________ ClockTest.test_minutes_roll_over _______________________

self = <clock_test.ClockTest testMethod=test_minutes_roll_over>

    def test_minutes_roll_over(self):
>       self.assertEqual(str(Clock(0, 160)), "02:40")
E       AssertionError: '00:160' != '02:40'
E       - 00:160
E       + 02:40

exercises/practice/clock/clock_test.py:43: AssertionError
________________ ClockTest.test_minutes_roll_over_continuously _________________

self = <clock_test.ClockTest testMethod=test_minutes_roll_over_continuously>

    def test_minutes_roll_over_continuously(self):
>       self.assertEqual(str(Clock(0, 1723)), "04:43")
E       AssertionError: '00:1723' != '04:43'
E       - 00:1723
E       + 04:43

exercises/practice/clock/clock_test.py:46: AssertionError
_________________________ ClockTest.test_negative_hour _________________________

self = <clock_test.ClockTest testMethod=test_negative_hour>

    def test_negative_hour(self):
>       self.assertEqual(str(Clock(-1, 15)), "23:15")
E       AssertionError: '-1:15' != '23:15'
E       - -1:15
E       + 23:15

exercises/practice/clock/clock_test.py:58: AssertionError
___________ ClockTest.test_negative_hour_and_minutes_both_roll_over ____________

self = <clock_test.ClockTest testMethod=test_negative_hour_and_minutes_both_roll_over>

    def test_negative_hour_and_minutes_both_roll_over(self):
>       self.assertEqual(str(Clock(-25, -160)), "20:20")
E       AssertionError: '-25:-160' != '20:20'
E       - -25:-160
E       + 20:20

exercises/practice/clock/clock_test.py:79: AssertionError
_____ ClockTest.test_negative_hour_and_minutes_both_roll_over_continuously _____

self = <clock_test.ClockTest testMethod=test_negative_hour_and_minutes_both_roll_over_continuously>

    def test_negative_hour_and_minutes_both_roll_over_continuously(self):
>       self.assertEqual(str(Clock(-121, -5810)), "22:10")
E       AssertionError: '-121:-5810' != '22:10'
E       - -121:-5810
E       + 22:10

exercises/practice/clock/clock_test.py:82: AssertionError
___________________ ClockTest.test_negative_hour_rolls_over ____________________

self = <clock_test.ClockTest testMethod=test_negative_hour_rolls_over>

    def test_negative_hour_rolls_over(self):
>       self.assertEqual(str(Clock(-25, 0)), "23:00")
E       AssertionError: '-25:00' != '23:00'
E       - -25:00
E       ? - ^
E       + 23:00
E       ?  ^

exercises/practice/clock/clock_test.py:61: AssertionError
_____________ ClockTest.test_negative_hour_rolls_over_continuously _____________

self = <clock_test.ClockTest testMethod=test_negative_hour_rolls_over_continuously>

    def test_negative_hour_rolls_over_continuously(self):
>       self.assertEqual(str(Clock(-91, 0)), "05:00")
E       AssertionError: '-91:00' != '05:00'
E       - -91:00
E       + 05:00

exercises/practice/clock/clock_test.py:64: AssertionError
_______________________ ClockTest.test_negative_minutes ________________________

self = <clock_test.ClockTest testMethod=test_negative_minutes>

    def test_negative_minutes(self):
>       self.assertEqual(str(Clock(1, -40)), "00:20")
E       AssertionError: '01:-40' != '00:20'
E       - 01:-40
E       + 00:20

exercises/practice/clock/clock_test.py:67: AssertionError
__________________ ClockTest.test_negative_minutes_roll_over ___________________

self = <clock_test.ClockTest testMethod=test_negative_minutes_roll_over>

    def test_negative_minutes_roll_over(self):
>       self.assertEqual(str(Clock(1, -160)), "22:20")
E       AssertionError: '01:-160' != '22:20'
E       - 01:-160
E       + 22:20

exercises/practice/clock/clock_test.py:70: AssertionError
____________ ClockTest.test_negative_minutes_roll_over_continuously ____________

self = <clock_test.ClockTest testMethod=test_negative_minutes_roll_over_continuously>

    def test_negative_minutes_roll_over_continuously(self):
>       self.assertEqual(str(Clock(1, -4820)), "16:40")
E       AssertionError: '01:-4820' != '16:40'
E       - 01:-4820
E       + 16:40

exercises/practice/clock/clock_test.py:73: AssertionError
____________ ClockTest.test_negative_sixty_minutes_is_previous_hour ____________

self = <clock_test.ClockTest testMethod=test_negative_sixty_minutes_is_previous_hour>

    def test_negative_sixty_minutes_is_previous_hour(self):
>       self.assertEqual(str(Clock(2, -60)), "01:00")
E       AssertionError: '02:-60' != '01:00'
E       - 02:-60
E       + 01:00

exercises/practice/clock/clock_test.py:76: AssertionError
__________________ ClockTest.test_sixty_minutes_is_next_hour ___________________

self = <clock_test.ClockTest testMethod=test_sixty_minutes_is_next_hour>

    def test_sixty_minutes_is_next_hour(self):
>       self.assertEqual(str(Clock(1, 60)), "02:00")
E       AssertionError: '01:60' != '02:00'
E       - 01:60
E       + 02:00

exercises/practice/clock/clock_test.py:40: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_hour_overflow
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_hour_overflow_by_several_days
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_minute_overflow
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_minute_overflow_by_several_days
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_negative_hour
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_negative_hour_that_wraps
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_negative_hour_that_wraps_multiple_times
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_negative_hours_and_minutes
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_negative_hours_and_minutes_that_wrap
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_negative_minute
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_negative_minute_that_wraps
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_clocks_with_negative_minute_that_wraps_multiple_times
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_full_clock_and_zeroed_clock
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_hour_and_minutes_roll_over
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_hour_and_minutes_roll_over_continuously
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_hour_and_minutes_roll_over_to_exactly_midnight
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_hour_rolls_over
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_hour_rolls_over_continuously
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_midnight_is_zero_hours
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_minutes_roll_over
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_minutes_roll_over_continuously
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_negative_hour
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_negative_hour_and_minutes_both_roll_over
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_negative_hour_and_minutes_both_roll_over_continuously
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_negative_hour_rolls_over
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_negative_hour_rolls_over_continuously
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_negative_minutes
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_negative_minutes_roll_over
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_negative_minutes_roll_over_continuously
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_negative_sixty_minutes_is_previous_hour
FAILED exercises/practice/clock/clock_test.py::ClockTest::test_sixty_minutes_is_next_hour
======================== 31 failed, 24 passed in 0.20s =========================
