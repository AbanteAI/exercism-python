============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1, asyncio-0.21.1
asyncio: mode=strict
collected 10 items

exercises/practice/alphametics/alphametics_test.py FFFFFFsFFF            [100%]

=================================== FAILURES ===================================
____________ AlphameticsTest.test_leading_zero_solution_is_invalid _____________

self = <alphametics_test.AlphameticsTest testMethod=test_leading_zero_solution_is_invalid>

    def test_leading_zero_solution_is_invalid(self):
>       self.assertEqual(solve("ACA + DD == BD"), None)

exercises/practice/alphametics/alphametics_test.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

puzzle = 'ACA + DD == BD'

    def solve(puzzle):
        words = puzzle.replace(' + ', ' ').replace(' = ', ' ').split()
        unique_chars = set(''.join(words))
        leading_chars = set(word[0] for word in words)
        chars = ''.join(unique_chars)
        digits = ''.join(str(d) for d in range(10))
        for perm in permutations(digits, len(unique_chars)):
            if '0' in perm and any(char in perm for char in leading_chars):
                continue
            table = str.maketrans(chars, ''.join(perm))
            equation = puzzle.translate(table)
>           if eval(equation):
E             File "<string>", line 1
E               424 + 11 33 01
E                           ^
E           SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers

exercises/practice/alphametics/alphametics.py:20: SyntaxError
________________ AlphameticsTest.test_puzzle_with_eight_letters ________________

self = <alphametics_test.AlphameticsTest testMethod=test_puzzle_with_eight_letters>

    def test_puzzle_with_eight_letters(self):
        self.assertEqual(
>           solve("SEND + MORE == MONEY"),
            {"S": 9, "E": 5, "N": 6, "D": 7, "M": 1, "O": 0, "R": 8, "Y": 2},
        )

exercises/practice/alphametics/alphametics_test.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

puzzle = 'SEND + MORE == MONEY'

    def solve(puzzle):
        words = puzzle.replace(' + ', ' ').replace(' = ', ' ').split()
        unique_chars = set(''.join(words))
        leading_chars = set(word[0] for word in words)
        chars = ''.join(unique_chars)
        digits = ''.join(str(d) for d in range(10))
        for perm in permutations(digits, len(unique_chars)):
            if '0' in perm and any(char in perm for char in leading_chars):
                continue
            table = str.maketrans(chars, ''.join(perm))
            equation = puzzle.translate(table)
>           if eval(equation):
E             File "<string>", line 1
E               5704 + 2617 88 26073
E                           ^^
E           SyntaxError: invalid syntax

exercises/practice/alphametics/alphametics.py:20: SyntaxError
________________ AlphameticsTest.test_puzzle_with_four_letters _________________

self = <alphametics_test.AlphameticsTest testMethod=test_puzzle_with_four_letters>

    def test_puzzle_with_four_letters(self):
>       self.assertEqual(solve("AS + A == MOM"), {"A": 9, "S": 2, "M": 1, "O": 0})

exercises/practice/alphametics/alphametics_test.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

puzzle = 'AS + A == MOM'

    def solve(puzzle):
        words = puzzle.replace(' + ', ' ').replace(' = ', ' ').split()
        unique_chars = set(''.join(words))
        leading_chars = set(word[0] for word in words)
        chars = ''.join(unique_chars)
        digits = ''.join(str(d) for d in range(10))
        for perm in permutations(digits, len(unique_chars)):
            if '0' in perm and any(char in perm for char in leading_chars):
                continue
            table = str.maketrans(chars, ''.join(perm))
            equation = puzzle.translate(table)
>           if eval(equation):
E             File "<string>", line 1
E               41 + 4 33 020
E                         ^
E           SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers

exercises/practice/alphametics/alphametics.py:20: SyntaxError
________________ AlphameticsTest.test_puzzle_with_seven_letters ________________

self = <alphametics_test.AlphameticsTest testMethod=test_puzzle_with_seven_letters>

    def test_puzzle_with_seven_letters(self):
        self.assertEqual(
>           solve("HE + SEES + THE == LIGHT"),
            {"E": 4, "G": 2, "H": 5, "I": 0, "L": 1, "S": 9, "T": 7},
        )

exercises/practice/alphametics/alphametics_test.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

puzzle = 'HE + SEES + THE == LIGHT'

    def solve(puzzle):
        words = puzzle.replace(' + ', ' ').replace(' = ', ' ').split()
        unique_chars = set(''.join(words))
        leading_chars = set(word[0] for word in words)
        chars = ''.join(unique_chars)
        digits = ''.join(str(d) for d in range(10))
        for perm in permutations(digits, len(unique_chars)):
            if '0' in perm and any(char in perm for char in leading_chars):
                continue
            table = str.maketrans(chars, ''.join(perm))
            equation = puzzle.translate(table)
>           if eval(equation):
E             File "<string>", line 1
E               15 + 4554 + 215 77 30612
E                               ^^
E           SyntaxError: invalid syntax

exercises/practice/alphametics/alphametics.py:20: SyntaxError
_________________ AlphameticsTest.test_puzzle_with_six_letters _________________

self = <alphametics_test.AlphameticsTest testMethod=test_puzzle_with_six_letters>

    def test_puzzle_with_six_letters(self):
        self.assertEqual(
>           solve("NO + NO + TOO == LATE"),
            {"N": 7, "O": 4, "T": 9, "L": 1, "A": 0, "E": 2},
        )

exercises/practice/alphametics/alphametics_test.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

puzzle = 'NO + NO + TOO == LATE'

    def solve(puzzle):
        words = puzzle.replace(' + ', ' ').replace(' = ', ' ').split()
        unique_chars = set(''.join(words))
        leading_chars = set(word[0] for word in words)
        chars = ''.join(unique_chars)
        digits = ''.join(str(d) for d in range(10))
        for perm in permutations(digits, len(unique_chars)):
            if '0' in perm and any(char in perm for char in leading_chars):
                continue
            table = str.maketrans(chars, ''.join(perm))
            equation = puzzle.translate(table)
>           if eval(equation):
E             File "<string>", line 1
E               03 + 03 + 133 55 2614
E               ^
E           SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers

exercises/practice/alphametics/alphametics.py:20: SyntaxError
_________________ AlphameticsTest.test_puzzle_with_ten_letters _________________

self = <alphametics_test.AlphameticsTest testMethod=test_puzzle_with_ten_letters>

    def test_puzzle_with_ten_letters(self):
>       self.assertEqual(
            solve("AND + A + STRONG + OFFENSE + AS + A + GOOD == DEFENSE"),
            {
                "A": 5,
                "D": 3,
                "E": 4,
                "F": 7,
                "G": 8,
                "N": 0,
                "O": 2,
                "R": 1,
                "S": 6,
                "T": 9,
            },
        )
E       AssertionError: {} != {'A': 5, 'D': 3, 'E': 4, 'F': 7, 'G': 8, 'N': 0, 'O': 2, 'R': 1, 'S': 6, 'T': 9}
E       - {}
E       + {'A': 5, 'D': 3, 'E': 4, 'F': 7, 'G': 8, 'N': 0, 'O': 2, 'R': 1, 'S': 6, 'T': 9}

exercises/practice/alphametics/alphametics_test.py:50: AssertionError
________________ AlphameticsTest.test_puzzle_with_three_letters ________________

self = <alphametics_test.AlphameticsTest testMethod=test_puzzle_with_three_letters>

    def test_puzzle_with_three_letters(self):
>       self.assertEqual(solve("I + BB == ILL"), {"I": 1, "B": 9, "L": 0})

exercises/practice/alphametics/alphametics_test.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

puzzle = 'I + BB == ILL'

    def solve(puzzle):
        words = puzzle.replace(' + ', ' ').replace(' = ', ' ').split()
        unique_chars = set(''.join(words))
        leading_chars = set(word[0] for word in words)
        chars = ''.join(unique_chars)
        digits = ''.join(str(d) for d in range(10))
        for perm in permutations(digits, len(unique_chars)):
            if '0' in perm and any(char in perm for char in leading_chars):
                continue
            table = str.maketrans(chars, ''.join(perm))
            equation = puzzle.translate(table)
>           if eval(equation):
E             File "<string>", line 1
E               1 + 00 33 122
E                      ^^
E           SyntaxError: invalid syntax

exercises/practice/alphametics/alphametics.py:20: SyntaxError
___________ AlphameticsTest.test_puzzle_with_two_digits_final_carry ____________

self = <alphametics_test.AlphameticsTest testMethod=test_puzzle_with_two_digits_final_carry>

    def test_puzzle_with_two_digits_final_carry(self):
        self.assertEqual(
>           solve("A + A + A + A + A + A + A + A + A + A + A + B == BCC"),
            {"A": 9, "B": 1, "C": 0},
        )

exercises/practice/alphametics/alphametics_test.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

puzzle = 'A + A + A + A + A + A + A + A + A + A + A + B == BCC'

    def solve(puzzle):
        words = puzzle.replace(' + ', ' ').replace(' = ', ' ').split()
        unique_chars = set(''.join(words))
        leading_chars = set(word[0] for word in words)
        chars = ''.join(unique_chars)
        digits = ''.join(str(d) for d in range(10))
        for perm in permutations(digits, len(unique_chars)):
            if '0' in perm and any(char in perm for char in leading_chars):
                continue
            table = str.maketrans(chars, ''.join(perm))
            equation = puzzle.translate(table)
>           if eval(equation):
E             File "<string>", line 1
E               3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 1 22 100
E                                                             ^^
E           SyntaxError: invalid syntax

exercises/practice/alphametics/alphametics.py:20: SyntaxError
_____ AlphameticsTest.test_solution_must_have_unique_value_for_each_letter _____

self = <alphametics_test.AlphameticsTest testMethod=test_solution_must_have_unique_value_for_each_letter>

    def test_solution_must_have_unique_value_for_each_letter(self):
>       self.assertEqual(solve("A == B"), None)

exercises/practice/alphametics/alphametics_test.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

puzzle = 'A == B'

    def solve(puzzle):
        words = puzzle.replace(' + ', ' ').replace(' = ', ' ').split()
        unique_chars = set(''.join(words))
        leading_chars = set(word[0] for word in words)
        chars = ''.join(unique_chars)
        digits = ''.join(str(d) for d in range(10))
        for perm in permutations(digits, len(unique_chars)):
            if '0' in perm and any(char in perm for char in leading_chars):
                continue
            table = str.maketrans(chars, ''.join(perm))
            equation = puzzle.translate(table)
>           if eval(equation):
E             File "<string>", line 1
E               2 11 0
E                 ^^
E           SyntaxError: invalid syntax

exercises/practice/alphametics/alphametics.py:20: SyntaxError
=========================== short test summary info ============================
FAILED exercises/practice/alphametics/alphametics_test.py::AlphameticsTest::test_leading_zero_solution_is_invalid
FAILED exercises/practice/alphametics/alphametics_test.py::AlphameticsTest::test_puzzle_with_eight_letters
FAILED exercises/practice/alphametics/alphametics_test.py::AlphameticsTest::test_puzzle_with_four_letters
FAILED exercises/practice/alphametics/alphametics_test.py::AlphameticsTest::test_puzzle_with_seven_letters
FAILED exercises/practice/alphametics/alphametics_test.py::AlphameticsTest::test_puzzle_with_six_letters
FAILED exercises/practice/alphametics/alphametics_test.py::AlphameticsTest::test_puzzle_with_ten_letters
FAILED exercises/practice/alphametics/alphametics_test.py::AlphameticsTest::test_puzzle_with_three_letters
FAILED exercises/practice/alphametics/alphametics_test.py::AlphameticsTest::test_puzzle_with_two_digits_final_carry
FAILED exercises/practice/alphametics/alphametics_test.py::AlphameticsTest::test_solution_must_have_unique_value_for_each_letter
========================= 9 failed, 1 skipped in 3.51s =========================
