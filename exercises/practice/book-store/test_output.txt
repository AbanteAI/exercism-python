============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 20 items

exercises/practice/book-store/book_store_test.py FFFFFFFFFFFFFFFFFFFF    [100%]

=================================== FAILURES ===================================
_ BookStoreTest.test_check_that_groups_of_four_are_created_properly_even_when_there_are_more_groups_of_three_than_groups_of_five _

self = <book_store_test.BookStoreTest testMethod=test_check_that_groups_of_four_are_created_properly_even_when_there_are_more_groups_of_three_than_groups_of_five>

    def test_check_that_groups_of_four_are_created_properly_even_when_there_are_more_groups_of_three_than_groups_of_five(
        self,
    ):
        basket = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5]
>       self.assertEqual(total(basket), 14560)

exercises/practice/book-store/book_store_test.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 1, 1, 1, 1, 1, ...]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
_______________________ BookStoreTest.test_empty_basket ________________________

self = <book_store_test.BookStoreTest testMethod=test_empty_basket>

    def test_empty_basket(self):
        basket = []
>       self.assertEqual(total(basket), 0)

exercises/practice/book-store/book_store_test.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = []

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
___________________ BookStoreTest.test_five_different_books ____________________

self = <book_store_test.BookStoreTest testMethod=test_five_different_books>

    def test_five_different_books(self):
        basket = [1, 2, 3, 4, 5]
>       self.assertEqual(total(basket), 3000)

exercises/practice/book-store/book_store_test.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 2, 3, 4, 5]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
___________________ BookStoreTest.test_four_different_books ____________________

self = <book_store_test.BookStoreTest testMethod=test_four_different_books>

    def test_four_different_books(self):
        basket = [1, 2, 3, 4]
>       self.assertEqual(total(basket), 2560)

exercises/practice/book-store/book_store_test.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 2, 3, 4]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
_ BookStoreTest.test_four_groups_of_four_are_cheaper_than_two_groups_each_of_five_and_three _

self = <book_store_test.BookStoreTest testMethod=test_four_groups_of_four_are_cheaper_than_two_groups_each_of_five_and_three>

    def test_four_groups_of_four_are_cheaper_than_two_groups_each_of_five_and_three(
        self,
    ):
        basket = [1, 1, 2, 2, 3, 3, 4, 5, 1, 1, 2, 2, 3, 3, 4, 5]
>       self.assertEqual(total(basket), 10240)

exercises/practice/book-store/book_store_test.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 1, 2, 2, 3, 3, ...]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
_ BookStoreTest.test_group_of_four_plus_group_of_two_is_cheaper_than_two_groups_of_three _

self = <book_store_test.BookStoreTest testMethod=test_group_of_four_plus_group_of_two_is_cheaper_than_two_groups_of_three>

    def test_group_of_four_plus_group_of_two_is_cheaper_than_two_groups_of_three(self):
        basket = [1, 1, 2, 2, 3, 4]
>       self.assertEqual(total(basket), 4080)

exercises/practice/book-store/book_store_test.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 1, 2, 2, 3, 4]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
_ BookStoreTest.test_one_group_of_one_and_four_is_cheaper_than_one_group_of_two_and_three _

self = <book_store_test.BookStoreTest testMethod=test_one_group_of_one_and_four_is_cheaper_than_one_group_of_two_and_three>

    def test_one_group_of_one_and_four_is_cheaper_than_one_group_of_two_and_three(self):
        basket = [1, 1, 2, 3, 4]
>       self.assertEqual(total(basket), 3360)

exercises/practice/book-store/book_store_test.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 1, 2, 3, 4]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
_ BookStoreTest.test_one_group_of_one_and_two_plus_three_groups_of_four_is_cheaper_than_one_group_of_each_size _

self = <book_store_test.BookStoreTest testMethod=test_one_group_of_one_and_two_plus_three_groups_of_four_is_cheaper_than_one_group_of_each_size>

    def test_one_group_of_one_and_two_plus_three_groups_of_four_is_cheaper_than_one_group_of_each_size(
        self,
    ):
        basket = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]
>       self.assertEqual(total(basket), 10000)

exercises/practice/book-store/book_store_test.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 2, 2, 3, 3, 3, ...]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
____________________ BookStoreTest.test_only_a_single_book _____________________

self = <book_store_test.BookStoreTest testMethod=test_only_a_single_book>

    def test_only_a_single_book(self):
        basket = [1]
>       self.assertEqual(total(basket), 800)

exercises/practice/book-store/book_store_test.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
____________________ BookStoreTest.test_shuffled_book_order ____________________

self = <book_store_test.BookStoreTest testMethod=test_shuffled_book_order>

    def test_shuffled_book_order(self):
        basket = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]
>       self.assertEqual(total(basket), 8120)

exercises/practice/book-store/book_store_test.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 2, 3, 4, 5, 1, ...]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
___ BookStoreTest.test_three_copies_of_first_book_and_two_each_of_remaining ____

self = <book_store_test.BookStoreTest testMethod=test_three_copies_of_first_book_and_two_each_of_remaining>

    def test_three_copies_of_first_book_and_two_each_of_remaining(self):
        basket = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 1]
>       self.assertEqual(total(basket), 6800)

exercises/practice/book-store/book_store_test.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 1, 2, 2, 3, 3, ...]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
___________________ BookStoreTest.test_three_different_books ___________________

self = <book_store_test.BookStoreTest testMethod=test_three_different_books>

    def test_three_different_books(self):
        basket = [1, 2, 3]
>       self.assertEqual(total(basket), 2160)

exercises/practice/book-store/book_store_test.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 2, 3]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
_ BookStoreTest.test_three_each_of_first_two_books_and_two_each_of_remaining_books _

self = <book_store_test.BookStoreTest testMethod=test_three_each_of_first_two_books_and_two_each_of_remaining_books>

    def test_three_each_of_first_two_books_and_two_each_of_remaining_books(self):
        basket = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 1, 2]
>       self.assertEqual(total(basket), 7520)

exercises/practice/book-store/book_store_test.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 1, 2, 2, 3, 3, ...]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
__________________ BookStoreTest.test_two_copies_of_each_book __________________

self = <book_store_test.BookStoreTest testMethod=test_two_copies_of_each_book>

    def test_two_copies_of_each_book(self):
        basket = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]
>       self.assertEqual(total(basket), 6000)

exercises/practice/book-store/book_store_test.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 1, 2, 2, 3, 3, ...]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
____________________ BookStoreTest.test_two_different_books ____________________

self = <book_store_test.BookStoreTest testMethod=test_two_different_books>

    def test_two_different_books(self):
        basket = [1, 2]
>       self.assertEqual(total(basket), 1520)

exercises/practice/book-store/book_store_test.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 2]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
__ BookStoreTest.test_two_each_of_first_four_books_and_one_copy_each_of_rest ___

self = <book_store_test.BookStoreTest testMethod=test_two_each_of_first_four_books_and_one_copy_each_of_rest>

    def test_two_each_of_first_four_books_and_one_copy_each_of_rest(self):
        basket = [1, 1, 2, 2, 3, 3, 4, 4, 5]
>       self.assertEqual(total(basket), 5560)

exercises/practice/book-store/book_store_test.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 1, 2, 2, 3, 3, ...]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
__________ BookStoreTest.test_two_groups_of_four_and_a_group_of_five ___________

self = <book_store_test.BookStoreTest testMethod=test_two_groups_of_four_and_a_group_of_five>

    def test_two_groups_of_four_and_a_group_of_five(self):
        basket = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5]
>       self.assertEqual(total(basket), 8120)

exercises/practice/book-store/book_store_test.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 1, 1, 2, 2, 2, ...]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
_ BookStoreTest.test_two_groups_of_four_is_cheaper_than_group_of_five_plus_group_of_three _

self = <book_store_test.BookStoreTest testMethod=test_two_groups_of_four_is_cheaper_than_group_of_five_plus_group_of_three>

    def test_two_groups_of_four_is_cheaper_than_group_of_five_plus_group_of_three(self):
        basket = [1, 1, 2, 2, 3, 3, 4, 5]
>       self.assertEqual(total(basket), 5120)

exercises/practice/book-store/book_store_test.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 1, 2, 2, 3, 3, ...]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
_ BookStoreTest.test_two_groups_of_four_is_cheaper_than_groups_of_five_and_three _

self = <book_store_test.BookStoreTest testMethod=test_two_groups_of_four_is_cheaper_than_groups_of_five_and_three>

    def test_two_groups_of_four_is_cheaper_than_groups_of_five_and_three(self):
        basket = [1, 1, 2, 3, 4, 4, 5, 5]
>       self.assertEqual(total(basket), 5120)

exercises/practice/book-store/book_store_test.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [1, 1, 2, 3, 4, 4, ...]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
___________________ BookStoreTest.test_two_of_the_same_book ____________________

self = <book_store_test.BookStoreTest testMethod=test_two_of_the_same_book>

    def test_two_of_the_same_book(self):
        basket = [2, 2]
>       self.assertEqual(total(basket), 1600)

exercises/practice/book-store/book_store_test.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

basket = [2, 2]

    def total(basket):
        # Define book price and discount tiers
        book_price = 800  # price in cents
        discounts = {1: 1, 2: 0.95, 3: 0.9, 4: 0.8, 5: 0.75}
    
        # Function to calculate price for a set of unique books
        def calculate_set_price(num_unique_books):
            return num_unique_books * book_price * discounts[num_unique_books]
    
        # Function to find the best discount for the basket
        def best_discount(basket):
            sets = []
            for book in basket:
                placed = False
                for set_ in sets:
                    if book not in set_:
                        set_.add(book)
                        placed = True
                        break
                if not placed:
                    sets.append({book})
            return sum(calculate_set_price(len(set_)) for set_ in sets)
    
        # Calculate the best price
        best_price = best_discount(basket)
    
        # Optimize by switching from 5+3 to 4+4 if cheaper
        while True:
>           unique_sets = [set_ for set_ in sets if len(set_) == 5]
E           NameError: name 'sets' is not defined

exercises/practice/book-store/book_store.py:29: NameError
=========================== short test summary info ============================
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_check_that_groups_of_four_are_created_properly_even_when_there_are_more_groups_of_three_than_groups_of_five
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_empty_basket
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_five_different_books
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_four_different_books
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_four_groups_of_four_are_cheaper_than_two_groups_each_of_five_and_three
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_group_of_four_plus_group_of_two_is_cheaper_than_two_groups_of_three
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_one_group_of_one_and_four_is_cheaper_than_one_group_of_two_and_three
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_one_group_of_one_and_two_plus_three_groups_of_four_is_cheaper_than_one_group_of_each_size
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_only_a_single_book
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_shuffled_book_order
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_three_copies_of_first_book_and_two_each_of_remaining
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_three_different_books
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_three_each_of_first_two_books_and_two_each_of_remaining_books
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_two_copies_of_each_book
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_two_different_books
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_two_each_of_first_four_books_and_one_copy_each_of_rest
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_two_groups_of_four_and_a_group_of_five
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_two_groups_of_four_is_cheaper_than_group_of_five_plus_group_of_three
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_two_groups_of_four_is_cheaper_than_groups_of_five_and_three
FAILED exercises/practice/book-store/book_store_test.py::BookStoreTest::test_two_of_the_same_book
============================== 20 failed in 0.13s ==============================
