============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 43 items

exercises/practice/complex-numbers/complex_numbers_test.py FFFFFFFFFFFFF [ 30%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF                                           [100%]

=================================== FAILURES ===================================
___ ComplexNumbersTest.test_absolute_value_of_a_negative_purely_real_number ____

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_absolute_value_of_a_negative_purely_real_number>

    def test_absolute_value_of_a_negative_purely_real_number(self):
>       self.assertEqual(abs(ComplexNumber(-5, 0)), 5)
E       AssertionError: None != 5

exercises/practice/complex-numbers/complex_numbers_test.py:110: AssertionError
_ ComplexNumbersTest.test_absolute_value_of_a_number_with_real_and_imaginary_part _

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_absolute_value_of_a_number_with_real_and_imaginary_part>

    def test_absolute_value_of_a_number_with_real_and_imaginary_part(self):
>       self.assertEqual(abs(ComplexNumber(3, 4)), 5)
E       AssertionError: None != 5

exercises/practice/complex-numbers/complex_numbers_test.py:123: AssertionError
___ ComplexNumbersTest.test_absolute_value_of_a_positive_purely_real_number ____

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_absolute_value_of_a_positive_purely_real_number>

    def test_absolute_value_of_a_positive_purely_real_number(self):
>       self.assertEqual(abs(ComplexNumber(5, 0)), 5)
E       AssertionError: None != 5

exercises/practice/complex-numbers/complex_numbers_test.py:107: AssertionError
_ ComplexNumbersTest.test_absolute_value_of_a_purely_imaginary_number_with_negative_imaginary_part _

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_absolute_value_of_a_purely_imaginary_number_with_negative_imaginary_part>

    def test_absolute_value_of_a_purely_imaginary_number_with_negative_imaginary_part(
        self,
    ):
>       self.assertEqual(abs(ComplexNumber(0, -5)), 5)
E       AssertionError: None != 5

exercises/practice/complex-numbers/complex_numbers_test.py:120: AssertionError
_ ComplexNumbersTest.test_absolute_value_of_a_purely_imaginary_number_with_positive_imaginary_part _

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_absolute_value_of_a_purely_imaginary_number_with_positive_imaginary_part>

    def test_absolute_value_of_a_purely_imaginary_number_with_positive_imaginary_part(
        self,
    ):
>       self.assertEqual(abs(ComplexNumber(0, 5)), 5)
E       AssertionError: None != 5

exercises/practice/complex-numbers/complex_numbers_test.py:115: AssertionError
__________ ComplexNumbersTest.test_add_complex_number_to_real_number ___________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_add_complex_number_to_real_number>

    def test_add_complex_number_to_real_number(self):
>       self.assertEqual(5 + ComplexNumber(1, 2), ComplexNumber(6, 2))
E       TypeError: unsupported operand type(s) for +: 'int' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:163: TypeError
_______ ComplexNumbersTest.test_add_numbers_with_real_and_imaginary_part _______

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_add_numbers_with_real_and_imaginary_part>

    def test_add_numbers_with_real_and_imaginary_part(self):
>       self.assertEqual(ComplexNumber(1, 2) + ComplexNumber(3, 4), ComplexNumber(4, 6))

exercises/practice/complex-numbers/complex_numbers_test.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3dd6f0>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3dd5d0>

    def __add__(self, other):
>       real = self.real + other.real
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:9: AttributeError
_____________ ComplexNumbersTest.test_add_purely_imaginary_numbers _____________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_add_purely_imaginary_numbers>

    def test_add_purely_imaginary_numbers(self):
>       self.assertEqual(ComplexNumber(0, 1) + ComplexNumber(0, 2), ComplexNumber(0, 3))

exercises/practice/complex-numbers/complex_numbers_test.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3dcc10>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3de050>

    def __add__(self, other):
>       real = self.real + other.real
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:9: AttributeError
_______________ ComplexNumbersTest.test_add_purely_real_numbers ________________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_add_purely_real_numbers>

    def test_add_purely_real_numbers(self):
>       self.assertEqual(ComplexNumber(1, 0) + ComplexNumber(2, 0), ComplexNumber(3, 0))

exercises/practice/complex-numbers/complex_numbers_test.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3d0940>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3d0880>

    def __add__(self, other):
>       real = self.real + other.real
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:9: AttributeError
__________ ComplexNumbersTest.test_add_real_number_to_complex_number ___________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_add_real_number_to_complex_number>

    def test_add_real_number_to_complex_number(self):
>       self.assertEqual(ComplexNumber(1, 2) + 5, ComplexNumber(6, 2))

exercises/practice/complex-numbers/complex_numbers_test.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3d0610>, other = 5

    def __add__(self, other):
>       real = self.real + other.real
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:9: AttributeError
___ ComplexNumbersTest.test_conjugate_a_number_with_real_and_imaginary_part ____

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_conjugate_a_number_with_real_and_imaginary_part>

    def test_conjugate_a_number_with_real_and_imaginary_part(self):
>       self.assertEqual(ComplexNumber(1, 1).conjugate(), ComplexNumber(1, -1))

exercises/practice/complex-numbers/complex_numbers_test.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3eb6d0>, other = None

    def __eq__(self, other):
>       return self.real == other.real and self.imaginary == other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:6: AttributeError
_________ ComplexNumbersTest.test_conjugate_a_purely_imaginary_number __________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_conjugate_a_purely_imaginary_number>

    def test_conjugate_a_purely_imaginary_number(self):
>       self.assertEqual(ComplexNumber(0, 5).conjugate(), ComplexNumber(0, -5))

exercises/practice/complex-numbers/complex_numbers_test.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3d49d0>, other = None

    def __eq__(self, other):
>       return self.real == other.real and self.imaginary == other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:6: AttributeError
____________ ComplexNumbersTest.test_conjugate_a_purely_real_number ____________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_conjugate_a_purely_real_number>

    def test_conjugate_a_purely_real_number(self):
>       self.assertEqual(ComplexNumber(5, 0).conjugate(), ComplexNumber(5, 0))

exercises/practice/complex-numbers/complex_numbers_test.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3ded40>, other = None

    def __eq__(self, other):
>       return self.real == other.real and self.imaginary == other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:6: AttributeError
_________ ComplexNumbersTest.test_divide_complex_number_by_real_number _________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_divide_complex_number_by_real_number>

    def test_divide_complex_number_by_real_number(self):
>       self.assertAlmostEqual(ComplexNumber(10, 100) / 10, ComplexNumber(1, 10))

exercises/practice/complex-numbers/complex_numbers_test.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3e93c0>, other = 10

    def __truediv__(self, other):
>       denominator = other.real ** 2 + other.imaginary ** 2
E       AttributeError: 'int' object has no attribute 'imaginary'

exercises/practice/complex-numbers/complex_numbers.py:24: AttributeError
_____ ComplexNumbersTest.test_divide_numbers_with_real_and_imaginary_part ______

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_divide_numbers_with_real_and_imaginary_part>

    def test_divide_numbers_with_real_and_imaginary_part(self):
        self.assertAlmostEqual(
>           ComplexNumber(1, 2) / ComplexNumber(3, 4), ComplexNumber(0.44, 0.08)
        )

exercises/practice/complex-numbers/complex_numbers_test.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c571a20>
other = <complex_numbers.ComplexNumber object at 0x7fd84c573d90>

    def __truediv__(self, other):
>       denominator = other.real ** 2 + other.imaginary ** 2
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:24: AttributeError
___________ ComplexNumbersTest.test_divide_purely_imaginary_numbers ____________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_divide_purely_imaginary_numbers>

    def test_divide_purely_imaginary_numbers(self):
        self.assertAlmostEqual(
>           ComplexNumber(0, 1) / ComplexNumber(0, 2), ComplexNumber(0.5, 0)
        )

exercises/practice/complex-numbers/complex_numbers_test.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3ea4d0>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3ebc70>

    def __truediv__(self, other):
>       denominator = other.real ** 2 + other.imaginary ** 2
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:24: AttributeError
______________ ComplexNumbersTest.test_divide_purely_real_numbers ______________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_divide_purely_real_numbers>

    def test_divide_purely_real_numbers(self):
        self.assertAlmostEqual(
>           ComplexNumber(1, 0) / ComplexNumber(2, 0), ComplexNumber(0.5, 0)
        )

exercises/practice/complex-numbers/complex_numbers_test.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3dd7e0>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3de740>

    def __truediv__(self, other):
>       denominator = other.real ** 2 + other.imaginary ** 2
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:24: AttributeError
_________ ComplexNumbersTest.test_divide_real_number_by_complex_number _________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_divide_real_number_by_complex_number>

    def test_divide_real_number_by_complex_number(self):
>       self.assertAlmostEqual(5 / ComplexNumber(1, 1), ComplexNumber(2.5, -2.5))
E       TypeError: unsupported operand type(s) for /: 'int' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:181: TypeError
_____________ ComplexNumbersTest.test_equality_of_complex_numbers ______________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_equality_of_complex_numbers>

    def test_equality_of_complex_numbers(self):
>       self.assertEqual(ComplexNumber(1, 2), ComplexNumber(1, 2))

exercises/practice/complex-numbers/complex_numbers_test.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c43bb80>
other = <complex_numbers.ComplexNumber object at 0x7fd84c43bdf0>

    def __eq__(self, other):
>       return self.real == other.real and self.imaginary == other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:6: AttributeError
_______________ ComplexNumbersTest.test_euler_s_identity_formula _______________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_euler_s_identity_formula>

    def test_euler_s_identity_formula(self):
>       self.assertAlmostEqual(ComplexNumber(0, math.pi).exp(), ComplexNumber(-1, 0))

exercises/practice/complex-numbers/complex_numbers_test.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3e7340>, other = None

    def __eq__(self, other):
>       return self.real == other.real and self.imaginary == other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:6: AttributeError
___________________ ComplexNumbersTest.test_exponential_of_0 ___________________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_exponential_of_0>

    def test_exponential_of_0(self):
>       self.assertAlmostEqual(ComplexNumber(0, 0).exp(), ComplexNumber(1, 0))

exercises/practice/complex-numbers/complex_numbers_test.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3d1090>, other = None

    def __eq__(self, other):
>       return self.real == other.real and self.imaginary == other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:6: AttributeError
_ ComplexNumbersTest.test_exponential_of_a_number_with_real_and_imaginary_part _

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_exponential_of_a_number_with_real_and_imaginary_part>

    def test_exponential_of_a_number_with_real_and_imaginary_part(self):
>       self.assertAlmostEqual(
            ComplexNumber(math.log(2), math.pi).exp(), ComplexNumber(-2, 0)
        )

exercises/practice/complex-numbers/complex_numbers_test.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3e7a00>, other = None

    def __eq__(self, other):
>       return self.real == other.real and self.imaginary == other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:6: AttributeError
_________ ComplexNumbersTest.test_exponential_of_a_purely_real_number __________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_exponential_of_a_purely_real_number>

    def test_exponential_of_a_purely_real_number(self):
>       self.assertAlmostEqual(ComplexNumber(1, 0).exp(), ComplexNumber(math.e, 0))

exercises/practice/complex-numbers/complex_numbers_test.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3dfb50>, other = None

    def __eq__(self, other):
>       return self.real == other.real and self.imaginary == other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:6: AttributeError
_ ComplexNumbersTest.test_exponential_resulting_in_a_number_with_real_and_imaginary_part _

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_exponential_resulting_in_a_number_with_real_and_imaginary_part>

    def test_exponential_resulting_in_a_number_with_real_and_imaginary_part(self):
>       self.assertAlmostEqual(
            ComplexNumber(math.log(2) / 2, math.pi / 4).exp(), ComplexNumber(1, 1)
        )

exercises/practice/complex-numbers/complex_numbers_test.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c449720>, other = None

    def __eq__(self, other):
>       return self.real == other.real and self.imaginary == other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:6: AttributeError
_ ComplexNumbersTest.test_imaginary_part_of_a_number_with_real_and_imaginary_part _

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_imaginary_part_of_a_number_with_real_and_imaginary_part>

    def test_imaginary_part_of_a_number_with_real_and_imaginary_part(self):
>       self.assertEqual(ComplexNumber(1, 2).imaginary, 2)
E       AttributeError: 'ComplexNumber' object has no attribute 'imaginary'

exercises/practice/complex-numbers/complex_numbers_test.py:35: AttributeError
_____ ComplexNumbersTest.test_imaginary_part_of_a_purely_imaginary_number ______

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_imaginary_part_of_a_purely_imaginary_number>

    def test_imaginary_part_of_a_purely_imaginary_number(self):
>       self.assertEqual(ComplexNumber(0, 1).imaginary, 1)
E       AttributeError: 'ComplexNumber' object has no attribute 'imaginary'

exercises/practice/complex-numbers/complex_numbers_test.py:32: AttributeError
________ ComplexNumbersTest.test_imaginary_part_of_a_purely_real_number ________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_imaginary_part_of_a_purely_real_number>

    def test_imaginary_part_of_a_purely_real_number(self):
>       self.assertEqual(ComplexNumber(1, 0).imaginary, 0)
E       AttributeError: 'ComplexNumber' object has no attribute 'imaginary'

exercises/practice/complex-numbers/complex_numbers_test.py:29: AttributeError
____________________ ComplexNumbersTest.test_imaginary_unit ____________________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_imaginary_unit>

    def test_imaginary_unit(self):
        self.assertEqual(
>           ComplexNumber(0, 1) * ComplexNumber(0, 1), ComplexNumber(-1, 0)
        )

exercises/practice/complex-numbers/complex_numbers_test.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3e86a0>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3e81c0>

    def __mul__(self, other):
>       real = self.real * other.real - self.imaginary * other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:19: AttributeError
_____________ ComplexNumbersTest.test_inequality_of_imaginary_part _____________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_inequality_of_imaginary_part>

    def test_inequality_of_imaginary_part(self):
>       self.assertNotEqual(ComplexNumber(1, 2), ComplexNumber(1, 1))

exercises/practice/complex-numbers/complex_numbers_test.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3dee00>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3dc370>

    def __eq__(self, other):
>       return self.real == other.real and self.imaginary == other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:6: AttributeError
_______________ ComplexNumbersTest.test_inequality_of_real_part ________________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_inequality_of_real_part>

    def test_inequality_of_real_part(self):
>       self.assertNotEqual(ComplexNumber(1, 2), ComplexNumber(2, 2))

exercises/practice/complex-numbers/complex_numbers_test.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c449ea0>
other = <complex_numbers.ComplexNumber object at 0x7fd84c448610>

    def __eq__(self, other):
>       return self.real == other.real and self.imaginary == other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:6: AttributeError
________ ComplexNumbersTest.test_multiply_complex_number_by_real_number ________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_multiply_complex_number_by_real_number>

    def test_multiply_complex_number_by_real_number(self):
>       self.assertEqual(ComplexNumber(2, 5) * 5, ComplexNumber(10, 25))

exercises/practice/complex-numbers/complex_numbers_test.py:172: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c439840>, other = 5

    def __mul__(self, other):
>       real = self.real * other.real - self.imaginary * other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:19: AttributeError
____ ComplexNumbersTest.test_multiply_numbers_with_real_and_imaginary_part _____

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_multiply_numbers_with_real_and_imaginary_part>

    def test_multiply_numbers_with_real_and_imaginary_part(self):
        self.assertEqual(
>           ComplexNumber(1, 2) * ComplexNumber(3, 4), ComplexNumber(-5, 10)
        )

exercises/practice/complex-numbers/complex_numbers_test.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3d1fc0>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3d1e70>

    def __mul__(self, other):
>       real = self.real * other.real - self.imaginary * other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:19: AttributeError
__________ ComplexNumbersTest.test_multiply_purely_imaginary_numbers ___________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_multiply_purely_imaginary_numbers>

    def test_multiply_purely_imaginary_numbers(self):
        self.assertEqual(
>           ComplexNumber(0, 1) * ComplexNumber(0, 2), ComplexNumber(-2, 0)
        )

exercises/practice/complex-numbers/complex_numbers_test.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3e83d0>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3e8ac0>

    def __mul__(self, other):
>       real = self.real * other.real - self.imaginary * other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:19: AttributeError
_____________ ComplexNumbersTest.test_multiply_purely_real_numbers _____________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_multiply_purely_real_numbers>

    def test_multiply_purely_real_numbers(self):
>       self.assertEqual(ComplexNumber(1, 0) * ComplexNumber(2, 0), ComplexNumber(2, 0))

exercises/practice/complex-numbers/complex_numbers_test.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3e5990>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3e5630>

    def __mul__(self, other):
>       real = self.real * other.real - self.imaginary * other.imaginary
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:19: AttributeError
________ ComplexNumbersTest.test_multiply_real_number_by_complex_number ________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_multiply_real_number_by_complex_number>

    def test_multiply_real_number_by_complex_number(self):
>       self.assertEqual(5 * ComplexNumber(2, 5), ComplexNumber(10, 25))
E       TypeError: unsupported operand type(s) for *: 'int' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:175: TypeError
__ ComplexNumbersTest.test_real_part_of_a_number_with_real_and_imaginary_part __

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_real_part_of_a_number_with_real_and_imaginary_part>

    def test_real_part_of_a_number_with_real_and_imaginary_part(self):
>       self.assertEqual(ComplexNumber(1, 2).real, 1)
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers_test.py:24: AttributeError
________ ComplexNumbersTest.test_real_part_of_a_purely_imaginary_number ________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_real_part_of_a_purely_imaginary_number>

    def test_real_part_of_a_purely_imaginary_number(self):
>       self.assertEqual(ComplexNumber(0, 1).real, 0)
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers_test.py:21: AttributeError
__________ ComplexNumbersTest.test_real_part_of_a_purely_real_number ___________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_real_part_of_a_purely_real_number>

    def test_real_part_of_a_purely_real_number(self):
>       self.assertEqual(ComplexNumber(1, 0).real, 1)
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers_test.py:18: AttributeError
_______ ComplexNumbersTest.test_subtract_complex_number_from_real_number _______

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_subtract_complex_number_from_real_number>

    def test_subtract_complex_number_from_real_number(self):
>       self.assertEqual(4 - ComplexNumber(5, 7), ComplexNumber(-1, -7))
E       TypeError: unsupported operand type(s) for -: 'int' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:169: TypeError
____ ComplexNumbersTest.test_subtract_numbers_with_real_and_imaginary_part _____

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_subtract_numbers_with_real_and_imaginary_part>

    def test_subtract_numbers_with_real_and_imaginary_part(self):
        self.assertEqual(
>           ComplexNumber(1, 2) - ComplexNumber(3, 4), ComplexNumber(-2, -2)
        )

exercises/practice/complex-numbers/complex_numbers_test.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3fd2a0>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3fffa0>

    def __sub__(self, other):
>       real = self.real - other.real
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:14: AttributeError
__________ ComplexNumbersTest.test_subtract_purely_imaginary_numbers ___________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_subtract_purely_imaginary_numbers>

    def test_subtract_purely_imaginary_numbers(self):
        self.assertEqual(
>           ComplexNumber(0, 1) - ComplexNumber(0, 2), ComplexNumber(0, -1)
        )

exercises/practice/complex-numbers/complex_numbers_test.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3d6e30>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3d7c70>

    def __sub__(self, other):
>       real = self.real - other.real
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:14: AttributeError
_____________ ComplexNumbersTest.test_subtract_purely_real_numbers _____________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_subtract_purely_real_numbers>

    def test_subtract_purely_real_numbers(self):
        self.assertEqual(
>           ComplexNumber(1, 0) - ComplexNumber(2, 0), ComplexNumber(-1, 0)
        )

exercises/practice/complex-numbers/complex_numbers_test.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3e4610>
other = <complex_numbers.ComplexNumber object at 0x7fd84c3e7e20>

    def __sub__(self, other):
>       real = self.real - other.real
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:14: AttributeError
_______ ComplexNumbersTest.test_subtract_real_number_from_complex_number _______

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_subtract_real_number_from_complex_number>

    def test_subtract_real_number_from_complex_number(self):
>       self.assertEqual(ComplexNumber(5, 7) - 4, ComplexNumber(1, 7))

exercises/practice/complex-numbers/complex_numbers_test.py:166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7fd84c3ea950>, other = 4

    def __sub__(self, other):
>       real = self.real - other.real
E       AttributeError: 'ComplexNumber' object has no attribute 'real'

exercises/practice/complex-numbers/complex_numbers.py:14: AttributeError
=========================== short test summary info ============================
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_absolute_value_of_a_negative_purely_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_absolute_value_of_a_number_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_absolute_value_of_a_positive_purely_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_absolute_value_of_a_purely_imaginary_number_with_negative_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_absolute_value_of_a_purely_imaginary_number_with_positive_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_add_complex_number_to_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_add_numbers_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_add_purely_imaginary_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_add_purely_real_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_add_real_number_to_complex_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_conjugate_a_number_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_conjugate_a_purely_imaginary_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_conjugate_a_purely_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_divide_complex_number_by_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_divide_numbers_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_divide_purely_imaginary_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_divide_purely_real_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_divide_real_number_by_complex_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_equality_of_complex_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_euler_s_identity_formula
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_exponential_of_0
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_exponential_of_a_number_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_exponential_of_a_purely_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_exponential_resulting_in_a_number_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_imaginary_part_of_a_number_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_imaginary_part_of_a_purely_imaginary_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_imaginary_part_of_a_purely_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_imaginary_unit
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_inequality_of_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_inequality_of_real_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_multiply_complex_number_by_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_multiply_numbers_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_multiply_purely_imaginary_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_multiply_purely_real_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_multiply_real_number_by_complex_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_real_part_of_a_number_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_real_part_of_a_purely_imaginary_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_real_part_of_a_purely_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_subtract_complex_number_from_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_subtract_numbers_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_subtract_purely_imaginary_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_subtract_purely_real_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_subtract_real_number_from_complex_number
============================== 43 failed in 0.33s ==============================
