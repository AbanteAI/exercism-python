============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 43 items

exercises/practice/complex-numbers/complex_numbers_test.py .....FFFFF... [ 30%]
FFFFF.F.F.F...F..FFFFF....FFFF                                           [100%]

=================================== FAILURES ===================================
__________ ComplexNumbersTest.test_add_complex_number_to_real_number ___________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_add_complex_number_to_real_number>

    def test_add_complex_number_to_real_number(self):
>       self.assertEqual(5 + ComplexNumber(1, 2), ComplexNumber(6, 2))

exercises/practice/complex-numbers/complex_numbers_test.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7ffb3caf3580>, other = 5

    def __radd__(self, other):
>       return self.__add__(other)
E       AttributeError: 'ComplexNumber' object has no attribute '__add__'. Did you mean: '__radd__'?

exercises/practice/complex-numbers/complex_numbers.py:13: AttributeError
_______ ComplexNumbersTest.test_add_numbers_with_real_and_imaginary_part _______

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_add_numbers_with_real_and_imaginary_part>

    def test_add_numbers_with_real_and_imaginary_part(self):
>       self.assertEqual(ComplexNumber(1, 2) + ComplexNumber(3, 4), ComplexNumber(4, 6))
E       TypeError: unsupported operand type(s) for +: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:53: TypeError
_____________ ComplexNumbersTest.test_add_purely_imaginary_numbers _____________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_add_purely_imaginary_numbers>

    def test_add_purely_imaginary_numbers(self):
>       self.assertEqual(ComplexNumber(0, 1) + ComplexNumber(0, 2), ComplexNumber(0, 3))
E       TypeError: unsupported operand type(s) for +: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:50: TypeError
_______________ ComplexNumbersTest.test_add_purely_real_numbers ________________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_add_purely_real_numbers>

    def test_add_purely_real_numbers(self):
>       self.assertEqual(ComplexNumber(1, 0) + ComplexNumber(2, 0), ComplexNumber(3, 0))
E       TypeError: unsupported operand type(s) for +: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:47: TypeError
__________ ComplexNumbersTest.test_add_real_number_to_complex_number ___________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_add_real_number_to_complex_number>

    def test_add_real_number_to_complex_number(self):
>       self.assertEqual(ComplexNumber(1, 2) + 5, ComplexNumber(6, 2))
E       TypeError: unsupported operand type(s) for +: 'ComplexNumber' and 'int'

exercises/practice/complex-numbers/complex_numbers_test.py:160: TypeError
_________ ComplexNumbersTest.test_divide_complex_number_by_real_number _________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_divide_complex_number_by_real_number>

    def test_divide_complex_number_by_real_number(self):
>       self.assertAlmostEqual(ComplexNumber(10, 100) / 10, ComplexNumber(1, 10))
E       TypeError: unsupported operand type(s) for /: 'ComplexNumber' and 'int'

exercises/practice/complex-numbers/complex_numbers_test.py:178: TypeError
_____ ComplexNumbersTest.test_divide_numbers_with_real_and_imaginary_part ______

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_divide_numbers_with_real_and_imaginary_part>

    def test_divide_numbers_with_real_and_imaginary_part(self):
        self.assertAlmostEqual(
>           ComplexNumber(1, 2) / ComplexNumber(3, 4), ComplexNumber(0.44, 0.08)
        )
E       TypeError: unsupported operand type(s) for /: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:101: TypeError
___________ ComplexNumbersTest.test_divide_purely_imaginary_numbers ____________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_divide_purely_imaginary_numbers>

    def test_divide_purely_imaginary_numbers(self):
        self.assertAlmostEqual(
>           ComplexNumber(0, 1) / ComplexNumber(0, 2), ComplexNumber(0.5, 0)
        )
E       TypeError: unsupported operand type(s) for /: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:96: TypeError
______________ ComplexNumbersTest.test_divide_purely_real_numbers ______________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_divide_purely_real_numbers>

    def test_divide_purely_real_numbers(self):
        self.assertAlmostEqual(
>           ComplexNumber(1, 0) / ComplexNumber(2, 0), ComplexNumber(0.5, 0)
        )
E       TypeError: unsupported operand type(s) for /: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:91: TypeError
_________ ComplexNumbersTest.test_divide_real_number_by_complex_number _________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_divide_real_number_by_complex_number>

    def test_divide_real_number_by_complex_number(self):
>       self.assertAlmostEqual(5 / ComplexNumber(1, 1), ComplexNumber(2.5, -2.5))

exercises/practice/complex-numbers/complex_numbers_test.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7ffb3cab3b20>, other = 5

    def __rtruediv__(self, other):
>       return ComplexNumber(other, 0).__truediv__(self)
E       AttributeError: 'ComplexNumber' object has no attribute '__truediv__'. Did you mean: '__rtruediv__'?

exercises/practice/complex-numbers/complex_numbers.py:49: AttributeError
_______________ ComplexNumbersTest.test_euler_s_identity_formula _______________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_euler_s_identity_formula>

    def test_euler_s_identity_formula(self):
>       self.assertAlmostEqual(ComplexNumber(0, math.pi).exp(), ComplexNumber(-1, 0))
E       TypeError: unsupported operand type(s) for -: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:139: TypeError
_ ComplexNumbersTest.test_exponential_of_a_number_with_real_and_imaginary_part _

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_exponential_of_a_number_with_real_and_imaginary_part>

    def test_exponential_of_a_number_with_real_and_imaginary_part(self):
>       self.assertAlmostEqual(
            ComplexNumber(math.log(2), math.pi).exp(), ComplexNumber(-2, 0)
        )
E       TypeError: unsupported operand type(s) for -: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:148: TypeError
_ ComplexNumbersTest.test_exponential_resulting_in_a_number_with_real_and_imaginary_part _

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_exponential_resulting_in_a_number_with_real_and_imaginary_part>

    def test_exponential_resulting_in_a_number_with_real_and_imaginary_part(self):
>       self.assertAlmostEqual(
            ComplexNumber(math.log(2) / 2, math.pi / 4).exp(), ComplexNumber(1, 1)
        )
E       TypeError: unsupported operand type(s) for -: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:153: TypeError
____________________ ComplexNumbersTest.test_imaginary_unit ____________________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_imaginary_unit>

    def test_imaginary_unit(self):
        self.assertEqual(
>           ComplexNumber(0, 1) * ComplexNumber(0, 1), ComplexNumber(-1, 0)
        )
E       TypeError: unsupported operand type(s) for *: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:39: TypeError
________ ComplexNumbersTest.test_multiply_complex_number_by_real_number ________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_multiply_complex_number_by_real_number>

    def test_multiply_complex_number_by_real_number(self):
>       self.assertEqual(ComplexNumber(2, 5) * 5, ComplexNumber(10, 25))
E       TypeError: unsupported operand type(s) for *: 'ComplexNumber' and 'int'

exercises/practice/complex-numbers/complex_numbers_test.py:172: TypeError
____ ComplexNumbersTest.test_multiply_numbers_with_real_and_imaginary_part _____

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_multiply_numbers_with_real_and_imaginary_part>

    def test_multiply_numbers_with_real_and_imaginary_part(self):
        self.assertEqual(
>           ComplexNumber(1, 2) * ComplexNumber(3, 4), ComplexNumber(-5, 10)
        )
E       TypeError: unsupported operand type(s) for *: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:84: TypeError
__________ ComplexNumbersTest.test_multiply_purely_imaginary_numbers ___________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_multiply_purely_imaginary_numbers>

    def test_multiply_purely_imaginary_numbers(self):
        self.assertEqual(
>           ComplexNumber(0, 1) * ComplexNumber(0, 2), ComplexNumber(-2, 0)
        )
E       TypeError: unsupported operand type(s) for *: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:79: TypeError
_____________ ComplexNumbersTest.test_multiply_purely_real_numbers _____________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_multiply_purely_real_numbers>

    def test_multiply_purely_real_numbers(self):
>       self.assertEqual(ComplexNumber(1, 0) * ComplexNumber(2, 0), ComplexNumber(2, 0))
E       TypeError: unsupported operand type(s) for *: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:75: TypeError
________ ComplexNumbersTest.test_multiply_real_number_by_complex_number ________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_multiply_real_number_by_complex_number>

    def test_multiply_real_number_by_complex_number(self):
>       self.assertEqual(5 * ComplexNumber(2, 5), ComplexNumber(10, 25))

exercises/practice/complex-numbers/complex_numbers_test.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <complex_numbers.ComplexNumber object at 0x7ffb3c96f730>, other = 5

    def __rmul__(self, other):
>       return self.__mul__(other)
E       AttributeError: 'ComplexNumber' object has no attribute '__mul__'. Did you mean: '__rmul__'?

exercises/practice/complex-numbers/complex_numbers.py:34: AttributeError
____ ComplexNumbersTest.test_subtract_numbers_with_real_and_imaginary_part _____

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_subtract_numbers_with_real_and_imaginary_part>

    def test_subtract_numbers_with_real_and_imaginary_part(self):
        self.assertEqual(
>           ComplexNumber(1, 2) - ComplexNumber(3, 4), ComplexNumber(-2, -2)
        )
E       TypeError: unsupported operand type(s) for -: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:69: TypeError
__________ ComplexNumbersTest.test_subtract_purely_imaginary_numbers ___________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_subtract_purely_imaginary_numbers>

    def test_subtract_purely_imaginary_numbers(self):
        self.assertEqual(
>           ComplexNumber(0, 1) - ComplexNumber(0, 2), ComplexNumber(0, -1)
        )
E       TypeError: unsupported operand type(s) for -: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:64: TypeError
_____________ ComplexNumbersTest.test_subtract_purely_real_numbers _____________

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_subtract_purely_real_numbers>

    def test_subtract_purely_real_numbers(self):
        self.assertEqual(
>           ComplexNumber(1, 0) - ComplexNumber(2, 0), ComplexNumber(-1, 0)
        )
E       TypeError: unsupported operand type(s) for -: 'ComplexNumber' and 'ComplexNumber'

exercises/practice/complex-numbers/complex_numbers_test.py:59: TypeError
_______ ComplexNumbersTest.test_subtract_real_number_from_complex_number _______

self = <complex_numbers_test.ComplexNumbersTest testMethod=test_subtract_real_number_from_complex_number>

    def test_subtract_real_number_from_complex_number(self):
>       self.assertEqual(ComplexNumber(5, 7) - 4, ComplexNumber(1, 7))
E       TypeError: unsupported operand type(s) for -: 'ComplexNumber' and 'int'

exercises/practice/complex-numbers/complex_numbers_test.py:166: TypeError
=========================== short test summary info ============================
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_add_complex_number_to_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_add_numbers_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_add_purely_imaginary_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_add_purely_real_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_add_real_number_to_complex_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_divide_complex_number_by_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_divide_numbers_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_divide_purely_imaginary_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_divide_purely_real_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_divide_real_number_by_complex_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_euler_s_identity_formula
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_exponential_of_a_number_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_exponential_resulting_in_a_number_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_imaginary_unit
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_multiply_complex_number_by_real_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_multiply_numbers_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_multiply_purely_imaginary_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_multiply_purely_real_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_multiply_real_number_by_complex_number
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_subtract_numbers_with_real_and_imaginary_part
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_subtract_purely_imaginary_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_subtract_purely_real_numbers
FAILED exercises/practice/complex-numbers/complex_numbers_test.py::ComplexNumbersTest::test_subtract_real_number_from_complex_number
======================== 23 failed, 20 passed in 0.16s =========================
