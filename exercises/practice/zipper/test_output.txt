============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 14 items

exercises/practice/zipper/zipper_test.py ..FF.FF.FFFF.F                  [100%]

=================================== FAILURES ===================================
________________ ZipperTest.test_different_paths_to_same_zipper ________________

self = <zipper_test.ZipperTest testMethod=test_different_paths_to_same_zipper>

    def test_different_paths_to_same_zipper(self):
        initial = {
            "value": 1,
            "left": {
                "value": 2,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
>       result = Zipper.from_tree(initial).left().up().right().to_tree()

exercises/practice/zipper/zipper_test.py:306: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/zipper/zipper.py:41: in to_tree
    return self.tree if not self.path else self.up().to_tree()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <zipper.Zipper object at 0x7f7bf50033a0>

    def up(self):
        if not self.path:
            return None
    
        last = self.path[-1]
        new_path = self.path[:-1]
>       new_tree = {'value': last['tree']['value'], last['dir']: self.tree, 'left' if last['dir'] == 'right' else 'right': last['tree']['left' if last['dir'] == 'right' else 'right']}
E       TypeError: 'NoneType' object is not subscriptable

exercises/practice/zipper/zipper.py:36: TypeError
______________________ ZipperTest.test_left_right_and_up _______________________

self = <zipper_test.ZipperTest testMethod=test_left_right_and_up>

    def test_left_right_and_up(self):
        initial = {
            "value": 1,
            "left": {
                "value": 2,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        zipper = Zipper.from_tree(initial)
>       result = zipper.left().up().right().up().left().right().value()

exercises/practice/zipper/zipper_test.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <zipper.Zipper object at 0x7f7bf5001ea0>

    def up(self):
        if not self.path:
            return None
    
        last = self.path[-1]
        new_path = self.path[:-1]
>       new_tree = {'value': last['tree']['value'], last['dir']: self.tree, 'left' if last['dir'] == 'right' else 'right': last['tree']['left' if last['dir'] == 'right' else 'right']}
E       TypeError: 'NoneType' object is not subscriptable

exercises/practice/zipper/zipper.py:36: TypeError
______________________ ZipperTest.test_set_left_with_leaf ______________________

self = <zipper_test.ZipperTest testMethod=test_set_left_with_leaf>

    def test_set_left_with_leaf(self):
        initial = {
            "value": 1,
            "left": {
                "value": 2,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        expected = {
            "value": 1,
            "left": {
                "value": 2,
                "left": {"value": 5, "left": None, "right": None},
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        zipper = Zipper.from_tree(initial)
        result = (
            zipper.left().set_left({"value": 5, "left": None, "right": None}).to_tree()
        )
>       self.assertEqual(result, expected)
E       AssertionError: {'value': 4, 'right': {'value': 2, 'left': {'value'[96 chars]None} != {'value': 1, 'left': {'value': 2, 'left': {'value':[133 chars]one}}
E       + {'left': {'left': {'left': None, 'right': None, 'value': 5},
E       - {'left': None,
E       -  'right': {'left': {'left': None, 'right': None, 'value': 5},
E       -            'right': {'left': None, 'right': None, 'value': 3},
E       ? -
E       
E       +           'right': {'left': None, 'right': None, 'value': 3},
E       -            'value': 2},
E       ? -
E       
E       +           'value': 2},
E       +  'right': {'left': None, 'right': None, 'value': 4},
E       -  'value': 4}
E       ?           ^
E       
E       +  'value': 1}
E       ?           ^

exercises/practice/zipper/zipper_test.py:213: AssertionError
_____________________ ZipperTest.test_set_right_with_null ______________________

self = <zipper_test.ZipperTest testMethod=test_set_right_with_null>

    def test_set_right_with_null(self):
        initial = {
            "value": 1,
            "left": {
                "value": 2,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        expected = {
            "value": 1,
            "left": {"value": 2, "left": None, "right": None},
            "right": {"value": 4, "left": None, "right": None},
        }
    
        zipper = Zipper.from_tree(initial)
        result = zipper.left().set_right(None).to_tree()
>       self.assertEqual(result, expected)
E       AssertionError: {'value': 4, 'right': {'value': 2, 'left': None, 'r[22 chars]None} != {'value': 1, 'left': {'value': 2, 'left': None, 'ri[59 chars]one}}
E       - {'left': None, 'right': {'left': None, 'right': None, 'value': 2}, 'value': 4}
E       + {'left': {'left': None, 'right': None, 'value': 2},
E       +  'right': {'left': None, 'right': None, 'value': 4},
E       +  'value': 1}

exercises/practice/zipper/zipper_test.py:234: AssertionError
__________________________ ZipperTest.test_set_value ___________________________

self = <zipper_test.ZipperTest testMethod=test_set_value>

    def test_set_value(self):
        initial = {
            "value": 1,
            "left": {
                "value": 2,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        expected = {
            "value": 1,
            "left": {
                "value": 5,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        zipper = Zipper.from_tree(initial)
        result = zipper.left().set_value(5).to_tree()
>       self.assertEqual(result, expected)
E       AssertionError: {'value': 4, 'right': {'value': 5, 'left': None, 'r[59 chars]None} != {'value': 1, 'left': {'value': 5, 'left': None, 'ri[96 chars]one}}
E       - {'left': None,
E       + {'left': {'left': None,
E       ?          +++++++++
E       
E       -  'right': {'left': None,
E       -            'right': {'left': None, 'right': None, 'value': 3},
E       ? -
E       
E       +           'right': {'left': None, 'right': None, 'value': 3},
E       -            'value': 5},
E       ? -
E       
E       +           'value': 5},
E       +  'right': {'left': None, 'right': None, 'value': 4},
E       -  'value': 4}
E       ?           ^
E       
E       +  'value': 1}
E       ?           ^

exercises/practice/zipper/zipper_test.py:161: AssertionError
________________ ZipperTest.test_set_value_after_traversing_up _________________

self = <zipper_test.ZipperTest testMethod=test_set_value_after_traversing_up>

    def test_set_value_after_traversing_up(self):
        initial = {
            "value": 1,
            "left": {
                "value": 2,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        expected = {
            "value": 1,
            "left": {
                "value": 5,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        zipper = Zipper.from_tree(initial)
>       result = zipper.left().right().up().set_value(5).to_tree()

exercises/practice/zipper/zipper_test.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <zipper.Zipper object at 0x7f7bf5001930>

    def up(self):
        if not self.path:
            return None
    
        last = self.path[-1]
        new_path = self.path[:-1]
>       new_tree = {'value': last['tree']['value'], last['dir']: self.tree, 'left' if last['dir'] == 'right' else 'right': last['tree']['left' if last['dir'] == 'right' else 'right']}
E       TypeError: 'NoneType' object is not subscriptable

exercises/practice/zipper/zipper.py:36: TypeError
___________________ ZipperTest.test_set_value_on_deep_focus ____________________

self = <zipper_test.ZipperTest testMethod=test_set_value_on_deep_focus>

    def test_set_value_on_deep_focus(self):
        initial = {
            "value": 1,
            "left": {
                "value": 2,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        expected = {
            "value": 1,
            "left": {
                "value": 2,
                "left": None,
                "right": {"value": 5, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        zipper = Zipper.from_tree(initial)
>       result = zipper.left().right().set_value(5).to_tree()

exercises/practice/zipper/zipper_test.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/zipper/zipper.py:41: in to_tree
    return self.tree if not self.path else self.up().to_tree()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <zipper.Zipper object at 0x7f7bf4fedd50>

    def up(self):
        if not self.path:
            return None
    
        last = self.path[-1]
        new_path = self.path[:-1]
>       new_tree = {'value': last['tree']['value'], last['dir']: self.tree, 'left' if last['dir'] == 'right' else 'right': last['tree']['left' if last['dir'] == 'right' else 'right']}
E       TypeError: 'NoneType' object is not subscriptable

exercises/practice/zipper/zipper.py:36: TypeError
______ ZipperTest.test_test_ability_to_descend_multiple_levels_and_return ______

self = <zipper_test.ZipperTest testMethod=test_test_ability_to_descend_multiple_levels_and_return>

    def test_test_ability_to_descend_multiple_levels_and_return(self):
        initial = {
            "value": 1,
            "left": {
                "value": 2,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        zipper = Zipper.from_tree(initial)
>       result = zipper.left().right().up().up().value()

exercises/practice/zipper/zipper_test.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <zipper.Zipper object at 0x7f7bf5000580>

    def up(self):
        if not self.path:
            return None
    
        last = self.path[-1]
        new_path = self.path[:-1]
>       new_tree = {'value': last['tree']['value'], last['dir']: self.tree, 'left' if last['dir'] == 'right' else 'right': last['tree']['left' if last['dir'] == 'right' else 'right']}
E       TypeError: 'NoneType' object is not subscriptable

exercises/practice/zipper/zipper.py:36: TypeError
_____________________ ZipperTest.test_tree_from_deep_focus _____________________

self = <zipper_test.ZipperTest testMethod=test_tree_from_deep_focus>

    def test_tree_from_deep_focus(self):
        initial = {
            "value": 1,
            "left": {
                "value": 2,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        expected = {
            "value": 1,
            "left": {
                "value": 2,
                "left": None,
                "right": {"value": 3, "left": None, "right": None},
            },
            "right": {"value": 4, "left": None, "right": None},
        }
    
        zipper = Zipper.from_tree(initial)
>       result = zipper.left().right().to_tree()

exercises/practice/zipper/zipper_test.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/zipper/zipper.py:41: in to_tree
    return self.tree if not self.path else self.up().to_tree()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <zipper.Zipper object at 0x7f7bf4e52c80>

    def up(self):
        if not self.path:
            return None
    
        last = self.path[-1]
        new_path = self.path[:-1]
>       new_tree = {'value': last['tree']['value'], last['dir']: self.tree, 'left' if last['dir'] == 'right' else 'right': last['tree']['left' if last['dir'] == 'right' else 'right']}
E       TypeError: 'NoneType' object is not subscriptable

exercises/practice/zipper/zipper.py:36: TypeError
=========================== short test summary info ============================
FAILED exercises/practice/zipper/zipper_test.py::ZipperTest::test_different_paths_to_same_zipper
FAILED exercises/practice/zipper/zipper_test.py::ZipperTest::test_left_right_and_up
FAILED exercises/practice/zipper/zipper_test.py::ZipperTest::test_set_left_with_leaf
FAILED exercises/practice/zipper/zipper_test.py::ZipperTest::test_set_right_with_null
FAILED exercises/practice/zipper/zipper_test.py::ZipperTest::test_set_value
FAILED exercises/practice/zipper/zipper_test.py::ZipperTest::test_set_value_after_traversing_up
FAILED exercises/practice/zipper/zipper_test.py::ZipperTest::test_set_value_on_deep_focus
FAILED exercises/practice/zipper/zipper_test.py::ZipperTest::test_test_ability_to_descend_multiple_levels_and_return
FAILED exercises/practice/zipper/zipper_test.py::ZipperTest::test_tree_from_deep_focus
========================= 9 failed, 5 passed in 0.09s ==========================
