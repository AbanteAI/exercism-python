============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 14 items

exercises/practice/react/react_test.py .FFFFFFFFFFF.F                    [100%]

=================================== FAILURES ===================================
______________ ReactTest.test_callback_cells_only_fire_on_change _______________

self = <react_test.ReactTest testMethod=test_callback_cells_only_fire_on_change>

    def test_callback_cells_only_fire_on_change(self):
        input = InputCell(1)
>       output = ComputeCell([input], lambda inputs: 111 if inputs[0] < 3 else 222)

exercises/practice/react/react_test.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/react/react.py:12: in __init__
    self._value = compute_function(*[input_cell.value for input_cell in inputs])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inputs = 1

>   output = ComputeCell([input], lambda inputs: 111 if inputs[0] < 3 else 222)
E   TypeError: 'int' object is not subscriptable

exercises/practice/react/react_test.py:98: TypeError
______________ ReactTest.test_callbacks_can_be_added_and_removed _______________

self = <react_test.ReactTest testMethod=test_callbacks_can_be_added_and_removed>

    def test_callbacks_can_be_added_and_removed(self):
        input = InputCell(11)
>       output = ComputeCell(
            [
                input,
            ],
            lambda inputs: inputs[0] + 1,
        )

exercises/practice/react/react_test.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/react/react.py:12: in __init__
    self._value = compute_function(*[input_cell.value for input_cell in inputs])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inputs = 11

>       lambda inputs: inputs[0] + 1,
    )
E   TypeError: 'int' object is not subscriptable

exercises/practice/react/react_test.py:153: TypeError
____________ ReactTest.test_callbacks_can_fire_from_multiple_cells _____________

self = <react_test.ReactTest testMethod=test_callbacks_can_fire_from_multiple_cells>

    def test_callbacks_can_fire_from_multiple_cells(self):
        input = InputCell(1)
>       plus_one = ComputeCell(
            [
                input,
            ],
            lambda inputs: inputs[0] + 1,
        )

exercises/practice/react/react_test.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/react/react.py:12: in __init__
    self._value = compute_function(*[input_cell.value for input_cell in inputs])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inputs = 1

>       lambda inputs: inputs[0] + 1,
    )
E   TypeError: 'int' object is not subscriptable

exercises/practice/react/react_test.py:129: TypeError
________ ReactTest.test_callbacks_do_not_report_already_reported_values ________

self = <react_test.ReactTest testMethod=test_callbacks_do_not_report_already_reported_values>

    def test_callbacks_do_not_report_already_reported_values(self):
        input = InputCell(1)
>       output = ComputeCell(
            [
                input,
            ],
            lambda inputs: inputs[0] + 1,
        )

exercises/practice/react/react_test.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/react/react.py:12: in __init__
    self._value = compute_function(*[input_cell.value for input_cell in inputs])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inputs = 1

>       lambda inputs: inputs[0] + 1,
    )
E   TypeError: 'int' object is not subscriptable

exercises/practice/react/react_test.py:113: TypeError
_ ReactTest.test_callbacks_should_not_be_called_if_dependencies_change_but_output_value_doesn_t_change _

self = <react_test.ReactTest testMethod=test_callbacks_should_not_be_called_if_dependencies_change_but_output_value_doesn_t_change>

    def test_callbacks_should_not_be_called_if_dependencies_change_but_output_value_doesn_t_change(
        self,
    ):
        input = InputCell(1)
>       plus_one = ComputeCell(
            [
                input,
            ],
            lambda inputs: inputs[0] + 1,
        )

exercises/practice/react/react_test.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/react/react.py:12: in __init__
    self._value = compute_function(*[input_cell.value for input_cell in inputs])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inputs = 1

>       lambda inputs: inputs[0] + 1,
    )
E   TypeError: 'int' object is not subscriptable

exercises/practice/react/react_test.py:239: TypeError
_ ReactTest.test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change _

self = <react_test.ReactTest testMethod=test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change>

    def test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change(
        self,
    ):
        input = InputCell(1)
>       plus_one = ComputeCell(
            [
                input,
            ],
            lambda inputs: inputs[0] + 1,
        )

exercises/practice/react/react_test.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/react/react.py:12: in __init__
    self._value = compute_function(*[input_cell.value for input_cell in inputs])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inputs = 1

>       lambda inputs: inputs[0] + 1,
    )
E   TypeError: 'int' object is not subscriptable

exercises/practice/react/react_test.py:204: TypeError
_____________ ReactTest.test_compute_cells_calculate_initial_value _____________

self = <react_test.ReactTest testMethod=test_compute_cells_calculate_initial_value>

    def test_compute_cells_calculate_initial_value(self):
        input = InputCell(1)
>       output = ComputeCell(
            [
                input,
            ],
            lambda inputs: inputs[0] + 1,
        )

exercises/practice/react/react_test.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/react/react.py:12: in __init__
    self._value = compute_function(*[input_cell.value for input_cell in inputs])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inputs = 1

>       lambda inputs: inputs[0] + 1,
    )
E   TypeError: 'int' object is not subscriptable

exercises/practice/react/react_test.py:30: TypeError
________ ReactTest.test_compute_cells_can_depend_on_other_compute_cells ________

self = <react_test.ReactTest testMethod=test_compute_cells_can_depend_on_other_compute_cells>

    def test_compute_cells_can_depend_on_other_compute_cells(self):
        input = InputCell(1)
>       times_two = ComputeCell(
            [
                input,
            ],
            lambda inputs: inputs[0] * 2,
        )

exercises/practice/react/react_test.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/react/react.py:12: in __init__
    self._value = compute_function(*[input_cell.value for input_cell in inputs])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inputs = 1

>       lambda inputs: inputs[0] * 2,
    )
E   TypeError: 'int' object is not subscriptable

exercises/practice/react/react_test.py:63: TypeError
_________________ ReactTest.test_compute_cells_fire_callbacks __________________

self = <react_test.ReactTest testMethod=test_compute_cells_fire_callbacks>

    def test_compute_cells_fire_callbacks(self):
        input = InputCell(1)
>       output = ComputeCell(
            [
                input,
            ],
            lambda inputs: inputs[0] + 1,
        )

exercises/practice/react/react_test.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/react/react.py:12: in __init__
    self._value = compute_function(*[input_cell.value for input_cell in inputs])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inputs = 1

>       lambda inputs: inputs[0] + 1,
    )
E   TypeError: 'int' object is not subscriptable

exercises/practice/react/react_test.py:88: TypeError
_________ ReactTest.test_compute_cells_take_inputs_in_the_right_order __________

self = <react_test.ReactTest testMethod=test_compute_cells_take_inputs_in_the_right_order>

    def test_compute_cells_take_inputs_in_the_right_order(self):
        one = InputCell(1)
        two = InputCell(2)
>       output = ComputeCell(
            [
                one,
                two,
            ],
            lambda inputs: inputs[0] + inputs[1] * 10,
        )

exercises/practice/react/react_test.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <react.ComputeCell object at 0x7f0e92029e10>
inputs = [<react.InputCell object at 0x7f0e9202a1a0>, <react.InputCell object at 0x7f0e9202a020>]
compute_function = <function ReactTest.test_compute_cells_take_inputs_in_the_right_order.<locals>.<lambda> at 0x7f0e920127a0>

    def __init__(self, inputs, compute_function):
        self.inputs = inputs
        self.compute_function = compute_function
        self.callbacks = []
>       self._value = compute_function(*[input_cell.value for input_cell in inputs])
E       TypeError: ReactTest.test_compute_cells_take_inputs_in_the_right_order.<locals>.<lambda>() takes 1 positional argument but 2 were given

exercises/practice/react/react.py:12: TypeError
___ ReactTest.test_compute_cells_update_value_when_dependencies_are_changed ____

self = <react_test.ReactTest testMethod=test_compute_cells_update_value_when_dependencies_are_changed>

    def test_compute_cells_update_value_when_dependencies_are_changed(self):
        input = InputCell(1)
>       output = ComputeCell(
            [
                input,
            ],
            lambda inputs: inputs[0] + 1,
        )

exercises/practice/react/react_test.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/react/react.py:12: in __init__
    self._value = compute_function(*[input_cell.value for input_cell in inputs])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inputs = 1

>       lambda inputs: inputs[0] + 1,
    )
E   TypeError: 'int' object is not subscriptable

exercises/practice/react/react_test.py:52: TypeError
_ ReactTest.test_removing_a_callback_multiple_times_doesn_t_interfere_with_other_callbacks _

self = <react_test.ReactTest testMethod=test_removing_a_callback_multiple_times_doesn_t_interfere_with_other_callbacks>

    def test_removing_a_callback_multiple_times_doesn_t_interfere_with_other_callbacks(
        self,
    ):
        input = InputCell(1)
>       output = ComputeCell(
            [
                input,
            ],
            lambda inputs: inputs[0] + 1,
        )

exercises/practice/react/react_test.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/react/react.py:12: in __init__
    self._value = compute_function(*[input_cell.value for input_cell in inputs])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inputs = 1

>       lambda inputs: inputs[0] + 1,
    )
E   TypeError: 'int' object is not subscriptable

exercises/practice/react/react_test.py:181: TypeError
=========================== short test summary info ============================
FAILED exercises/practice/react/react_test.py::ReactTest::test_callback_cells_only_fire_on_change
FAILED exercises/practice/react/react_test.py::ReactTest::test_callbacks_can_be_added_and_removed
FAILED exercises/practice/react/react_test.py::ReactTest::test_callbacks_can_fire_from_multiple_cells
FAILED exercises/practice/react/react_test.py::ReactTest::test_callbacks_do_not_report_already_reported_values
FAILED exercises/practice/react/react_test.py::ReactTest::test_callbacks_should_not_be_called_if_dependencies_change_but_output_value_doesn_t_change
FAILED exercises/practice/react/react_test.py::ReactTest::test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change
FAILED exercises/practice/react/react_test.py::ReactTest::test_compute_cells_calculate_initial_value
FAILED exercises/practice/react/react_test.py::ReactTest::test_compute_cells_can_depend_on_other_compute_cells
FAILED exercises/practice/react/react_test.py::ReactTest::test_compute_cells_fire_callbacks
FAILED exercises/practice/react/react_test.py::ReactTest::test_compute_cells_take_inputs_in_the_right_order
FAILED exercises/practice/react/react_test.py::ReactTest::test_compute_cells_update_value_when_dependencies_are_changed
FAILED exercises/practice/react/react_test.py::ReactTest::test_removing_a_callback_multiple_times_doesn_t_interfere_with_other_callbacks
========================= 12 failed, 2 passed in 0.11s =========================
