============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 10 items

exercises/practice/binary-search-tree/binary_search_tree_test.py F...... [ 70%]
FFF                                                                      [100%]

=================================== FAILURES ===================================
______________ BinarySearchTreeTest.test_can_create_complex_tree _______________

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_can_create_complex_tree>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e43e5060>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e43e50f0>

    def assertTreeEqual(self, tree_one, tree_two):
        try:
>           self.compare_tree(tree_one, tree_two)

exercises/practice/binary-search-tree/binary_search_tree_test.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_can_create_complex_tree>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e43e5060>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e43e50f0>

    def compare_tree(self, tree_one, tree_two):
        self.assertEqual(tree_one.data, tree_two.data)
    
        # Compare left tree nodes
        if tree_one.left and tree_two.left:
            self.compare_tree(tree_one.left, tree_two.left)
        elif tree_one.left is None and tree_two.left is None:
            pass
        else:
>           raise AssertionError
E           AssertionError

exercises/practice/binary-search-tree/binary_search_tree_test.py:78: AssertionError

During handling of the above exception, another exception occurred:

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_can_create_complex_tree>

    def test_can_create_complex_tree(self):
        expected = TreeNode(
            "4",
            TreeNode("2", TreeNode("1", None, None), TreeNode("3", None, None)),
            TreeNode("6", TreeNode("5", None, None), TreeNode("7", None, None)),
        )
>       self.assertTreeEqual(
            BinarySearchTree(["4", "2", "6", "1", "3", "5", "7"]).data(), expected
        )

exercises/practice/binary-search-tree/binary_search_tree_test.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_can_create_complex_tree>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e43e5060>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e43e50f0>

    def assertTreeEqual(self, tree_one, tree_two):
        try:
            self.compare_tree(tree_one, tree_two)
        except AssertionError:
>           raise AssertionError("{} != {}".format(tree_one, tree_two))
E           AssertionError: TreeNode(data=4, left=TreeNode(data=2, left=TreeNode(data=1, left=None, right=None), right=TreeNode(data=3, left=None, right=None)), right=TreeNode(data=6, left=TreeNode(data=5, left=None, right=None), right=TreeNode(data=7, left=None, right=None))) != TreeNode(data=4, left=None, right=None)

exercises/practice/binary-search-tree/binary_search_tree_test.py:67: AssertionError
____________ BinarySearchTreeTest.test_greater_number_at_right_node ____________

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_greater_number_at_right_node>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e43bf160>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e43bf1c0>

    def assertTreeEqual(self, tree_one, tree_two):
        try:
>           self.compare_tree(tree_one, tree_two)

exercises/practice/binary-search-tree/binary_search_tree_test.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_greater_number_at_right_node>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e43bf160>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e43bf1c0>

    def compare_tree(self, tree_one, tree_two):
        self.assertEqual(tree_one.data, tree_two.data)
    
        # Compare left tree nodes
        if tree_one.left and tree_two.left:
            self.compare_tree(tree_one.left, tree_two.left)
        elif tree_one.left is None and tree_two.left is None:
            pass
        else:
            raise AssertionError
    
        # Compare right tree nodes
        if tree_one.right and tree_two.right:
            self.compare_tree(tree_one.right, tree_two.right)
        elif tree_one.right is None and tree_two.right is None:
            pass
        else:
>           raise AssertionError
E           AssertionError

exercises/practice/binary-search-tree/binary_search_tree_test.py:86: AssertionError

During handling of the above exception, another exception occurred:

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_greater_number_at_right_node>

    def test_greater_number_at_right_node(self):
        expected = TreeNode("4", None, TreeNode("5", None, None))
>       self.assertTreeEqual(BinarySearchTree(["4", "5"]).data(), expected)

exercises/practice/binary-search-tree/binary_search_tree_test.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_greater_number_at_right_node>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e43bf160>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e43bf1c0>

    def assertTreeEqual(self, tree_one, tree_two):
        try:
            self.compare_tree(tree_one, tree_two)
        except AssertionError:
>           raise AssertionError("{} != {}".format(tree_one, tree_two))
E           AssertionError: TreeNode(data=4, left=None, right=TreeNode(data=5, left=None, right=None)) != TreeNode(data=4, left=None, right=None)

exercises/practice/binary-search-tree/binary_search_tree_test.py:67: AssertionError
______________ BinarySearchTreeTest.test_same_number_at_left_node ______________

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_same_number_at_left_node>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e4447a00>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e4447af0>

    def assertTreeEqual(self, tree_one, tree_two):
        try:
>           self.compare_tree(tree_one, tree_two)

exercises/practice/binary-search-tree/binary_search_tree_test.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_same_number_at_left_node>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e4447a00>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e4447af0>

    def compare_tree(self, tree_one, tree_two):
        self.assertEqual(tree_one.data, tree_two.data)
    
        # Compare left tree nodes
        if tree_one.left and tree_two.left:
            self.compare_tree(tree_one.left, tree_two.left)
        elif tree_one.left is None and tree_two.left is None:
            pass
        else:
>           raise AssertionError
E           AssertionError

exercises/practice/binary-search-tree/binary_search_tree_test.py:78: AssertionError

During handling of the above exception, another exception occurred:

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_same_number_at_left_node>

    def test_same_number_at_left_node(self):
        expected = TreeNode("4", TreeNode("4", None, None), None)
>       self.assertTreeEqual(BinarySearchTree(["4", "4"]).data(), expected)

exercises/practice/binary-search-tree/binary_search_tree_test.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_same_number_at_left_node>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e4447a00>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e4447af0>

    def assertTreeEqual(self, tree_one, tree_two):
        try:
            self.compare_tree(tree_one, tree_two)
        except AssertionError:
>           raise AssertionError("{} != {}".format(tree_one, tree_two))
E           AssertionError: TreeNode(data=4, left=TreeNode(data=4, left=None, right=None), right=None) != TreeNode(data=4, left=None, right=None)

exercises/practice/binary-search-tree/binary_search_tree_test.py:67: AssertionError
____________ BinarySearchTreeTest.test_smaller_number_at_left_node _____________

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_smaller_number_at_left_node>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e4473520>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e4473a00>

    def assertTreeEqual(self, tree_one, tree_two):
        try:
>           self.compare_tree(tree_one, tree_two)

exercises/practice/binary-search-tree/binary_search_tree_test.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_smaller_number_at_left_node>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e4473520>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e4473a00>

    def compare_tree(self, tree_one, tree_two):
        self.assertEqual(tree_one.data, tree_two.data)
    
        # Compare left tree nodes
        if tree_one.left and tree_two.left:
            self.compare_tree(tree_one.left, tree_two.left)
        elif tree_one.left is None and tree_two.left is None:
            pass
        else:
>           raise AssertionError
E           AssertionError

exercises/practice/binary-search-tree/binary_search_tree_test.py:78: AssertionError

During handling of the above exception, another exception occurred:

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_smaller_number_at_left_node>

    def test_smaller_number_at_left_node(self):
        expected = TreeNode("4", TreeNode("2", None, None), None)
>       self.assertTreeEqual(BinarySearchTree(["4", "2"]).data(), expected)

exercises/practice/binary-search-tree/binary_search_tree_test.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binary_search_tree_test.BinarySearchTreeTest testMethod=test_smaller_number_at_left_node>
tree_one = <binary_search_tree.TreeNode object at 0x7f41e4473520>
tree_two = <binary_search_tree.TreeNode object at 0x7f41e4473a00>

    def assertTreeEqual(self, tree_one, tree_two):
        try:
            self.compare_tree(tree_one, tree_two)
        except AssertionError:
>           raise AssertionError("{} != {}".format(tree_one, tree_two))
E           AssertionError: TreeNode(data=4, left=TreeNode(data=2, left=None, right=None), right=None) != TreeNode(data=4, left=None, right=None)

exercises/practice/binary-search-tree/binary_search_tree_test.py:67: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/binary-search-tree/binary_search_tree_test.py::BinarySearchTreeTest::test_can_create_complex_tree
FAILED exercises/practice/binary-search-tree/binary_search_tree_test.py::BinarySearchTreeTest::test_greater_number_at_right_node
FAILED exercises/practice/binary-search-tree/binary_search_tree_test.py::BinarySearchTreeTest::test_same_number_at_left_node
FAILED exercises/practice/binary-search-tree/binary_search_tree_test.py::BinarySearchTreeTest::test_smaller_number_at_left_node
========================= 4 failed, 6 passed in 0.06s ==========================
