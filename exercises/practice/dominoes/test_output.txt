============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 13 items

exercises/practice/dominoes/dominoes_test.py F.....FFF..FF               [100%]

=================================== FAILURES ===================================
____________________ DominoesTest.test_can_reverse_dominoes ____________________

self = <dominoes_test.DominoesTest testMethod=test_can_reverse_dominoes>

    def test_can_reverse_dominoes(self):
        input_dominoes = [(1, 2), (1, 3), (2, 3)]
        output_chain = can_chain(input_dominoes)
>       self.assert_correct_chain(input_dominoes, output_chain)

exercises/practice/dominoes/dominoes_test.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/dominoes/dominoes_test.py:123: in assert_correct_chain
    self.assertIsNotNone(output_chain, msg)
E   AssertionError: unexpectedly None : There should be a chain for [(1, 2), (1, 3), (2, 3)]
_______________________ DominoesTest.test_need_backtrack _______________________

self = <dominoes_test.DominoesTest testMethod=test_need_backtrack>

    def test_need_backtrack(self):
        input_dominoes = [(1, 2), (2, 3), (3, 1), (2, 4), (2, 4)]
        output_chain = can_chain(input_dominoes)
>       self.assert_correct_chain(input_dominoes, output_chain)

exercises/practice/dominoes/dominoes_test.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/dominoes/dominoes_test.py:123: in assert_correct_chain
    self.assertIsNotNone(output_chain, msg)
E   AssertionError: unexpectedly None : There should be a chain for [(1, 2), (2, 3), (3, 1), (2, 4), (2, 4)]
_______________________ DominoesTest.test_nine_elements ________________________

self = <dominoes_test.DominoesTest testMethod=test_nine_elements>

    def test_nine_elements(self):
        input_dominoes = [
            (1, 2),
            (5, 3),
            (3, 1),
            (1, 2),
            (2, 4),
            (1, 6),
            (2, 3),
            (3, 4),
            (5, 6),
        ]
        output_chain = can_chain(input_dominoes)
>       self.assert_correct_chain(input_dominoes, output_chain)

exercises/practice/dominoes/dominoes_test.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/dominoes/dominoes_test.py:123: in assert_correct_chain
    self.assertIsNotNone(output_chain, msg)
E   AssertionError: unexpectedly None : There should be a chain for [(1, 2), (5, 3), (3, 1), (1, 2), (2, 4), (1, 6), (2, 3), (3, 4), (5, 6)]
_______________________ DominoesTest.test_separate_loops _______________________

self = <dominoes_test.DominoesTest testMethod=test_separate_loops>

    def test_separate_loops(self):
        input_dominoes = [(1, 2), (2, 3), (3, 1), (1, 1), (2, 2), (3, 3)]
        output_chain = can_chain(input_dominoes)
>       self.assert_correct_chain(input_dominoes, output_chain)

exercises/practice/dominoes/dominoes_test.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/dominoes/dominoes_test.py:123: in assert_correct_chain
    self.assertIsNotNone(output_chain, msg)
E   AssertionError: unexpectedly None : There should be a chain for [(1, 2), (2, 3), (3, 1), (1, 1), (2, 2), (3, 3)]
______________ DominoesTest.test_singleton_that_can_t_be_chained _______________

self = <dominoes_test.DominoesTest testMethod=test_singleton_that_can_t_be_chained>

    def test_singleton_that_can_t_be_chained(self):
        input_dominoes = [(1, 2)]
        output_chain = can_chain(input_dominoes)
>       self.refute_correct_chain(input_dominoes, output_chain)

exercises/practice/dominoes/dominoes_test.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/dominoes/dominoes_test.py:132: in refute_correct_chain
    self.assertIsNone(output_chain, msg)
E   AssertionError: [(1, 2)] is not None : There should be no valid chain for [(1, 2)]
_______________________ DominoesTest.test_three_elements _______________________

self = <dominoes_test.DominoesTest testMethod=test_three_elements>

    def test_three_elements(self):
        input_dominoes = [(1, 2), (3, 1), (2, 3)]
        output_chain = can_chain(input_dominoes)
>       self.assert_correct_chain(input_dominoes, output_chain)

exercises/practice/dominoes/dominoes_test.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/dominoes/dominoes_test.py:123: in assert_correct_chain
    self.assertIsNotNone(output_chain, msg)
E   AssertionError: unexpectedly None : There should be a chain for [(1, 2), (3, 1), (2, 3)]
=========================== short test summary info ============================
FAILED exercises/practice/dominoes/dominoes_test.py::DominoesTest::test_can_reverse_dominoes
FAILED exercises/practice/dominoes/dominoes_test.py::DominoesTest::test_need_backtrack
FAILED exercises/practice/dominoes/dominoes_test.py::DominoesTest::test_nine_elements
FAILED exercises/practice/dominoes/dominoes_test.py::DominoesTest::test_separate_loops
FAILED exercises/practice/dominoes/dominoes_test.py::DominoesTest::test_singleton_that_can_t_be_chained
FAILED exercises/practice/dominoes/dominoes_test.py::DominoesTest::test_three_elements
========================= 6 failed, 7 passed in 0.10s ==========================
