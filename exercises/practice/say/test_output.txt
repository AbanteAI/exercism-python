============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 20 items

exercises/practice/say/say_test.py F.FFFF...FF.F.FFFF..                  [100%]

=================================== FAILURES ===================================
__________________________ SayTest.test_a_big_number ___________________________

self = <say_test.SayTest testMethod=test_a_big_number>

    def test_a_big_number(self):
        self.assertEqual(
>           say(987654321123),
            "nine hundred eighty-seven billion six hundred fifty-four million three hundred twenty-one thousand one hundred twenty-three",
        )

exercises/practice/say/say_test.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/say/say.py:38: in say
    return insert_scale_words(chunks)
exercises/practice/say/say.py:28: in insert_scale_words
    result.append(f"{handle_small_numbers(chunk)} {scale_words[len(chunks) - i - 1]}")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
____________________ SayTest.test_nine_hundred_ninety_nine _____________________

self = <say_test.SayTest testMethod=test_nine_hundred_ninety_nine>

    def test_nine_hundred_ninety_nine(self):
>       self.assertEqual(say(999), "nine hundred ninety-nine")

exercises/practice/say/say_test.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/say/say.py:38: in say
    return insert_scale_words(chunks)
exercises/practice/say/say.py:28: in insert_scale_words
    result.append(f"{handle_small_numbers(chunk)} {scale_words[len(chunks) - i - 1]}")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
___________________________ SayTest.test_ninety_nine ___________________________

self = <say_test.SayTest testMethod=test_ninety_nine>

    def test_ninety_nine(self):
>       self.assertEqual(say(99), "ninety-nine")

exercises/practice/say/say_test.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/say/say.py:38: in say
    return insert_scale_words(chunks)
exercises/practice/say/say.py:28: in insert_scale_words
    result.append(f"{handle_small_numbers(chunk)} {scale_words[len(chunks) - i - 1]}")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
_________ SayTest.test_numbers_above_999_999_999_999_are_out_of_range __________

self = <say_test.SayTest testMethod=test_numbers_above_999_999_999_999_are_out_of_range>

    def test_numbers_above_999_999_999_999_are_out_of_range(self):
        with self.assertRaises(ValueError) as err:
            say(1000000000000)
    
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "input out of range")
E       AssertionError: 'Number out of range' != 'input out of range'
E       - Number out of range
E       ? ^ ^^^^
E       + input out of range
E       ? ^^^ ^

exercises/practice/say/say_test.py:81: AssertionError
_______________ SayTest.test_numbers_below_zero_are_out_of_range _______________

self = <say_test.SayTest testMethod=test_numbers_below_zero_are_out_of_range>

    def test_numbers_below_zero_are_out_of_range(self):
        with self.assertRaises(ValueError) as err:
            say(-1)
    
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "input out of range")
E       AssertionError: 'Number out of range' != 'input out of range'
E       - Number out of range
E       ? ^ ^^^^
E       + input out of range
E       ? ^^^ ^

exercises/practice/say/say_test.py:74: AssertionError
_______________________ SayTest.test_one_hundred_seventy _______________________

self = <say_test.SayTest testMethod=test_one_hundred_seventy>

    def test_one_hundred_seventy(self):
>       self.assertEqual(say(170), "one hundred seventy")

exercises/practice/say/say_test.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/say/say.py:38: in say
    return insert_scale_words(chunks)
exercises/practice/say/say.py:28: in insert_scale_words
    result.append(f"{handle_small_numbers(chunk)} {scale_words[len(chunks) - i - 1]}")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
____________________ SayTest.test_one_hundred_twenty_three _____________________

self = <say_test.SayTest testMethod=test_one_hundred_twenty_three>

    def test_one_hundred_twenty_three(self):
>       self.assertEqual(say(123), "one hundred twenty-three")

exercises/practice/say/say_test.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/say/say.py:38: in say
    return insert_scale_words(chunks)
exercises/practice/say/say.py:28: in insert_scale_words
    result.append(f"{handle_small_numbers(chunk)} {scale_words[len(chunks) - i - 1]}")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
________ SayTest.test_one_million_two_thousand_three_hundred_forty_five ________

self = <say_test.SayTest testMethod=test_one_million_two_thousand_three_hundred_forty_five>

    def test_one_million_two_thousand_three_hundred_forty_five(self):
        self.assertEqual(
>           say(1002345), "one million two thousand three hundred forty-five"
        )

exercises/practice/say/say_test.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/say/say.py:38: in say
    return insert_scale_words(chunks)
exercises/practice/say/say.py:28: in insert_scale_words
    result.append(f"{handle_small_numbers(chunk)} {scale_words[len(chunks) - i - 1]}")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
______________ SayTest.test_one_thousand_two_hundred_thirty_four _______________

self = <say_test.SayTest testMethod=test_one_thousand_two_hundred_thirty_four>

    def test_one_thousand_two_hundred_thirty_four(self):
>       self.assertEqual(say(1234), "one thousand two hundred thirty-four")

exercises/practice/say/say_test.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/say/say.py:38: in say
    return insert_scale_words(chunks)
exercises/practice/say/say.py:28: in insert_scale_words
    result.append(f"{handle_small_numbers(chunk)} {scale_words[len(chunks) - i - 1]}")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
_____________________________ SayTest.test_thirty ______________________________

self = <say_test.SayTest testMethod=test_thirty>

    def test_thirty(self):
>       self.assertEqual(say(30), "thirty")

exercises/practice/say/say_test.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/say/say.py:38: in say
    return insert_scale_words(chunks)
exercises/practice/say/say.py:28: in insert_scale_words
    result.append(f"{handle_small_numbers(chunk)} {scale_words[len(chunks) - i - 1]}")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
_____________________________ SayTest.test_twenty ______________________________

self = <say_test.SayTest testMethod=test_twenty>

    def test_twenty(self):
>       self.assertEqual(say(20), "twenty")

exercises/practice/say/say_test.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/say/say.py:38: in say
    return insert_scale_words(chunks)
exercises/practice/say/say.py:28: in insert_scale_words
    result.append(f"{handle_small_numbers(chunk)} {scale_words[len(chunks) - i - 1]}")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
___________________________ SayTest.test_twenty_two ____________________________

self = <say_test.SayTest testMethod=test_twenty_two>

    def test_twenty_two(self):
>       self.assertEqual(say(22), "twenty-two")

exercises/practice/say/say_test.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/say/say.py:38: in say
    return insert_scale_words(chunks)
exercises/practice/say/say.py:28: in insert_scale_words
    result.append(f"{handle_small_numbers(chunk)} {scale_words[len(chunks) - i - 1]}")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
exercises/practice/say/say.py:14: in handle_small_numbers
    return ones[number // 100] + " hundred" + (handle_small_numbers(number % 100) if number % 100 != 0 else "")
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
=========================== short test summary info ============================
FAILED exercises/practice/say/say_test.py::SayTest::test_a_big_number - Recur...
FAILED exercises/practice/say/say_test.py::SayTest::test_nine_hundred_ninety_nine
FAILED exercises/practice/say/say_test.py::SayTest::test_ninety_nine - Recurs...
FAILED exercises/practice/say/say_test.py::SayTest::test_numbers_above_999_999_999_999_are_out_of_range
FAILED exercises/practice/say/say_test.py::SayTest::test_numbers_below_zero_are_out_of_range
FAILED exercises/practice/say/say_test.py::SayTest::test_one_hundred_seventy
FAILED exercises/practice/say/say_test.py::SayTest::test_one_hundred_twenty_three
FAILED exercises/practice/say/say_test.py::SayTest::test_one_million_two_thousand_three_hundred_forty_five
FAILED exercises/practice/say/say_test.py::SayTest::test_one_thousand_two_hundred_thirty_four
FAILED exercises/practice/say/say_test.py::SayTest::test_thirty - RecursionEr...
FAILED exercises/practice/say/say_test.py::SayTest::test_twenty - RecursionEr...
FAILED exercises/practice/say/say_test.py::SayTest::test_twenty_two - Recursi...
========================= 12 failed, 8 passed in 0.15s =========================
