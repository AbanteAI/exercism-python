============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 7 items

exercises/practice/parallel-letter-frequency/parallel_letter_frequency_test.py . [ 14%]
FF....                                                                   [100%]

=================================== FAILURES ===================================
_______________ ParallelLetterFrequencyTest.test_multiline_text ________________

self = <parallel_letter_frequency_test.ParallelLetterFrequencyTest testMethod=test_multiline_text>

    def test_multiline_text(self):
        text_input = "3 Quotes from Excerism Homepage:\n" + \
                     "\tOne moment you feel like you're\n" + \
                     "getting it. The next moment you're\n" + \
                     "stuck.\n" + \
                     "\tYou know what it’s like to be fluent.\n" + \
                     "Suddenly you’re feeling incompetent\n" + \
                     "and clumsy.\n" + \
                     "\tHaphazard, convoluted code is\n" + \
                     "infuriating, not to mention costly. That\n" + \
                     "slapdash explosion of complexity is an\n" + \
                     "expensive yak shave waiting to\n" + \
                     "happen."
        actual = calculate(text_input.split('\n'))
        expected = Counter([x for x in text_input.lower() if x.isalpha()])
>       self.assertDictEqual(actual, expected)
E       AssertionError: Count[160 chars]x': 5, 'k': 5, 'w': 3, 'v': 3, '3': 1, 'q': 1, 'b': 1, 'z': 1}) != Count[160 chars]x': 5, 'k': 5, 'w': 3, 'v': 3, 'q': 1, 'b': 1, 'z': 1})
E         Counter({'e': 35,
E                  'o': 26,
E                  't': 26,
E                  'n': 23,
E                  'i': 19,
E                  'a': 15,
E                  's': 14,
E                  'u': 12,
E                  'l': 12,
E                  'm': 11,
E                  'y': 10,
E                  'h': 9,
E                  'p': 9,
E                  'c': 8,
E                  'r': 7,
E                  'd': 7,
E                  'f': 6,
E                  'g': 6,
E                  'x': 5,
E                  'k': 5,
E                  'w': 3,
E                  'v': 3,
E       -          '3': 1,
E                  'q': 1,
E                  'b': 1,
E                  'z': 1})

exercises/practice/parallel-letter-frequency/parallel_letter_frequency_test.py:57: AssertionError
___________________ ParallelLetterFrequencyTest.test_numbers ___________________

self = <parallel_letter_frequency_test.ParallelLetterFrequencyTest testMethod=test_numbers>

    def test_numbers(self):
        actual = calculate(['012', '345', '6789'])
        expected = {}
>       self.assertDictEqual(actual, expected)
E       AssertionError: Counter({'0': 1, '1': 1, '2': 1, '3': 1, [43 chars]: 1}) != {}
E       + {}
E       - Counter({'0': 1,
E       -          '1': 1,
E       -          '2': 1,
E       -          '3': 1,
E       -          '4': 1,
E       -          '5': 1,
E       -          '6': 1,
E       -          '7': 1,
E       -          '8': 1,
E       -          '9': 1})

exercises/practice/parallel-letter-frequency/parallel_letter_frequency_test.py:22: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/parallel-letter-frequency/parallel_letter_frequency_test.py::ParallelLetterFrequencyTest::test_multiline_text
FAILED exercises/practice/parallel-letter-frequency/parallel_letter_frequency_test.py::ParallelLetterFrequencyTest::test_numbers
========================= 2 failed, 5 passed in 0.15s ==========================
