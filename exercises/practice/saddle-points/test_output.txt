============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 10 items

exercises/practice/saddle-points/saddle_points_test.py FFFFFF.FFF        [100%]

=================================== FAILURES ===================================
_ SaddlePointsTest.test_can_identify_lack_of_saddle_points_when_there_are_none _

self = <saddle_points_test.SaddlePointsTest testMethod=test_can_identify_lack_of_saddle_points_when_there_are_none>

    def test_can_identify_lack_of_saddle_points_when_there_are_none(self):
        matrix = [[1, 2, 3], [3, 1, 2], [2, 3, 1]]
>       self.assertEqual(sorted_points(saddle_points(matrix)), sorted_points([]))

exercises/practice/saddle-points/saddle_points_test.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

matrix = [[1, 2, 3], [3, 1, 2], [2, 3, 1]]

    def saddle_points(matrix):
        if not matrix:
            return []
    
        rows = len(matrix)
        cols = len(matrix[0])
    
        max_in_rows = [max(row) for row in matrix]
        min_in_cols = [min([matrix[i][j] for i in range(rows)]) for j in range(cols)]
    
>       return [{"row": i + 1, "column": j + 1} for i, j in saddle_points]
E       TypeError: 'function' object is not iterable

exercises/practice/saddle-points/saddle_points.py:11: TypeError
____ SaddlePointsTest.test_can_identify_multiple_saddle_points_in_a_column _____

self = <saddle_points_test.SaddlePointsTest testMethod=test_can_identify_multiple_saddle_points_in_a_column>

    def test_can_identify_multiple_saddle_points_in_a_column(self):
        matrix = [[4, 5, 4], [3, 5, 5], [1, 5, 4]]
        self.assertEqual(
>           sorted_points(saddle_points(matrix)),
            sorted_points(
                [
                    {"row": 1, "column": 2},
                    {"row": 2, "column": 2},
                    {"row": 3, "column": 2},
                ]
            ),
        )

exercises/practice/saddle-points/saddle_points_test.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

matrix = [[4, 5, 4], [3, 5, 5], [1, 5, 4]]

    def saddle_points(matrix):
        if not matrix:
            return []
    
        rows = len(matrix)
        cols = len(matrix[0])
    
        max_in_rows = [max(row) for row in matrix]
        min_in_cols = [min([matrix[i][j] for i in range(rows)]) for j in range(cols)]
    
>       return [{"row": i + 1, "column": j + 1} for i, j in saddle_points]
E       TypeError: 'function' object is not iterable

exercises/practice/saddle-points/saddle_points.py:11: TypeError
______ SaddlePointsTest.test_can_identify_multiple_saddle_points_in_a_row ______

self = <saddle_points_test.SaddlePointsTest testMethod=test_can_identify_multiple_saddle_points_in_a_row>

    def test_can_identify_multiple_saddle_points_in_a_row(self):
        matrix = [[6, 7, 8], [5, 5, 5], [7, 5, 6]]
        self.assertEqual(
>           sorted_points(saddle_points(matrix)),
            sorted_points(
                [
                    {"row": 2, "column": 1},
                    {"row": 2, "column": 2},
                    {"row": 2, "column": 3},
                ]
            ),
        )

exercises/practice/saddle-points/saddle_points_test.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

matrix = [[6, 7, 8], [5, 5, 5], [7, 5, 6]]

    def saddle_points(matrix):
        if not matrix:
            return []
    
        rows = len(matrix)
        cols = len(matrix[0])
    
        max_in_rows = [max(row) for row in matrix]
        min_in_cols = [min([matrix[i][j] for i in range(rows)]) for j in range(cols)]
    
>       return [{"row": i + 1, "column": j + 1} for i, j in saddle_points]
E       TypeError: 'function' object is not iterable

exercises/practice/saddle-points/saddle_points.py:11: TypeError
____ SaddlePointsTest.test_can_identify_saddle_point_in_bottom_right_corner ____

self = <saddle_points_test.SaddlePointsTest testMethod=test_can_identify_saddle_point_in_bottom_right_corner>

    def test_can_identify_saddle_point_in_bottom_right_corner(self):
        matrix = [[8, 7, 9], [6, 7, 6], [3, 2, 5]]
        self.assertEqual(
>           sorted_points(saddle_points(matrix)),
            sorted_points([{"row": 3, "column": 3}]),
        )

exercises/practice/saddle-points/saddle_points_test.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

matrix = [[8, 7, 9], [6, 7, 6], [3, 2, 5]]

    def saddle_points(matrix):
        if not matrix:
            return []
    
        rows = len(matrix)
        cols = len(matrix[0])
    
        max_in_rows = [max(row) for row in matrix]
        min_in_cols = [min([matrix[i][j] for i in range(rows)]) for j in range(cols)]
    
>       return [{"row": i + 1, "column": j + 1} for i, j in saddle_points]
E       TypeError: 'function' object is not iterable

exercises/practice/saddle-points/saddle_points.py:11: TypeError
___ SaddlePointsTest.test_can_identify_saddle_points_in_a_non_square_matrix ____

self = <saddle_points_test.SaddlePointsTest testMethod=test_can_identify_saddle_points_in_a_non_square_matrix>

    def test_can_identify_saddle_points_in_a_non_square_matrix(self):
        matrix = [[3, 1, 3], [3, 2, 4]]
        self.assertEqual(
>           sorted_points(saddle_points(matrix)),
            sorted_points([{"row": 1, "column": 3}, {"row": 1, "column": 1}]),
        )

exercises/practice/saddle-points/saddle_points_test.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

matrix = [[3, 1, 3], [3, 2, 4]]

    def saddle_points(matrix):
        if not matrix:
            return []
    
        rows = len(matrix)
        cols = len(matrix[0])
    
        max_in_rows = [max(row) for row in matrix]
        min_in_cols = [min([matrix[i][j] for i in range(rows)]) for j in range(cols)]
    
>       return [{"row": i + 1, "column": j + 1} for i, j in saddle_points]
E       TypeError: 'function' object is not iterable

exercises/practice/saddle-points/saddle_points.py:11: TypeError
____________ SaddlePointsTest.test_can_identify_single_saddle_point ____________

self = <saddle_points_test.SaddlePointsTest testMethod=test_can_identify_single_saddle_point>

    def test_can_identify_single_saddle_point(self):
        matrix = [[9, 8, 7], [5, 3, 2], [6, 6, 7]]
        self.assertEqual(
>           sorted_points(saddle_points(matrix)),
            sorted_points([{"row": 2, "column": 1}]),
        )

exercises/practice/saddle-points/saddle_points_test.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

matrix = [[9, 8, 7], [5, 3, 2], [6, 6, 7]]

    def saddle_points(matrix):
        if not matrix:
            return []
    
        rows = len(matrix)
        cols = len(matrix[0])
    
        max_in_rows = [max(row) for row in matrix]
        min_in_cols = [min([matrix[i][j] for i in range(rows)]) for j in range(cols)]
    
>       return [{"row": i + 1, "column": j + 1} for i, j in saddle_points]
E       TypeError: 'function' object is not iterable

exercises/practice/saddle-points/saddle_points.py:11: TypeError
_ SaddlePointsTest.test_can_identify_that_saddle_points_in_a_single_column_matrix_are_those_with_the_minimum_value _

self = <saddle_points_test.SaddlePointsTest testMethod=test_can_identify_that_saddle_points_in_a_single_column_matrix_are_those_with_the_minimum_value>

    def test_can_identify_that_saddle_points_in_a_single_column_matrix_are_those_with_the_minimum_value(
        self,
    ):
        matrix = [[2], [1], [4], [1]]
        self.assertEqual(
>           sorted_points(saddle_points(matrix)),
            sorted_points([{"row": 2, "column": 1}, {"row": 4, "column": 1}]),
        )

exercises/practice/saddle-points/saddle_points_test.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

matrix = [[2], [1], [4], [1]]

    def saddle_points(matrix):
        if not matrix:
            return []
    
        rows = len(matrix)
        cols = len(matrix[0])
    
        max_in_rows = [max(row) for row in matrix]
        min_in_cols = [min([matrix[i][j] for i in range(rows)]) for j in range(cols)]
    
>       return [{"row": i + 1, "column": j + 1} for i, j in saddle_points]
E       TypeError: 'function' object is not iterable

exercises/practice/saddle-points/saddle_points.py:11: TypeError
_ SaddlePointsTest.test_can_identify_that_saddle_points_in_a_single_row_matrix_are_those_with_the_maximum_value _

self = <saddle_points_test.SaddlePointsTest testMethod=test_can_identify_that_saddle_points_in_a_single_row_matrix_are_those_with_the_maximum_value>

    def test_can_identify_that_saddle_points_in_a_single_row_matrix_are_those_with_the_maximum_value(
        self,
    ):
        matrix = [[2, 5, 3, 5]]
        self.assertEqual(
>           sorted_points(saddle_points(matrix)),
            sorted_points([{"row": 1, "column": 2}, {"row": 1, "column": 4}]),
        )

exercises/practice/saddle-points/saddle_points_test.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

matrix = [[2, 5, 3, 5]]

    def saddle_points(matrix):
        if not matrix:
            return []
    
        rows = len(matrix)
        cols = len(matrix[0])
    
        max_in_rows = [max(row) for row in matrix]
        min_in_cols = [min([matrix[i][j] for i in range(rows)]) for j in range(cols)]
    
>       return [{"row": i + 1, "column": j + 1} for i, j in saddle_points]
E       TypeError: 'function' object is not iterable

exercises/practice/saddle-points/saddle_points.py:11: TypeError
____________________ SaddlePointsTest.test_irregular_matrix ____________________

self = <saddle_points_test.SaddlePointsTest testMethod=test_irregular_matrix>

    def test_irregular_matrix(self):
        matrix = [[3, 2, 1], [0, 1], [2, 1, 0]]
        with self.assertRaises(ValueError) as err:
>           saddle_points(matrix)

exercises/practice/saddle-points/saddle_points_test.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/saddle-points/saddle_points.py:9: in saddle_points
    min_in_cols = [min([matrix[i][j] for i in range(rows)]) for j in range(cols)]
exercises/practice/saddle-points/saddle_points.py:9: in <listcomp>
    min_in_cols = [min([matrix[i][j] for i in range(rows)]) for j in range(cols)]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   min_in_cols = [min([matrix[i][j] for i in range(rows)]) for j in range(cols)]
E   IndexError: list index out of range

exercises/practice/saddle-points/saddle_points.py:9: IndexError
=========================== short test summary info ============================
FAILED exercises/practice/saddle-points/saddle_points_test.py::SaddlePointsTest::test_can_identify_lack_of_saddle_points_when_there_are_none
FAILED exercises/practice/saddle-points/saddle_points_test.py::SaddlePointsTest::test_can_identify_multiple_saddle_points_in_a_column
FAILED exercises/practice/saddle-points/saddle_points_test.py::SaddlePointsTest::test_can_identify_multiple_saddle_points_in_a_row
FAILED exercises/practice/saddle-points/saddle_points_test.py::SaddlePointsTest::test_can_identify_saddle_point_in_bottom_right_corner
FAILED exercises/practice/saddle-points/saddle_points_test.py::SaddlePointsTest::test_can_identify_saddle_points_in_a_non_square_matrix
FAILED exercises/practice/saddle-points/saddle_points_test.py::SaddlePointsTest::test_can_identify_single_saddle_point
FAILED exercises/practice/saddle-points/saddle_points_test.py::SaddlePointsTest::test_can_identify_that_saddle_points_in_a_single_column_matrix_are_those_with_the_minimum_value
FAILED exercises/practice/saddle-points/saddle_points_test.py::SaddlePointsTest::test_can_identify_that_saddle_points_in_a_single_row_matrix_are_those_with_the_maximum_value
FAILED exercises/practice/saddle-points/saddle_points_test.py::SaddlePointsTest::test_irregular_matrix
========================= 9 failed, 1 passed in 0.06s ==========================
