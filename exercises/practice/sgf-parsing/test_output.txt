============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 23 items

exercises/practice/sgf-parsing/sgf_parsing_test.py F.FFF.FF....FF.F..FFF [ 91%]
FF                                                                       [100%]

=================================== FAILURES ===================================
__________________ SgfParsingTest.test_all_lowercase_property __________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_all_lowercase_property>

    def test_all_lowercase_property(self):
        input_string = "(;a[b])"
        with self.assertRaises(ValueError) as err:
            parse(input_string)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "property must be in uppercase")
E       AssertionError: 'properties without delimiter' != 'property must be in uppercase'
E       - properties without delimiter
E       + property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing_test.py:62: AssertionError
_ SgfParsingTest.test_escaped_backslash_in_property_value_becomes_just_a_backslash _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_backslash_in_property_value_becomes_just_a_backslash>

    def test_escaped_backslash_in_property_value_becomes_just_a_backslash(self):
        input_string = "(;A[\\\\])"
        expected = SgfTree(properties={"A": ["\\"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = 'A[\\\\]'

    def parse(input_string):
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node = None
    
        # Regular expression patterns for parsing
        prop_pattern = re.compile(r'([A-Z]+)((?:\[.*?(?<!\\)\])+)')
        node_pattern = re.compile(r';')
    
        def parse_properties(prop_string):
            props = {}
            for match in re.finditer(r'\[.*?(?<!\\)\]', prop_string):
                value = match.group(0).strip('[]')
                # Handle escape characters
                value = re.sub(r'\\(.)', r'\1', value)
                props.setdefault(prop_key, []).append(value)
            return props
    
        while input_string:
            node_match = node_pattern.match(input_string)
            if node_match:
                if current_node:
                    children.append(current_node)
                current_node = {'properties': {}, 'children': []}
                input_string = input_string[node_match.end():]
            else:
                prop_match = prop_pattern.match(input_string)
                if prop_match:
                    prop_key, prop_values = prop_match.groups()
                    if not prop_key.isupper():
                        raise ValueError("property must be in uppercase")
                    current_node['properties'].update(parse_properties(prop_values))
                    input_string = input_string[prop_match.end():]
                else:
>                   raise ValueError("properties without delimiter")
E                   ValueError: properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing.py:68: ValueError
_ SgfParsingTest.test_escaped_closing_bracket_within_property_value_becomes_just_a_closing_bracket _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_closing_bracket_within_property_value_becomes_just_a_closing_bracket>

    def test_escaped_closing_bracket_within_property_value_becomes_just_a_closing_bracket(
        self,
    ):
        input_string = "(;A[\\]])"
        expected = SgfTree(properties={"A": ["]"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f2eb4db2920> != <sgf_parsing.SgfTree object at 0x7f2eb4db3670>

exercises/practice/sgf-parsing/sgf_parsing_test.py:106: AssertionError
_ SgfParsingTest.test_escaped_newline_in_property_value_is_converted_to_nothing_at_all _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_newline_in_property_value_is_converted_to_nothing_at_all>

    def test_escaped_newline_in_property_value_is_converted_to_nothing_at_all(self):
        input_string = "(;A[hello\\\nworld])"
        expected = SgfTree(properties={"A": ["helloworld"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = 'A[hello\\\nworld]'

    def parse(input_string):
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node = None
    
        # Regular expression patterns for parsing
        prop_pattern = re.compile(r'([A-Z]+)((?:\[.*?(?<!\\)\])+)')
        node_pattern = re.compile(r';')
    
        def parse_properties(prop_string):
            props = {}
            for match in re.finditer(r'\[.*?(?<!\\)\]', prop_string):
                value = match.group(0).strip('[]')
                # Handle escape characters
                value = re.sub(r'\\(.)', r'\1', value)
                props.setdefault(prop_key, []).append(value)
            return props
    
        while input_string:
            node_match = node_pattern.match(input_string)
            if node_match:
                if current_node:
                    children.append(current_node)
                current_node = {'properties': {}, 'children': []}
                input_string = input_string[node_match.end():]
            else:
                prop_match = prop_pattern.match(input_string)
                if prop_match:
                    prop_key, prop_values = prop_match.groups()
                    if not prop_key.isupper():
                        raise ValueError("property must be in uppercase")
                    current_node['properties'].update(parse_properties(prop_values))
                    input_string = input_string[prop_match.end():]
                else:
>                   raise ValueError("properties without delimiter")
E                   ValueError: properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing.py:68: ValueError
___ SgfParsingTest.test_escaped_tab_in_property_value_is_converted_to_space ____

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_tab_in_property_value_is_converted_to_space>

    def test_escaped_tab_in_property_value_is_converted_to_space(self):
        input_string = "(;A[hello\\\tworld])"
        expected = SgfTree(properties={"A": ["hello world"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f2eb4de7130> != <sgf_parsing.SgfTree object at 0x7f2eb4de7160>

exercises/practice/sgf-parsing/sgf_parsing_test.py:140: AssertionError
_ SgfParsingTest.test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value>

    def test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value(
        self,
    ):
        input_string = "(;A[\\]b\nc\\\nd\t\te\\\\ \\\n\\]])"
        expected = SgfTree(properties={"A": ["]b\ncd  e\\ ]"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = 'A[\\]b\nc\\\nd\t\te\\\\ \\\n\\]]'

    def parse(input_string):
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node = None
    
        # Regular expression patterns for parsing
        prop_pattern = re.compile(r'([A-Z]+)((?:\[.*?(?<!\\)\])+)')
        node_pattern = re.compile(r';')
    
        def parse_properties(prop_string):
            props = {}
            for match in re.finditer(r'\[.*?(?<!\\)\]', prop_string):
                value = match.group(0).strip('[]')
                # Handle escape characters
                value = re.sub(r'\\(.)', r'\1', value)
                props.setdefault(prop_key, []).append(value)
            return props
    
        while input_string:
            node_match = node_pattern.match(input_string)
            if node_match:
                if current_node:
                    children.append(current_node)
                current_node = {'properties': {}, 'children': []}
                input_string = input_string[node_match.end():]
            else:
                prop_match = prop_pattern.match(input_string)
                if prop_match:
                    prop_key, prop_values = prop_match.groups()
                    if not prop_key.isupper():
                        raise ValueError("property must be in uppercase")
                    current_node['properties'].update(parse_properties(prop_values))
                    input_string = input_string[prop_match.end():]
                else:
>                   raise ValueError("properties without delimiter")
E                   ValueError: properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing.py:68: ValueError
_ SgfParsingTest.test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped>

    def test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped(self):
        input_string = "(;A[x[y\\]z][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["x[y]z", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f2eb5562290> != <sgf_parsing.SgfTree object at 0x7f2eb5562710>

exercises/practice/sgf-parsing/sgf_parsing_test.py:119: AssertionError
__ SgfParsingTest.test_parentheses_in_property_value_don_t_need_to_be_escaped __

self = <sgf_parsing_test.SgfParsingTest testMethod=test_parentheses_in_property_value_don_t_need_to_be_escaped>

    def test_parentheses_in_property_value_don_t_need_to_be_escaped(self):
        input_string = "(;A[x(y)z][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["x(y)z", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f2eb4dc5f90> != <sgf_parsing.SgfTree object at 0x7f2eb4dc6050>

exercises/practice/sgf-parsing/sgf_parsing_test.py:135: AssertionError
__ SgfParsingTest.test_semicolon_in_property_value_doesn_t_need_to_be_escaped __

self = <sgf_parsing_test.SgfParsingTest testMethod=test_semicolon_in_property_value_doesn_t_need_to_be_escaped>

    def test_semicolon_in_property_value_doesn_t_need_to_be_escaped(self):
        input_string = "(;A[a;b][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["a;b", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f2eb4f13c10> != <sgf_parsing.SgfTree object at 0x7f2eb4f13ca0>

exercises/practice/sgf-parsing/sgf_parsing_test.py:127: AssertionError
_____________________ SgfParsingTest.test_two_child_trees ______________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_two_child_trees>

    def test_two_child_trees(self):
        input_string = "(;A[B](;B[C])(;C[D]))"
        expected = SgfTree(
            properties={"A": ["B"]},
            children=[SgfTree({"B": ["C"]}), SgfTree({"C": ["D"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;B[C])(;C[D]'

    def parse(input_string):
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node = None
    
        # Regular expression patterns for parsing
        prop_pattern = re.compile(r'([A-Z]+)((?:\[.*?(?<!\\)\])+)')
        node_pattern = re.compile(r';')
    
        def parse_properties(prop_string):
            props = {}
            for match in re.finditer(r'\[.*?(?<!\\)\]', prop_string):
                value = match.group(0).strip('[]')
                # Handle escape characters
                value = re.sub(r'\\(.)', r'\1', value)
                props.setdefault(prop_key, []).append(value)
            return props
    
        while input_string:
            node_match = node_pattern.match(input_string)
            if node_match:
                if current_node:
                    children.append(current_node)
                current_node = {'properties': {}, 'children': []}
                input_string = input_string[node_match.end():]
            else:
                prop_match = prop_pattern.match(input_string)
                if prop_match:
                    prop_key, prop_values = prop_match.groups()
                    if not prop_key.isupper():
                        raise ValueError("property must be in uppercase")
                    current_node['properties'].update(parse_properties(prop_values))
                    input_string = input_string[prop_match.end():]
                else:
>                   raise ValueError("properties without delimiter")
E                   ValueError: properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing.py:68: ValueError
________________________ SgfParsingTest.test_two_nodes _________________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_two_nodes>

    def test_two_nodes(self):
        input_string = "(;A[B];B[C])"
        expected = SgfTree(properties={"A": ["B"]}, children=[SgfTree({"B": ["C"]})])
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f2eb4db05e0> != <sgf_parsing.SgfTree object at 0x7f2eb4db1180>

exercises/practice/sgf-parsing/sgf_parsing_test.py:74: AssertionError
_______________ SgfParsingTest.test_upper_and_lowercase_property _______________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_upper_and_lowercase_property>

    def test_upper_and_lowercase_property(self):
        input_string = "(;Aa[b])"
        with self.assertRaises(ValueError) as err:
            parse(input_string)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "property must be in uppercase")
E       AssertionError: 'properties without delimiter' != 'property must be in uppercase'
E       - properties without delimiter
E       + property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing_test.py:69: AssertionError
____ SgfParsingTest.test_within_property_values_newlines_remain_as_newlines ____

self = <sgf_parsing_test.SgfParsingTest testMethod=test_within_property_values_newlines_remain_as_newlines>

    def test_within_property_values_newlines_remain_as_newlines(self):
        input_string = "(;A[hello\n\nworld])"
        expected = SgfTree(properties={"A": ["hello\n\nworld"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = 'A[hello\n\nworld]'

    def parse(input_string):
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node = None
    
        # Regular expression patterns for parsing
        prop_pattern = re.compile(r'([A-Z]+)((?:\[.*?(?<!\\)\])+)')
        node_pattern = re.compile(r';')
    
        def parse_properties(prop_string):
            props = {}
            for match in re.finditer(r'\[.*?(?<!\\)\]', prop_string):
                value = match.group(0).strip('[]')
                # Handle escape characters
                value = re.sub(r'\\(.)', r'\1', value)
                props.setdefault(prop_key, []).append(value)
            return props
    
        while input_string:
            node_match = node_pattern.match(input_string)
            if node_match:
                if current_node:
                    children.append(current_node)
                current_node = {'properties': {}, 'children': []}
                input_string = input_string[node_match.end():]
            else:
                prop_match = prop_pattern.match(input_string)
                if prop_match:
                    prop_key, prop_values = prop_match.groups()
                    if not prop_key.isupper():
                        raise ValueError("property must be in uppercase")
                    current_node['properties'].update(parse_properties(prop_values))
                    input_string = input_string[prop_match.end():]
                else:
>                   raise ValueError("properties without delimiter")
E                   ValueError: properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing.py:68: ValueError
_ SgfParsingTest.test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces>

    def test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces(
        self,
    ):
        input_string = "(;A[hello\t\tworld])"
        expected = SgfTree(properties={"A": ["hello  world"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f2eb4f13190> != <sgf_parsing.SgfTree object at 0x7f2eb4f13790>

exercises/practice/sgf-parsing/sgf_parsing_test.py:94: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_all_lowercase_property
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_backslash_in_property_value_becomes_just_a_backslash
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_closing_bracket_within_property_value_becomes_just_a_closing_bracket
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_newline_in_property_value_is_converted_to_nothing_at_all
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_tab_in_property_value_is_converted_to_space
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_parentheses_in_property_value_don_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_semicolon_in_property_value_doesn_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_two_child_trees
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_two_nodes
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_upper_and_lowercase_property
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_within_property_values_newlines_remain_as_newlines
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces
========================= 14 failed, 9 passed in 0.12s =========================
