============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 23 items

exercises/practice/sgf-parsing/sgf_parsing_test.py ..F.FFFFFFF.FFFF..FF. [ 91%]
FF                                                                       [100%]

=================================== FAILURES ===================================
_ SgfParsingTest.test_escaped_backslash_in_property_value_becomes_just_a_backslash _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_backslash_in_property_value_becomes_just_a_backslash>

    def test_escaped_backslash_in_property_value_becomes_just_a_backslash(self):
        input_string = "(;A[\\\\])"
        expected = SgfTree(properties={"A": ["\\"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/sgf-parsing/sgf_parsing.py:68: in parse
    return parse_tree(input_string)
exercises/practice/sgf-parsing/sgf_parsing.py:59: in parse_tree
    root_properties = parse_node(nodes[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node_string = ';A[\\\\]'

    def parse_node(node_string):
        # Extract properties from a node string
        properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
        if not properties:
>           raise ValueError("tree with no nodes")
E           ValueError: tree with no nodes

exercises/practice/sgf-parsing/sgf_parsing.py:43: ValueError
_ SgfParsingTest.test_escaped_newline_in_property_value_is_converted_to_nothing_at_all _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_newline_in_property_value_is_converted_to_nothing_at_all>

    def test_escaped_newline_in_property_value_is_converted_to_nothing_at_all(self):
        input_string = "(;A[hello\\\nworld])"
        expected = SgfTree(properties={"A": ["helloworld"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;A[hello\\\nworld])'

    def parse(input_string):
        def unescape(value):
            # Handle escape sequences according to SGF specification
            return value.replace('\\\\', '\\').replace('\\]', ']')
    
        def split_properties(properties_string):
            # Split the properties by closing brackets followed by uppercase letters
            return re.split(r'(?<=\])(?=[A-Z])', properties_string)
    
        def parse_node(node_string):
            # Extract properties from a node string
            properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
            if not properties:
                raise ValueError("tree with no nodes")
            parsed_properties = {}
            for key, values in properties:
                value_list = re.findall(r'\[(.*?[^\\])\]', values)
                parsed_properties[key] = [unescape(value) for value in value_list]
            return parsed_properties
    
        def parse_tree(tree_string):
            # Parse the tree recursively
            if not tree_string.startswith('(') or not tree_string.endswith(')'):
                raise ValueError("tree missing")
            tree_string = tree_string[1:-1].strip()
            if not tree_string:
                raise ValueError("tree with no nodes")
            subtrees = re.split(r'(?<=\))(?=\()', tree_string)
            nodes = split_properties(subtrees[0])
            root_properties = parse_node(nodes[0])
            children = [parse_tree(subtree) for subtree in subtrees[1:]]
            return SgfTree(root_properties, children)
    
        input_string = input_string.strip()
        if not input_string:
            raise ValueError("tree missing")
        if any(char.islower() for char in re.findall(r'[A-Za-z]', input_string)):
>           raise ValueError("property must be in uppercase")
E           ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:67: ValueError
_ SgfParsingTest.test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace>

    def test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace(self):
        input_string = "(;A[\\t = t and \\n = n])"
        expected = SgfTree(properties={"A": ["t = t and n = n"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;A[\\t = t and \\n = n])'

    def parse(input_string):
        def unescape(value):
            # Handle escape sequences according to SGF specification
            return value.replace('\\\\', '\\').replace('\\]', ']')
    
        def split_properties(properties_string):
            # Split the properties by closing brackets followed by uppercase letters
            return re.split(r'(?<=\])(?=[A-Z])', properties_string)
    
        def parse_node(node_string):
            # Extract properties from a node string
            properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
            if not properties:
                raise ValueError("tree with no nodes")
            parsed_properties = {}
            for key, values in properties:
                value_list = re.findall(r'\[(.*?[^\\])\]', values)
                parsed_properties[key] = [unescape(value) for value in value_list]
            return parsed_properties
    
        def parse_tree(tree_string):
            # Parse the tree recursively
            if not tree_string.startswith('(') or not tree_string.endswith(')'):
                raise ValueError("tree missing")
            tree_string = tree_string[1:-1].strip()
            if not tree_string:
                raise ValueError("tree with no nodes")
            subtrees = re.split(r'(?<=\))(?=\()', tree_string)
            nodes = split_properties(subtrees[0])
            root_properties = parse_node(nodes[0])
            children = [parse_tree(subtree) for subtree in subtrees[1:]]
            return SgfTree(root_properties, children)
    
        input_string = input_string.strip()
        if not input_string:
            raise ValueError("tree missing")
        if any(char.islower() for char in re.findall(r'[A-Za-z]', input_string)):
>           raise ValueError("property must be in uppercase")
E           ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:67: ValueError
___ SgfParsingTest.test_escaped_tab_in_property_value_is_converted_to_space ____

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_tab_in_property_value_is_converted_to_space>

    def test_escaped_tab_in_property_value_is_converted_to_space(self):
        input_string = "(;A[hello\\\tworld])"
        expected = SgfTree(properties={"A": ["hello world"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;A[hello\\\tworld])'

    def parse(input_string):
        def unescape(value):
            # Handle escape sequences according to SGF specification
            return value.replace('\\\\', '\\').replace('\\]', ']')
    
        def split_properties(properties_string):
            # Split the properties by closing brackets followed by uppercase letters
            return re.split(r'(?<=\])(?=[A-Z])', properties_string)
    
        def parse_node(node_string):
            # Extract properties from a node string
            properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
            if not properties:
                raise ValueError("tree with no nodes")
            parsed_properties = {}
            for key, values in properties:
                value_list = re.findall(r'\[(.*?[^\\])\]', values)
                parsed_properties[key] = [unescape(value) for value in value_list]
            return parsed_properties
    
        def parse_tree(tree_string):
            # Parse the tree recursively
            if not tree_string.startswith('(') or not tree_string.endswith(')'):
                raise ValueError("tree missing")
            tree_string = tree_string[1:-1].strip()
            if not tree_string:
                raise ValueError("tree with no nodes")
            subtrees = re.split(r'(?<=\))(?=\()', tree_string)
            nodes = split_properties(subtrees[0])
            root_properties = parse_node(nodes[0])
            children = [parse_tree(subtree) for subtree in subtrees[1:]]
            return SgfTree(root_properties, children)
    
        input_string = input_string.strip()
        if not input_string:
            raise ValueError("tree missing")
        if any(char.islower() for char in re.findall(r'[A-Za-z]', input_string)):
>           raise ValueError("property must be in uppercase")
E           ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:67: ValueError
_ SgfParsingTest.test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value>

    def test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value(
        self,
    ):
        input_string = "(;A[\\]b\nc\\\nd\t\te\\\\ \\\n\\]])"
        expected = SgfTree(properties={"A": ["]b\ncd  e\\ ]"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;A[\\]b\nc\\\nd\t\te\\\\ \\\n\\]])'

    def parse(input_string):
        def unescape(value):
            # Handle escape sequences according to SGF specification
            return value.replace('\\\\', '\\').replace('\\]', ']')
    
        def split_properties(properties_string):
            # Split the properties by closing brackets followed by uppercase letters
            return re.split(r'(?<=\])(?=[A-Z])', properties_string)
    
        def parse_node(node_string):
            # Extract properties from a node string
            properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
            if not properties:
                raise ValueError("tree with no nodes")
            parsed_properties = {}
            for key, values in properties:
                value_list = re.findall(r'\[(.*?[^\\])\]', values)
                parsed_properties[key] = [unescape(value) for value in value_list]
            return parsed_properties
    
        def parse_tree(tree_string):
            # Parse the tree recursively
            if not tree_string.startswith('(') or not tree_string.endswith(')'):
                raise ValueError("tree missing")
            tree_string = tree_string[1:-1].strip()
            if not tree_string:
                raise ValueError("tree with no nodes")
            subtrees = re.split(r'(?<=\))(?=\()', tree_string)
            nodes = split_properties(subtrees[0])
            root_properties = parse_node(nodes[0])
            children = [parse_tree(subtree) for subtree in subtrees[1:]]
            return SgfTree(root_properties, children)
    
        input_string = input_string.strip()
        if not input_string:
            raise ValueError("tree missing")
        if any(char.islower() for char in re.findall(r'[A-Za-z]', input_string)):
>           raise ValueError("property must be in uppercase")
E           ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:67: ValueError
___________________ SgfParsingTest.test_multiple_properties ____________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_multiple_properties>

    def test_multiple_properties(self):
        input_string = "(;A[b]C[d])"
        expected = SgfTree(properties={"A": ["b"], "C": ["d"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;A[b]C[d])'

    def parse(input_string):
        def unescape(value):
            # Handle escape sequences according to SGF specification
            return value.replace('\\\\', '\\').replace('\\]', ']')
    
        def split_properties(properties_string):
            # Split the properties by closing brackets followed by uppercase letters
            return re.split(r'(?<=\])(?=[A-Z])', properties_string)
    
        def parse_node(node_string):
            # Extract properties from a node string
            properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
            if not properties:
                raise ValueError("tree with no nodes")
            parsed_properties = {}
            for key, values in properties:
                value_list = re.findall(r'\[(.*?[^\\])\]', values)
                parsed_properties[key] = [unescape(value) for value in value_list]
            return parsed_properties
    
        def parse_tree(tree_string):
            # Parse the tree recursively
            if not tree_string.startswith('(') or not tree_string.endswith(')'):
                raise ValueError("tree missing")
            tree_string = tree_string[1:-1].strip()
            if not tree_string:
                raise ValueError("tree with no nodes")
            subtrees = re.split(r'(?<=\))(?=\()', tree_string)
            nodes = split_properties(subtrees[0])
            root_properties = parse_node(nodes[0])
            children = [parse_tree(subtree) for subtree in subtrees[1:]]
            return SgfTree(root_properties, children)
    
        input_string = input_string.strip()
        if not input_string:
            raise ValueError("tree missing")
        if any(char.islower() for char in re.findall(r'[A-Za-z]', input_string)):
>           raise ValueError("property must be in uppercase")
E           ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:67: ValueError
_________________ SgfParsingTest.test_multiple_property_values _________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_multiple_property_values>

    def test_multiple_property_values(self):
        input_string = "(;A[b][c][d])"
        expected = SgfTree(properties={"A": ["b", "c", "d"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;A[b][c][d])'

    def parse(input_string):
        def unescape(value):
            # Handle escape sequences according to SGF specification
            return value.replace('\\\\', '\\').replace('\\]', ']')
    
        def split_properties(properties_string):
            # Split the properties by closing brackets followed by uppercase letters
            return re.split(r'(?<=\])(?=[A-Z])', properties_string)
    
        def parse_node(node_string):
            # Extract properties from a node string
            properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
            if not properties:
                raise ValueError("tree with no nodes")
            parsed_properties = {}
            for key, values in properties:
                value_list = re.findall(r'\[(.*?[^\\])\]', values)
                parsed_properties[key] = [unescape(value) for value in value_list]
            return parsed_properties
    
        def parse_tree(tree_string):
            # Parse the tree recursively
            if not tree_string.startswith('(') or not tree_string.endswith(')'):
                raise ValueError("tree missing")
            tree_string = tree_string[1:-1].strip()
            if not tree_string:
                raise ValueError("tree with no nodes")
            subtrees = re.split(r'(?<=\))(?=\()', tree_string)
            nodes = split_properties(subtrees[0])
            root_properties = parse_node(nodes[0])
            children = [parse_tree(subtree) for subtree in subtrees[1:]]
            return SgfTree(root_properties, children)
    
        input_string = input_string.strip()
        if not input_string:
            raise ValueError("tree missing")
        if any(char.islower() for char in re.findall(r'[A-Za-z]', input_string)):
>           raise ValueError("property must be in uppercase")
E           ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:67: ValueError
_________________ SgfParsingTest.test_node_without_properties __________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_node_without_properties>

    def test_node_without_properties(self):
        input_string = "(;)"
        expected = SgfTree()
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/sgf-parsing/sgf_parsing.py:68: in parse
    return parse_tree(input_string)
exercises/practice/sgf-parsing/sgf_parsing.py:59: in parse_tree
    root_properties = parse_node(nodes[0])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node_string = ';'

    def parse_node(node_string):
        # Extract properties from a node string
        properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
        if not properties:
>           raise ValueError("tree with no nodes")
E           ValueError: tree with no nodes

exercises/practice/sgf-parsing/sgf_parsing.py:43: ValueError
_ SgfParsingTest.test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped>

    def test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped(self):
        input_string = "(;A[x[y\\]z][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["x[y]z", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;A[x[y\\]z][foo]B[bar];C[baz])'

    def parse(input_string):
        def unescape(value):
            # Handle escape sequences according to SGF specification
            return value.replace('\\\\', '\\').replace('\\]', ']')
    
        def split_properties(properties_string):
            # Split the properties by closing brackets followed by uppercase letters
            return re.split(r'(?<=\])(?=[A-Z])', properties_string)
    
        def parse_node(node_string):
            # Extract properties from a node string
            properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
            if not properties:
                raise ValueError("tree with no nodes")
            parsed_properties = {}
            for key, values in properties:
                value_list = re.findall(r'\[(.*?[^\\])\]', values)
                parsed_properties[key] = [unescape(value) for value in value_list]
            return parsed_properties
    
        def parse_tree(tree_string):
            # Parse the tree recursively
            if not tree_string.startswith('(') or not tree_string.endswith(')'):
                raise ValueError("tree missing")
            tree_string = tree_string[1:-1].strip()
            if not tree_string:
                raise ValueError("tree with no nodes")
            subtrees = re.split(r'(?<=\))(?=\()', tree_string)
            nodes = split_properties(subtrees[0])
            root_properties = parse_node(nodes[0])
            children = [parse_tree(subtree) for subtree in subtrees[1:]]
            return SgfTree(root_properties, children)
    
        input_string = input_string.strip()
        if not input_string:
            raise ValueError("tree missing")
        if any(char.islower() for char in re.findall(r'[A-Za-z]', input_string)):
>           raise ValueError("property must be in uppercase")
E           ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:67: ValueError
__ SgfParsingTest.test_parentheses_in_property_value_don_t_need_to_be_escaped __

self = <sgf_parsing_test.SgfParsingTest testMethod=test_parentheses_in_property_value_don_t_need_to_be_escaped>

    def test_parentheses_in_property_value_don_t_need_to_be_escaped(self):
        input_string = "(;A[x(y)z][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["x(y)z", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;A[x(y)z][foo]B[bar];C[baz])'

    def parse(input_string):
        def unescape(value):
            # Handle escape sequences according to SGF specification
            return value.replace('\\\\', '\\').replace('\\]', ']')
    
        def split_properties(properties_string):
            # Split the properties by closing brackets followed by uppercase letters
            return re.split(r'(?<=\])(?=[A-Z])', properties_string)
    
        def parse_node(node_string):
            # Extract properties from a node string
            properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
            if not properties:
                raise ValueError("tree with no nodes")
            parsed_properties = {}
            for key, values in properties:
                value_list = re.findall(r'\[(.*?[^\\])\]', values)
                parsed_properties[key] = [unescape(value) for value in value_list]
            return parsed_properties
    
        def parse_tree(tree_string):
            # Parse the tree recursively
            if not tree_string.startswith('(') or not tree_string.endswith(')'):
                raise ValueError("tree missing")
            tree_string = tree_string[1:-1].strip()
            if not tree_string:
                raise ValueError("tree with no nodes")
            subtrees = re.split(r'(?<=\))(?=\()', tree_string)
            nodes = split_properties(subtrees[0])
            root_properties = parse_node(nodes[0])
            children = [parse_tree(subtree) for subtree in subtrees[1:]]
            return SgfTree(root_properties, children)
    
        input_string = input_string.strip()
        if not input_string:
            raise ValueError("tree missing")
        if any(char.islower() for char in re.findall(r'[A-Za-z]', input_string)):
>           raise ValueError("property must be in uppercase")
E           ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:67: ValueError
_______________ SgfParsingTest.test_properties_without_delimiter _______________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_properties_without_delimiter>

    def test_properties_without_delimiter(self):
        input_string = "(;A)"
        with self.assertRaises(ValueError) as err:
            parse(input_string)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "properties without delimiter")
E       AssertionError: 'tree with no nodes' != 'properties without delimiter'
E       - tree with no nodes
E       + properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing_test.py:55: AssertionError
__ SgfParsingTest.test_semicolon_in_property_value_doesn_t_need_to_be_escaped __

self = <sgf_parsing_test.SgfParsingTest testMethod=test_semicolon_in_property_value_doesn_t_need_to_be_escaped>

    def test_semicolon_in_property_value_doesn_t_need_to_be_escaped(self):
        input_string = "(;A[a;b][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["a;b", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;A[a;b][foo]B[bar];C[baz])'

    def parse(input_string):
        def unescape(value):
            # Handle escape sequences according to SGF specification
            return value.replace('\\\\', '\\').replace('\\]', ']')
    
        def split_properties(properties_string):
            # Split the properties by closing brackets followed by uppercase letters
            return re.split(r'(?<=\])(?=[A-Z])', properties_string)
    
        def parse_node(node_string):
            # Extract properties from a node string
            properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
            if not properties:
                raise ValueError("tree with no nodes")
            parsed_properties = {}
            for key, values in properties:
                value_list = re.findall(r'\[(.*?[^\\])\]', values)
                parsed_properties[key] = [unescape(value) for value in value_list]
            return parsed_properties
    
        def parse_tree(tree_string):
            # Parse the tree recursively
            if not tree_string.startswith('(') or not tree_string.endswith(')'):
                raise ValueError("tree missing")
            tree_string = tree_string[1:-1].strip()
            if not tree_string:
                raise ValueError("tree with no nodes")
            subtrees = re.split(r'(?<=\))(?=\()', tree_string)
            nodes = split_properties(subtrees[0])
            root_properties = parse_node(nodes[0])
            children = [parse_tree(subtree) for subtree in subtrees[1:]]
            return SgfTree(root_properties, children)
    
        input_string = input_string.strip()
        if not input_string:
            raise ValueError("tree missing")
        if any(char.islower() for char in re.findall(r'[A-Za-z]', input_string)):
>           raise ValueError("property must be in uppercase")
E           ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:67: ValueError
_____________________ SgfParsingTest.test_two_child_trees ______________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_two_child_trees>

    def test_two_child_trees(self):
        input_string = "(;A[B](;B[C])(;C[D]))"
        expected = SgfTree(
            properties={"A": ["B"]},
            children=[SgfTree({"B": ["C"]}), SgfTree({"C": ["D"]})],
        )
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7fdbf5ae8eb0> != <sgf_parsing.SgfTree object at 0x7fdbf5ae8bb0>

exercises/practice/sgf-parsing/sgf_parsing_test.py:82: AssertionError
________________________ SgfParsingTest.test_two_nodes _________________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_two_nodes>

    def test_two_nodes(self):
        input_string = "(;A[B];B[C])"
        expected = SgfTree(properties={"A": ["B"]}, children=[SgfTree({"B": ["C"]})])
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7fdbf5b1c760> != <sgf_parsing.SgfTree object at 0x7fdbf5b1e590>

exercises/practice/sgf-parsing/sgf_parsing_test.py:74: AssertionError
____ SgfParsingTest.test_within_property_values_newlines_remain_as_newlines ____

self = <sgf_parsing_test.SgfParsingTest testMethod=test_within_property_values_newlines_remain_as_newlines>

    def test_within_property_values_newlines_remain_as_newlines(self):
        input_string = "(;A[hello\n\nworld])"
        expected = SgfTree(properties={"A": ["hello\n\nworld"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;A[hello\n\nworld])'

    def parse(input_string):
        def unescape(value):
            # Handle escape sequences according to SGF specification
            return value.replace('\\\\', '\\').replace('\\]', ']')
    
        def split_properties(properties_string):
            # Split the properties by closing brackets followed by uppercase letters
            return re.split(r'(?<=\])(?=[A-Z])', properties_string)
    
        def parse_node(node_string):
            # Extract properties from a node string
            properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
            if not properties:
                raise ValueError("tree with no nodes")
            parsed_properties = {}
            for key, values in properties:
                value_list = re.findall(r'\[(.*?[^\\])\]', values)
                parsed_properties[key] = [unescape(value) for value in value_list]
            return parsed_properties
    
        def parse_tree(tree_string):
            # Parse the tree recursively
            if not tree_string.startswith('(') or not tree_string.endswith(')'):
                raise ValueError("tree missing")
            tree_string = tree_string[1:-1].strip()
            if not tree_string:
                raise ValueError("tree with no nodes")
            subtrees = re.split(r'(?<=\))(?=\()', tree_string)
            nodes = split_properties(subtrees[0])
            root_properties = parse_node(nodes[0])
            children = [parse_tree(subtree) for subtree in subtrees[1:]]
            return SgfTree(root_properties, children)
    
        input_string = input_string.strip()
        if not input_string:
            raise ValueError("tree missing")
        if any(char.islower() for char in re.findall(r'[A-Za-z]', input_string)):
>           raise ValueError("property must be in uppercase")
E           ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:67: ValueError
_ SgfParsingTest.test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces>

    def test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces(
        self,
    ):
        input_string = "(;A[hello\t\tworld])"
        expected = SgfTree(properties={"A": ["hello  world"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;A[hello\t\tworld])'

    def parse(input_string):
        def unescape(value):
            # Handle escape sequences according to SGF specification
            return value.replace('\\\\', '\\').replace('\\]', ']')
    
        def split_properties(properties_string):
            # Split the properties by closing brackets followed by uppercase letters
            return re.split(r'(?<=\])(?=[A-Z])', properties_string)
    
        def parse_node(node_string):
            # Extract properties from a node string
            properties = re.findall(r'([A-Z]+)((?:\[.*?[^\\]\])+)', node_string)
            if not properties:
                raise ValueError("tree with no nodes")
            parsed_properties = {}
            for key, values in properties:
                value_list = re.findall(r'\[(.*?[^\\])\]', values)
                parsed_properties[key] = [unescape(value) for value in value_list]
            return parsed_properties
    
        def parse_tree(tree_string):
            # Parse the tree recursively
            if not tree_string.startswith('(') or not tree_string.endswith(')'):
                raise ValueError("tree missing")
            tree_string = tree_string[1:-1].strip()
            if not tree_string:
                raise ValueError("tree with no nodes")
            subtrees = re.split(r'(?<=\))(?=\()', tree_string)
            nodes = split_properties(subtrees[0])
            root_properties = parse_node(nodes[0])
            children = [parse_tree(subtree) for subtree in subtrees[1:]]
            return SgfTree(root_properties, children)
    
        input_string = input_string.strip()
        if not input_string:
            raise ValueError("tree missing")
        if any(char.islower() for char in re.findall(r'[A-Za-z]', input_string)):
>           raise ValueError("property must be in uppercase")
E           ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:67: ValueError
=========================== short test summary info ============================
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_backslash_in_property_value_becomes_just_a_backslash
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_newline_in_property_value_is_converted_to_nothing_at_all
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_tab_in_property_value_is_converted_to_space
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_multiple_properties
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_multiple_property_values
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_node_without_properties
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_parentheses_in_property_value_don_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_properties_without_delimiter
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_semicolon_in_property_value_doesn_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_two_child_trees
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_two_nodes
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_within_property_values_newlines_remain_as_newlines
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces
========================= 16 failed, 7 passed in 0.15s =========================
