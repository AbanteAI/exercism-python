============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 23 items

exercises/practice/sgf-parsing/sgf_parsing_test.py ...FFFFF.FF.FFFF..FF. [ 91%]
.F                                                                       [100%]

=================================== FAILURES ===================================
_ SgfParsingTest.test_escaped_closing_bracket_within_property_value_becomes_just_a_closing_bracket _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_closing_bracket_within_property_value_becomes_just_a_closing_bracket>

    def test_escaped_closing_bracket_within_property_value_becomes_just_a_closing_bracket(
        self,
    ):
        input_string = "(;A[\\]])"
        expected = SgfTree(properties={"A": ["]"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f1630eb83d0> != <sgf_parsing.SgfTree object at 0x7f1630eb83a0>

exercises/practice/sgf-parsing/sgf_parsing_test.py:106: AssertionError
_ SgfParsingTest.test_escaped_newline_in_property_value_is_converted_to_nothing_at_all _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_newline_in_property_value_is_converted_to_nothing_at_all>

    def test_escaped_newline_in_property_value_is_converted_to_nothing_at_all(self):
        input_string = "(;A[hello\\\nworld])"
        expected = SgfTree(properties={"A": ["helloworld"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f16316e1f00> != <sgf_parsing.SgfTree object at 0x7f16316e2320>

exercises/practice/sgf-parsing/sgf_parsing_test.py:145: AssertionError
_ SgfParsingTest.test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace>

    def test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace(self):
        input_string = "(;A[\\t = t and \\n = n])"
        expected = SgfTree(properties={"A": ["t = t and n = n"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f1630f3ec20> != <sgf_parsing.SgfTree object at 0x7f1630f3edd0>

exercises/practice/sgf-parsing/sgf_parsing_test.py:150: AssertionError
___ SgfParsingTest.test_escaped_tab_in_property_value_is_converted_to_space ____

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_tab_in_property_value_is_converted_to_space>

    def test_escaped_tab_in_property_value_is_converted_to_space(self):
        input_string = "(;A[hello\\\tworld])"
        expected = SgfTree(properties={"A": ["hello world"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f1630f37640> != <sgf_parsing.SgfTree object at 0x7f1630f376d0>

exercises/practice/sgf-parsing/sgf_parsing_test.py:140: AssertionError
_ SgfParsingTest.test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value>

    def test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value(
        self,
    ):
        input_string = "(;A[\\]b\nc\\\nd\t\te\\\\ \\\n\\]])"
        expected = SgfTree(properties={"A": ["]b\ncd  e\\ ]"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = ';A[\\]b\nc\\\nd\t\te\\\\ \\\n\\]]'

    def parse(input_string):
        if not input_string:
            raise ValueError("tree missing")
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node_properties = None
    
        parts = input_string.split(';')
        for part in parts:
            if part.startswith('('):
                children.append(parse(part))
            elif part:
                key_values = part.split(']')
                for key_value in key_values:
                    if not key_value:
                        continue
>                   key, value = key_value.split('[', 1)
E                   ValueError: not enough values to unpack (expected 2, got 1)

exercises/practice/sgf-parsing/sgf_parsing.py:48: ValueError
_________________ SgfParsingTest.test_multiple_property_values _________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_multiple_property_values>

    def test_multiple_property_values(self):
        input_string = "(;A[b][c][d])"
        expected = SgfTree(properties={"A": ["b", "c", "d"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = ';A[b][c][d]'

    def parse(input_string):
        if not input_string:
            raise ValueError("tree missing")
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node_properties = None
    
        parts = input_string.split(';')
        for part in parts:
            if part.startswith('('):
                children.append(parse(part))
            elif part:
                key_values = part.split(']')
                for key_value in key_values:
                    if not key_value:
                        continue
                    key, value = key_value.split('[', 1)
                    if not key.isupper():
>                       raise ValueError("property must be in uppercase")
E                       ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:50: ValueError
_________________ SgfParsingTest.test_node_without_properties __________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_node_without_properties>

    def test_node_without_properties(self):
        input_string = "(;)"
        expected = SgfTree()
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = ';'

    def parse(input_string):
        if not input_string:
            raise ValueError("tree missing")
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node_properties = None
    
        parts = input_string.split(';')
        for part in parts:
            if part.startswith('('):
                children.append(parse(part))
            elif part:
                key_values = part.split(']')
                for key_value in key_values:
                    if not key_value:
                        continue
                    key, value = key_value.split('[', 1)
                    if not key.isupper():
                        raise ValueError("property must be in uppercase")
                    if '\\' in value:
                        value = value.replace('\\\\', '\\').replace('\\]', ']')
                    if current_node_properties is not None:
                        properties = current_node_properties
                        current_node_properties = None
                    if key in properties:
                        properties[key].append(value)
                    else:
                        properties[key] = [value]
            elif current_node_properties is not None:
>               raise ValueError("tree with no nodes")
E               ValueError: tree with no nodes

exercises/practice/sgf-parsing/sgf_parsing.py:61: ValueError
_ SgfParsingTest.test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped>

    def test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped(self):
        input_string = "(;A[x[y\\]z][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["x[y]z", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = ';A[x[y\\]z][foo]B[bar];C[baz]'

    def parse(input_string):
        if not input_string:
            raise ValueError("tree missing")
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node_properties = None
    
        parts = input_string.split(';')
        for part in parts:
            if part.startswith('('):
                children.append(parse(part))
            elif part:
                key_values = part.split(']')
                for key_value in key_values:
                    if not key_value:
                        continue
>                   key, value = key_value.split('[', 1)
E                   ValueError: not enough values to unpack (expected 2, got 1)

exercises/practice/sgf-parsing/sgf_parsing.py:48: ValueError
__ SgfParsingTest.test_parentheses_in_property_value_don_t_need_to_be_escaped __

self = <sgf_parsing_test.SgfParsingTest testMethod=test_parentheses_in_property_value_don_t_need_to_be_escaped>

    def test_parentheses_in_property_value_don_t_need_to_be_escaped(self):
        input_string = "(;A[x(y)z][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["x(y)z", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = ';A[x(y)z][foo]B[bar];C[baz]'

    def parse(input_string):
        if not input_string:
            raise ValueError("tree missing")
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node_properties = None
    
        parts = input_string.split(';')
        for part in parts:
            if part.startswith('('):
                children.append(parse(part))
            elif part:
                key_values = part.split(']')
                for key_value in key_values:
                    if not key_value:
                        continue
                    key, value = key_value.split('[', 1)
                    if not key.isupper():
>                       raise ValueError("property must be in uppercase")
E                       ValueError: property must be in uppercase

exercises/practice/sgf-parsing/sgf_parsing.py:50: ValueError
_______________ SgfParsingTest.test_properties_without_delimiter _______________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_properties_without_delimiter>

    def test_properties_without_delimiter(self):
        input_string = "(;A)"
        with self.assertRaises(ValueError) as err:
            parse(input_string)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "properties without delimiter")
E       AssertionError: 'not enough values to unpack (expected 2, got 1)' != 'properties without delimiter'
E       - not enough values to unpack (expected 2, got 1)
E       + properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing_test.py:55: AssertionError
__ SgfParsingTest.test_semicolon_in_property_value_doesn_t_need_to_be_escaped __

self = <sgf_parsing_test.SgfParsingTest testMethod=test_semicolon_in_property_value_doesn_t_need_to_be_escaped>

    def test_semicolon_in_property_value_doesn_t_need_to_be_escaped(self):
        input_string = "(;A[a;b][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["a;b", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = ';A[a;b][foo]B[bar];C[baz]'

    def parse(input_string):
        if not input_string:
            raise ValueError("tree missing")
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node_properties = None
    
        parts = input_string.split(';')
        for part in parts:
            if part.startswith('('):
                children.append(parse(part))
            elif part:
                key_values = part.split(']')
                for key_value in key_values:
                    if not key_value:
                        continue
>                   key, value = key_value.split('[', 1)
E                   ValueError: not enough values to unpack (expected 2, got 1)

exercises/practice/sgf-parsing/sgf_parsing.py:48: ValueError
_____________________ SgfParsingTest.test_two_child_trees ______________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_two_child_trees>

    def test_two_child_trees(self):
        input_string = "(;A[B](;B[C])(;C[D]))"
        expected = SgfTree(
            properties={"A": ["B"]},
            children=[SgfTree({"B": ["C"]}), SgfTree({"C": ["D"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = ';A[B](;B[C])(;C[D]'

    def parse(input_string):
        if not input_string:
            raise ValueError("tree missing")
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string.strip('()')
        properties = {}
        children = []
        current_node_properties = None
    
        parts = input_string.split(';')
        for part in parts:
            if part.startswith('('):
                children.append(parse(part))
            elif part:
                key_values = part.split(']')
                for key_value in key_values:
                    if not key_value:
                        continue
>                   key, value = key_value.split('[', 1)
E                   ValueError: not enough values to unpack (expected 2, got 1)

exercises/practice/sgf-parsing/sgf_parsing.py:48: ValueError
________________________ SgfParsingTest.test_two_nodes _________________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_two_nodes>

    def test_two_nodes(self):
        input_string = "(;A[B];B[C])"
        expected = SgfTree(properties={"A": ["B"]}, children=[SgfTree({"B": ["C"]})])
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f1630f360e0> != <sgf_parsing.SgfTree object at 0x7f1630f35570>

exercises/practice/sgf-parsing/sgf_parsing_test.py:74: AssertionError
_ SgfParsingTest.test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces>

    def test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces(
        self,
    ):
        input_string = "(;A[hello\t\tworld])"
        expected = SgfTree(properties={"A": ["hello  world"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7f1630f44d00> != <sgf_parsing.SgfTree object at 0x7f1630f448b0>

exercises/practice/sgf-parsing/sgf_parsing_test.py:94: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_closing_bracket_within_property_value_becomes_just_a_closing_bracket
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_newline_in_property_value_is_converted_to_nothing_at_all
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_tab_in_property_value_is_converted_to_space
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_multiple_property_values
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_node_without_properties
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_parentheses_in_property_value_don_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_properties_without_delimiter
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_semicolon_in_property_value_doesn_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_two_child_trees
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_two_nodes
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces
========================= 14 failed, 9 passed in 0.11s =========================
