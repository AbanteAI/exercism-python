============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 23 items

exercises/practice/sgf-parsing/sgf_parsing_test.py .....FFF.F..FF.F..FF. [ 91%]
FF                                                                       [100%]

=================================== FAILURES ===================================
_ SgfParsingTest.test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace>

    def test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace(self):
        input_string = "(;A[\\t = t and \\n = n])"
        expected = SgfTree(properties={"A": ["t = t and n = n"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7fb0d05c01c0> != <sgf_parsing.SgfTree object at 0x7fb0d05c01f0>

exercises/practice/sgf-parsing/sgf_parsing_test.py:150: AssertionError
___ SgfParsingTest.test_escaped_tab_in_property_value_is_converted_to_space ____

self = <sgf_parsing_test.SgfParsingTest testMethod=test_escaped_tab_in_property_value_is_converted_to_space>

    def test_escaped_tab_in_property_value_is_converted_to_space(self):
        input_string = "(;A[hello\\\tworld])"
        expected = SgfTree(properties={"A": ["hello world"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7fb0d044f4f0> != <sgf_parsing.SgfTree object at 0x7fb0d044f490>

exercises/practice/sgf-parsing/sgf_parsing_test.py:140: AssertionError
_ SgfParsingTest.test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value>

    def test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value(
        self,
    ):
        input_string = "(;A[\\]b\nc\\\nd\t\te\\\\ \\\n\\]])"
        expected = SgfTree(properties={"A": ["]b\ncd  e\\ ]"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7fb0d044a200> != <sgf_parsing.SgfTree object at 0x7fb0d044a260>

exercises/practice/sgf-parsing/sgf_parsing_test.py:157: AssertionError
_________________ SgfParsingTest.test_multiple_property_values _________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_multiple_property_values>

    def test_multiple_property_values(self):
        input_string = "(;A[b][c][d])"
        expected = SgfTree(properties={"A": ["b", "c", "d"]})
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '[c][d]'

    def parse(input_string):
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string[1:-1].strip()
    
        if not input_string.startswith(';'):
            raise ValueError("tree with no nodes")
    
        input_string = input_string[1:]
    
        properties_pattern = re.compile(r'([A-Za-z]+)\[((?:\\\\|\\\]|[^]])+)\]')
        properties = {}
        children = []
    
        while input_string:
            match = properties_pattern.match(input_string)
            if not match:
>               raise ValueError("properties without delimiter")
E               ValueError: properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing.py:48: ValueError
_ SgfParsingTest.test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped>

    def test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped(self):
        input_string = "(;A[x[y\\]z][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["x[y]z", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '[foo]B[bar];C[baz]'

    def parse(input_string):
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string[1:-1].strip()
    
        if not input_string.startswith(';'):
            raise ValueError("tree with no nodes")
    
        input_string = input_string[1:]
    
        properties_pattern = re.compile(r'([A-Za-z]+)\[((?:\\\\|\\\]|[^]])+)\]')
        properties = {}
        children = []
    
        while input_string:
            match = properties_pattern.match(input_string)
            if not match:
>               raise ValueError("properties without delimiter")
E               ValueError: properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing.py:48: ValueError
__ SgfParsingTest.test_parentheses_in_property_value_don_t_need_to_be_escaped __

self = <sgf_parsing_test.SgfParsingTest testMethod=test_parentheses_in_property_value_don_t_need_to_be_escaped>

    def test_parentheses_in_property_value_don_t_need_to_be_escaped(self):
        input_string = "(;A[x(y)z][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["x(y)z", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '[foo]B[bar];C[baz]'

    def parse(input_string):
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string[1:-1].strip()
    
        if not input_string.startswith(';'):
            raise ValueError("tree with no nodes")
    
        input_string = input_string[1:]
    
        properties_pattern = re.compile(r'([A-Za-z]+)\[((?:\\\\|\\\]|[^]])+)\]')
        properties = {}
        children = []
    
        while input_string:
            match = properties_pattern.match(input_string)
            if not match:
>               raise ValueError("properties without delimiter")
E               ValueError: properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing.py:48: ValueError
__ SgfParsingTest.test_semicolon_in_property_value_doesn_t_need_to_be_escaped __

self = <sgf_parsing_test.SgfParsingTest testMethod=test_semicolon_in_property_value_doesn_t_need_to_be_escaped>

    def test_semicolon_in_property_value_doesn_t_need_to_be_escaped(self):
        input_string = "(;A[a;b][foo]B[bar];C[baz])"
        expected = SgfTree(
            properties={"A": ["a;b", "foo"], "B": ["bar"]},
            children=[SgfTree({"C": ["baz"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '[foo]B[bar];C[baz]'

    def parse(input_string):
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string[1:-1].strip()
    
        if not input_string.startswith(';'):
            raise ValueError("tree with no nodes")
    
        input_string = input_string[1:]
    
        properties_pattern = re.compile(r'([A-Za-z]+)\[((?:\\\\|\\\]|[^]])+)\]')
        properties = {}
        children = []
    
        while input_string:
            match = properties_pattern.match(input_string)
            if not match:
>               raise ValueError("properties without delimiter")
E               ValueError: properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing.py:48: ValueError
_____________________ SgfParsingTest.test_two_child_trees ______________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_two_child_trees>

    def test_two_child_trees(self):
        input_string = "(;A[B](;B[C])(;C[D]))"
        expected = SgfTree(
            properties={"A": ["B"]},
            children=[SgfTree({"B": ["C"]}), SgfTree({"C": ["D"]})],
        )
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = '(;B[C])(;C[D])'

    def parse(input_string):
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string[1:-1].strip()
    
        if not input_string.startswith(';'):
            raise ValueError("tree with no nodes")
    
        input_string = input_string[1:]
    
        properties_pattern = re.compile(r'([A-Za-z]+)\[((?:\\\\|\\\]|[^]])+)\]')
        properties = {}
        children = []
    
        while input_string:
            match = properties_pattern.match(input_string)
            if not match:
>               raise ValueError("properties without delimiter")
E               ValueError: properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing.py:48: ValueError
________________________ SgfParsingTest.test_two_nodes _________________________

self = <sgf_parsing_test.SgfParsingTest testMethod=test_two_nodes>

    def test_two_nodes(self):
        input_string = "(;A[B];B[C])"
        expected = SgfTree(properties={"A": ["B"]}, children=[SgfTree({"B": ["C"]})])
>       self.assertEqual(parse(input_string), expected)

exercises/practice/sgf-parsing/sgf_parsing_test.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_string = ';B[C]'

    def parse(input_string):
        if not input_string.startswith('(') or not input_string.endswith(')'):
            raise ValueError("tree missing")
    
        input_string = input_string[1:-1].strip()
    
        if not input_string.startswith(';'):
            raise ValueError("tree with no nodes")
    
        input_string = input_string[1:]
    
        properties_pattern = re.compile(r'([A-Za-z]+)\[((?:\\\\|\\\]|[^]])+)\]')
        properties = {}
        children = []
    
        while input_string:
            match = properties_pattern.match(input_string)
            if not match:
>               raise ValueError("properties without delimiter")
E               ValueError: properties without delimiter

exercises/practice/sgf-parsing/sgf_parsing.py:48: ValueError
____ SgfParsingTest.test_within_property_values_newlines_remain_as_newlines ____

self = <sgf_parsing_test.SgfParsingTest testMethod=test_within_property_values_newlines_remain_as_newlines>

    def test_within_property_values_newlines_remain_as_newlines(self):
        input_string = "(;A[hello\n\nworld])"
        expected = SgfTree(properties={"A": ["hello\n\nworld"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7fb0d06295d0> != <sgf_parsing.SgfTree object at 0x7fb0d06292d0>

exercises/practice/sgf-parsing/sgf_parsing_test.py:99: AssertionError
_ SgfParsingTest.test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces _

self = <sgf_parsing_test.SgfParsingTest testMethod=test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces>

    def test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces(
        self,
    ):
        input_string = "(;A[hello\t\tworld])"
        expected = SgfTree(properties={"A": ["hello  world"]})
>       self.assertEqual(parse(input_string), expected)
E       AssertionError: <sgf_parsing.SgfTree object at 0x7fb0d0441510> != <sgf_parsing.SgfTree object at 0x7fb0d0441690>

exercises/practice/sgf-parsing/sgf_parsing_test.py:94: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_escaped_tab_in_property_value_is_converted_to_space
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_multiple_property_values
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_parentheses_in_property_value_don_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_semicolon_in_property_value_doesn_t_need_to_be_escaped
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_two_child_trees
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_two_nodes
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_within_property_values_newlines_remain_as_newlines
FAILED exercises/practice/sgf-parsing/sgf_parsing_test.py::SgfParsingTest::test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces
======================== 11 failed, 12 passed in 0.08s =========================
