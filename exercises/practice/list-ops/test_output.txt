============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1, asyncio-0.21.1
asyncio: mode=strict
collected 24 items

exercises/practice/list-ops/list_ops_test.py ....FFFFFFFFFFFFFFFFFFFF    [100%]

=================================== FAILURES ===================================
______________________ ListOpsTest.test_concat_empty_list ______________________

self = <list_ops_test.ListOpsTest testMethod=test_concat_empty_list>

    def test_concat_empty_list(self):
>       self.assertEqual(concat([]), [])
E       AssertionError: None != []

exercises/practice/list-ops/list_ops_test.py:33: AssertionError
____________________ ListOpsTest.test_concat_list_of_lists _____________________

self = <list_ops_test.ListOpsTest testMethod=test_concat_list_of_lists>

    def test_concat_list_of_lists(self):
>       self.assertEqual(concat([[1, 2], [3], [], [4, 5, 6]]), [1, 2, 3, 4, 5, 6])
E       AssertionError: None != [1, 2, 3, 4, 5, 6]

exercises/practice/list-ops/list_ops_test.py:36: AssertionError
_________________ ListOpsTest.test_concat_list_of_nested_lists _________________

self = <list_ops_test.ListOpsTest testMethod=test_concat_list_of_nested_lists>

    def test_concat_list_of_nested_lists(self):
>       self.assertEqual(
            concat([[[1], [2]], [[3]], [[]], [[4, 5, 6]]]),
            [[1], [2], [3], [], [4, 5, 6]],
        )
E       AssertionError: None != [[1], [2], [3], [], [4, 5, 6]]

exercises/practice/list-ops/list_ops_test.py:39: AssertionError
______________________ ListOpsTest.test_filter_empty_list ______________________

self = <list_ops_test.ListOpsTest testMethod=test_filter_empty_list>

    def test_filter_empty_list(self):
>       self.assertEqual(list_ops_filter(lambda x: x % 2 == 1, []), [])
E       AssertionError: None != []

exercises/practice/list-ops/list_ops_test.py:45: AssertionError
____________________ ListOpsTest.test_filter_non_empty_list ____________________

self = <list_ops_test.ListOpsTest testMethod=test_filter_non_empty_list>

    def test_filter_non_empty_list(self):
>       self.assertEqual(list_ops_filter(lambda x: x % 2 == 1, [1, 2, 3, 5]), [1, 3, 5])
E       AssertionError: None != [1, 3, 5]

exercises/practice/list-ops/list_ops_test.py:48: AssertionError
_ ListOpsTest.test_foldl_direction_dependent_function_applied_to_non_empty_list _

self = <list_ops_test.ListOpsTest testMethod=test_foldl_direction_dependent_function_applied_to_non_empty_list>

    def test_foldl_direction_dependent_function_applied_to_non_empty_list(self):
>       self.assertEqual(foldl(lambda acc, el: el / acc, [1, 2, 3, 4], 24), 64)
E       AssertionError: None != 64

exercises/practice/list-ops/list_ops_test.py:69: AssertionError
_ ListOpsTest.test_foldl_direction_independent_function_applied_to_non_empty_list _

self = <list_ops_test.ListOpsTest testMethod=test_foldl_direction_independent_function_applied_to_non_empty_list>

    def test_foldl_direction_independent_function_applied_to_non_empty_list(self):
>       self.assertEqual(foldl(lambda acc, el: el + acc, [1, 2, 3, 4], 5), 15)
E       AssertionError: None != 15

exercises/practice/list-ops/list_ops_test.py:66: AssertionError
______________________ ListOpsTest.test_foldl_empty_list _______________________

self = <list_ops_test.ListOpsTest testMethod=test_foldl_empty_list>

    def test_foldl_empty_list(self):
>       self.assertEqual(foldl(lambda acc, el: el * acc, [], 2), 2)
E       AssertionError: None != 2

exercises/practice/list-ops/list_ops_test.py:63: AssertionError
_ ListOpsTest.test_foldr_direction_dependent_function_applied_to_non_empty_list _

self = <list_ops_test.ListOpsTest testMethod=test_foldr_direction_dependent_function_applied_to_non_empty_list>

    def test_foldr_direction_dependent_function_applied_to_non_empty_list(self):
>       self.assertEqual(foldr(lambda acc, el: el / acc, [1, 2, 3, 4], 24), 9)
E       AssertionError: None != 9

exercises/practice/list-ops/list_ops_test.py:78: AssertionError
_ ListOpsTest.test_foldr_direction_independent_function_applied_to_non_empty_list _

self = <list_ops_test.ListOpsTest testMethod=test_foldr_direction_independent_function_applied_to_non_empty_list>

    def test_foldr_direction_independent_function_applied_to_non_empty_list(self):
>       self.assertEqual(foldr(lambda acc, el: el + acc, [1, 2, 3, 4], 5), 15)
E       AssertionError: None != 15

exercises/practice/list-ops/list_ops_test.py:75: AssertionError
______________________ ListOpsTest.test_foldr_empty_list _______________________

self = <list_ops_test.ListOpsTest testMethod=test_foldr_empty_list>

    def test_foldr_empty_list(self):
>       self.assertEqual(foldr(lambda acc, el: el * acc, [], 2), 2)
E       AssertionError: None != 2

exercises/practice/list-ops/list_ops_test.py:72: AssertionError
___________________ ListOpsTest.test_foldr_foldr_add_string ____________________

self = <list_ops_test.ListOpsTest testMethod=test_foldr_foldr_add_string>

    def test_foldr_foldr_add_string(self):
>       self.assertEqual(
            foldr(
                lambda acc, el: el + acc, ["e", "x", "e", "r", "c", "i", "s", "m"], "!"
            ),
            "exercism!",
        )
E       AssertionError: None != 'exercism!'

exercises/practice/list-ops/list_ops_test.py:94: AssertionError
______________________ ListOpsTest.test_length_empty_list ______________________

self = <list_ops_test.ListOpsTest testMethod=test_length_empty_list>

    def test_length_empty_list(self):
>       self.assertEqual(length([]), 0)
E       AssertionError: None != 0

exercises/practice/list-ops/list_ops_test.py:51: AssertionError
____________________ ListOpsTest.test_length_non_empty_list ____________________

self = <list_ops_test.ListOpsTest testMethod=test_length_non_empty_list>

    def test_length_non_empty_list(self):
>       self.assertEqual(length([1, 2, 3, 4]), 4)
E       AssertionError: None != 4

exercises/practice/list-ops/list_ops_test.py:54: AssertionError
_______________________ ListOpsTest.test_map_empty_list ________________________

self = <list_ops_test.ListOpsTest testMethod=test_map_empty_list>

    def test_map_empty_list(self):
>       self.assertEqual(list_ops_map(lambda x: x + 1, []), [])
E       AssertionError: None != []

exercises/practice/list-ops/list_ops_test.py:57: AssertionError
_____________________ ListOpsTest.test_map_non_empty_list ______________________

self = <list_ops_test.ListOpsTest testMethod=test_map_non_empty_list>

    def test_map_non_empty_list(self):
>       self.assertEqual(list_ops_map(lambda x: x + 1, [1, 3, 5, 7]), [2, 4, 6, 8])
E       AssertionError: None != [2, 4, 6, 8]

exercises/practice/list-ops/list_ops_test.py:60: AssertionError
_____________________ ListOpsTest.test_reverse_empty_list ______________________

self = <list_ops_test.ListOpsTest testMethod=test_reverse_empty_list>

    def test_reverse_empty_list(self):
>       self.assertEqual(reverse([]), [])
E       AssertionError: None != []

exercises/practice/list-ops/list_ops_test.py:81: AssertionError
___________ ListOpsTest.test_reverse_list_of_lists_is_not_flattened ____________

self = <list_ops_test.ListOpsTest testMethod=test_reverse_list_of_lists_is_not_flattened>

    def test_reverse_list_of_lists_is_not_flattened(self):
>       self.assertEqual(
            reverse([[1, 2], [3], [], [4, 5, 6]]), [[4, 5, 6], [], [3], [1, 2]]
        )
E       AssertionError: None != [[4, 5, 6], [], [3], [1, 2]]

exercises/practice/list-ops/list_ops_test.py:87: AssertionError
___________________ ListOpsTest.test_reverse_non_empty_list ____________________

self = <list_ops_test.ListOpsTest testMethod=test_reverse_non_empty_list>

    def test_reverse_non_empty_list(self):
>       self.assertEqual(reverse([1, 3, 5, 7]), [7, 5, 3, 1])
E       AssertionError: None != [7, 5, 3, 1]

exercises/practice/list-ops/list_ops_test.py:84: AssertionError
_________________ ListOpsTest.test_reverse_reverse_mixed_types _________________

self = <list_ops_test.ListOpsTest testMethod=test_reverse_reverse_mixed_types>

    def test_reverse_reverse_mixed_types(self):
>       self.assertEqual(reverse(["xyz", 4.0, "cat", 1]), [1, "cat", 4.0, "xyz"])
E       AssertionError: None != [1, 'cat', 4.0, 'xyz']

exercises/practice/list-ops/list_ops_test.py:102: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_concat_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_concat_list_of_lists
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_concat_list_of_nested_lists
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_filter_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_filter_non_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_foldl_direction_dependent_function_applied_to_non_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_foldl_direction_independent_function_applied_to_non_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_foldl_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_foldr_direction_dependent_function_applied_to_non_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_foldr_direction_independent_function_applied_to_non_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_foldr_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_foldr_foldr_add_string
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_length_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_length_non_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_map_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_map_non_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_reverse_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_reverse_list_of_lists_is_not_flattened
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_reverse_non_empty_list
FAILED exercises/practice/list-ops/list_ops_test.py::ListOpsTest::test_reverse_reverse_mixed_types
========================= 20 failed, 4 passed in 0.10s =========================
