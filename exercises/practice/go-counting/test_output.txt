============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 11 items

exercises/practice/go-counting/go_counting_test.py FFFFFFFF..F           [100%]

=================================== FAILURES ===================================
_________ GoCountingTest.test_a_stone_and_not_a_territory_on_5x5_board _________

self = <go_counting_test.GoCountingTest testMethod=test_a_stone_and_not_a_territory_on_5x5_board>

    def test_a_stone_and_not_a_territory_on_5x5_board(self):
        board = Board(["  B  ", " B B ", "B W B", " W W ", "  W  "])
        stone, territory = board.territory(x=1, y=1)
>       self.assertEqual(stone, NONE)
E       AssertionError: 'B' != ''
E       - B
E       +

exercises/practice/go-counting/go_counting_test.py:37: AssertionError
___________ GoCountingTest.test_black_corner_territory_on_5x5_board ____________

self = <go_counting_test.GoCountingTest testMethod=test_black_corner_territory_on_5x5_board>

    def test_black_corner_territory_on_5x5_board(self):
        board = Board(["  B  ", " B B ", "B W B", " W W ", "  W  "])
        stone, territory = board.territory(x=0, y=1)
        self.assertEqual(stone, BLACK)
>       self.assertSetEqual(territory, {(0, 0), (0, 1), (1, 0)})
E       AssertionError: Items in the first set but not the second:
E       (0, 2)
E       Items in the second set but not the first:
E       (1, 0)
E       (0, 0)

exercises/practice/go-counting/go_counting_test.py:20: AssertionError
_______ GoCountingTest.test_invalid_because_x_is_too_high_for_5x5_board ________

self = <go_counting_test.GoCountingTest testMethod=test_invalid_because_x_is_too_high_for_5x5_board>

    def test_invalid_because_x_is_too_high_for_5x5_board(self):
        board = Board(["  B  ", " B B ", "B W B", " W W ", "  W  "])
        with self.assertRaises(ValueError) as err:
>           board.territory(x=5, y=1)

exercises/practice/go-counting/go_counting_test.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def territory(self, x, y):
        """Find the owner and the territories given a coordinate on
           the board
    
        Args:
            x (int): Column on the board
            y (int): Row on the board
    
        Returns:
            (str, set): A tuple, the first element being the owner
                        of that area.  One of "W", "B", "".  The
                        second being a set of coordinates, representing
                        the owner's territories.
        """
>       owner = self.board[y][x]
E       IndexError: string index out of range

exercises/practice/go-counting/go_counting.py:29: IndexError
________ GoCountingTest.test_invalid_because_x_is_too_low_for_5x5_board ________

self = <go_counting_test.GoCountingTest testMethod=test_invalid_because_x_is_too_low_for_5x5_board>

    def test_invalid_because_x_is_too_low_for_5x5_board(self):
        board = Board(["  B  ", " B B ", "B W B", " W W ", "  W  "])
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/go-counting/go_counting_test.py:42: AssertionError
_______ GoCountingTest.test_invalid_because_y_is_too_high_for_5x5_board ________

self = <go_counting_test.GoCountingTest testMethod=test_invalid_because_y_is_too_high_for_5x5_board>

    def test_invalid_because_y_is_too_high_for_5x5_board(self):
        board = Board(["  B  ", " B B ", "B W B", " W W ", "  W  "])
        with self.assertRaises(ValueError) as err:
>           board.territory(x=1, y=5)

exercises/practice/go-counting/go_counting_test.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def territory(self, x, y):
        """Find the owner and the territories given a coordinate on
           the board
    
        Args:
            x (int): Column on the board
            y (int): Row on the board
    
        Returns:
            (str, set): A tuple, the first element being the owner
                        of that area.  One of "W", "B", "".  The
                        second being a set of coordinates, representing
                        the owner's territories.
        """
>       owner = self.board[y][x]
E       IndexError: list index out of range

exercises/practice/go-counting/go_counting.py:29: IndexError
________ GoCountingTest.test_invalid_because_y_is_too_low_for_5x5_board ________

self = <go_counting_test.GoCountingTest testMethod=test_invalid_because_y_is_too_low_for_5x5_board>

    def test_invalid_because_y_is_too_low_for_5x5_board(self):
        board = Board(["  B  ", " B B ", "B W B", " W W ", "  W  "])
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/go-counting/go_counting_test.py:56: AssertionError
_____________ GoCountingTest.test_one_territory_is_the_whole_board _____________

self = <go_counting_test.GoCountingTest testMethod=test_one_territory_is_the_whole_board>

    def test_one_territory_is_the_whole_board(self):
        board = Board([" "])
>       territories = board.territories()

exercises/practice/go-counting/go_counting_test.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <go_counting.Board object at 0x7f5348d02b90>

    def territories(self):
        """Find the owners and the territories of the whole board
    
        Args:
            none
    
        Returns:
            dict(str, set): A dictionary whose key being the owner
                        , i.e. "W", "B", "".  The value being a set
                        of coordinates owned by the owner.
        """
        result = {'W': set(), 'B': set(), '': set()}
        for y in range(len(self.board)):
            for x in range(len(self.board[y])):
                if (x, y) not in (result['W'] | result['B'] | result['']):
                    owner, territories = self.territory(x, y)
>                   result[owner].update(territories)
E                   KeyError: ' '

exercises/practice/go-counting/go_counting.py:73: KeyError
____________ GoCountingTest.test_open_corner_territory_on_5x5_board ____________

self = <go_counting_test.GoCountingTest testMethod=test_open_corner_territory_on_5x5_board>

    def test_open_corner_territory_on_5x5_board(self):
        board = Board(["  B  ", " B B ", "B W B", " W W ", "  W  "])
        stone, territory = board.territory(x=1, y=4)
>       self.assertEqual(stone, NONE)
E       AssertionError: 'W' != ''
E       - W
E       +

exercises/practice/go-counting/go_counting_test.py:31: AssertionError
___________ GoCountingTest.test_white_center_territory_on_5x5_board ____________

self = <go_counting_test.GoCountingTest testMethod=test_white_center_territory_on_5x5_board>

    def test_white_center_territory_on_5x5_board(self):
        board = Board(["  B  ", " B B ", "B W B", " W W ", "  W  "])
        stone, territory = board.territory(x=2, y=3)
        self.assertEqual(stone, WHITE)
>       self.assertSetEqual(territory, {(2, 3)})
E       AssertionError: Items in the first set but not the second:
E       (2, 4)
E       (1, 3)
E       (2, 2)

exercises/practice/go-counting/go_counting_test.py:26: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/go-counting/go_counting_test.py::GoCountingTest::test_a_stone_and_not_a_territory_on_5x5_board
FAILED exercises/practice/go-counting/go_counting_test.py::GoCountingTest::test_black_corner_territory_on_5x5_board
FAILED exercises/practice/go-counting/go_counting_test.py::GoCountingTest::test_invalid_because_x_is_too_high_for_5x5_board
FAILED exercises/practice/go-counting/go_counting_test.py::GoCountingTest::test_invalid_because_x_is_too_low_for_5x5_board
FAILED exercises/practice/go-counting/go_counting_test.py::GoCountingTest::test_invalid_because_y_is_too_high_for_5x5_board
FAILED exercises/practice/go-counting/go_counting_test.py::GoCountingTest::test_invalid_because_y_is_too_low_for_5x5_board
FAILED exercises/practice/go-counting/go_counting_test.py::GoCountingTest::test_one_territory_is_the_whole_board
FAILED exercises/practice/go-counting/go_counting_test.py::GoCountingTest::test_open_corner_territory_on_5x5_board
FAILED exercises/practice/go-counting/go_counting_test.py::GoCountingTest::test_white_center_territory_on_5x5_board
========================= 9 failed, 2 passed in 0.07s ==========================
