============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 19 items

exercises/practice/isbn-verifier/isbn_verifier_test.py .....FF.....F..FF [ 89%]
FF                                                                       [100%]

=================================== FAILURES ===================================
____ IsbnVerifierTest.test_invalid_character_in_isbn_is_not_treated_as_zero ____

self = <isbn_verifier_test.IsbnVerifierTest testMethod=test_invalid_character_in_isbn_is_not_treated_as_zero>

    def test_invalid_character_in_isbn_is_not_treated_as_zero(self):
>       self.assertIs(is_valid("3-598-P1581-X"), False)

exercises/practice/isbn-verifier/isbn_verifier_test.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/isbn-verifier/isbn_verifier.py:15: in is_valid
    digits = [int(d) for d in isbn[:-1]]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <str_iterator object at 0x7f96694ccc40>

>   digits = [int(d) for d in isbn[:-1]]
E   ValueError: invalid literal for int() with base 10: 'P'

exercises/practice/isbn-verifier/isbn_verifier.py:15: ValueError
_ IsbnVerifierTest.test_invalid_characters_are_not_ignored_after_checking_length _

self = <isbn_verifier_test.IsbnVerifierTest testMethod=test_invalid_characters_are_not_ignored_after_checking_length>

    def test_invalid_characters_are_not_ignored_after_checking_length(self):
>       self.assertIs(is_valid("3132P34035"), False)

exercises/practice/isbn-verifier/isbn_verifier_test.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/isbn-verifier/isbn_verifier.py:15: in is_valid
    digits = [int(d) for d in isbn[:-1]]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <str_iterator object at 0x7f96694cfe20>

>   digits = [int(d) for d in isbn[:-1]]
E   ValueError: invalid literal for int() with base 10: 'P'

exercises/practice/isbn-verifier/isbn_verifier.py:15: ValueError
__ IsbnVerifierTest.test_isbn_without_separating_dashes_and_x_as_check_digit ___

self = <isbn_verifier_test.IsbnVerifierTest testMethod=test_isbn_without_separating_dashes_and_x_as_check_digit>

    def test_isbn_without_separating_dashes_and_x_as_check_digit(self):
>       self.assertIs(is_valid("359821507X"), True)
E       AssertionError: False is not True

exercises/practice/isbn-verifier/isbn_verifier_test.py:38: AssertionError
_______________________ IsbnVerifierTest.test_valid_isbn _______________________

self = <isbn_verifier_test.IsbnVerifierTest testMethod=test_valid_isbn>

    def test_valid_isbn(self):
>       self.assertIs(is_valid("3-598-21508-8"), True)
E       AssertionError: False is not True

exercises/practice/isbn-verifier/isbn_verifier_test.py:14: AssertionError
__________ IsbnVerifierTest.test_valid_isbn_with_a_check_digit_of_10 ___________

self = <isbn_verifier_test.IsbnVerifierTest testMethod=test_valid_isbn_with_a_check_digit_of_10>

    def test_valid_isbn_with_a_check_digit_of_10(self):
>       self.assertIs(is_valid("3-598-21507-X"), True)
E       AssertionError: False is not True

exercises/practice/isbn-verifier/isbn_verifier_test.py:20: AssertionError
__________ IsbnVerifierTest.test_valid_isbn_without_separating_dashes __________

self = <isbn_verifier_test.IsbnVerifierTest testMethod=test_valid_isbn_without_separating_dashes>

    def test_valid_isbn_without_separating_dashes(self):
>       self.assertIs(is_valid("3598215088"), True)
E       AssertionError: False is not True

exercises/practice/isbn-verifier/isbn_verifier_test.py:35: AssertionError
____________ IsbnVerifierTest.test_x_is_only_valid_as_a_check_digit ____________

self = <isbn_verifier_test.IsbnVerifierTest testMethod=test_x_is_only_valid_as_a_check_digit>

    def test_x_is_only_valid_as_a_check_digit(self):
>       self.assertIs(is_valid("3-598-2X507-9"), False)

exercises/practice/isbn-verifier/isbn_verifier_test.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/isbn-verifier/isbn_verifier.py:15: in is_valid
    digits = [int(d) for d in isbn[:-1]]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <str_iterator object at 0x7f9669330100>

>   digits = [int(d) for d in isbn[:-1]]
E   ValueError: invalid literal for int() with base 10: 'X'

exercises/practice/isbn-verifier/isbn_verifier.py:15: ValueError
=========================== short test summary info ============================
FAILED exercises/practice/isbn-verifier/isbn_verifier_test.py::IsbnVerifierTest::test_invalid_character_in_isbn_is_not_treated_as_zero
FAILED exercises/practice/isbn-verifier/isbn_verifier_test.py::IsbnVerifierTest::test_invalid_characters_are_not_ignored_after_checking_length
FAILED exercises/practice/isbn-verifier/isbn_verifier_test.py::IsbnVerifierTest::test_isbn_without_separating_dashes_and_x_as_check_digit
FAILED exercises/practice/isbn-verifier/isbn_verifier_test.py::IsbnVerifierTest::test_valid_isbn
FAILED exercises/practice/isbn-verifier/isbn_verifier_test.py::IsbnVerifierTest::test_valid_isbn_with_a_check_digit_of_10
FAILED exercises/practice/isbn-verifier/isbn_verifier_test.py::IsbnVerifierTest::test_valid_isbn_without_separating_dashes
FAILED exercises/practice/isbn-verifier/isbn_verifier_test.py::IsbnVerifierTest::test_x_is_only_valid_as_a_check_digit
========================= 7 failed, 12 passed in 0.11s =========================
