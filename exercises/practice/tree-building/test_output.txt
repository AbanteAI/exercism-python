============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 13 items

exercises/practice/tree-building/tree_building_test.py FFFFFFFFFFFFF     [100%]

=================================== FAILURES ===================================
______________________ TreeBuildingTest.test_binary_tree _______________________

self = <tree_building_test.TreeBuildingTest testMethod=test_binary_tree>

    def test_binary_tree(self):
        records = [
            Record(6, 2),
            Record(0, 0),
            Record(3, 1),
            Record(2, 0),
            Record(4, 1),
            Record(5, 2),
            Record(1, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/tree-building/tree_building.py:29: in BuildTree
    validate_records(records)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f7cfc997940>, <tree_building.Record object at 0x7f7cfc9978b0>, <tree_building.Reco...0x7f7cfc9977c0>, <tree_building.Record object at 0x7f7cfc997760>, <tree_building.Record object at 0x7f7cfc997700>, ...]

    def validate_records(records):
        record_ids = set()
        parent_ids = set()
        for record in records:
            record_ids.add(record.record_id)
            parent_ids.add(record.parent_id)
            if record.record_id == 0 and record.parent_id != 0:
                raise ValueError('Root record should have parent ID equal to its own ID')
            if record.record_id < record.parent_id:
                raise ValueError('Record ID should be greater than or equal to its parent ID')
        if len(record_ids) != len(records) or len(parent_ids) != len(records):
>           raise ValueError('Duplicate record IDs or parent IDs found')
E           ValueError: Duplicate record IDs or parent IDs found

exercises/practice/tree-building/tree_building.py:24: ValueError
_____________________ TreeBuildingTest.test_cycle_directly _____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_cycle_directly>

    def test_cycle_directly(self):
        records = [
            Record(5, 2),
            Record(3, 2),
            Record(2, 2),
            Record(4, 1),
            Record(1, 0),
            Record(0, 0),
            Record(6, 3)
        ]
        # Cycle caused by Record 2 with parent_id pointing to itself
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Only root should have equal record and parent id.")
E       AssertionError: 'Duplicate record IDs or parent IDs found' != 'Only root should have equal record and parent id.'
E       - Duplicate record IDs or parent IDs found
E       + Only root should have equal record and parent id.

exercises/practice/tree-building/tree_building_test.py:154: AssertionError
____________________ TreeBuildingTest.test_cycle_indirectly ____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_cycle_indirectly>

    def test_cycle_indirectly(self):
        records = [
            Record(5, 2),
            Record(3, 2),
            Record(2, 6),
            Record(4, 1),
            Record(1, 0),
            Record(0, 0),
            Record(6, 3)
        ]
        # Cycle caused by Record 2 with parent_id(6) greater than record_id(2)
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Node parent_id should be smaller than it's record_id.")
E       AssertionError: 'Record ID should be greater than or equal to its parent ID' != "Node parent_id should be smaller than it's record_id."
E       - Record ID should be greater than or equal to its parent ID
E       + Node parent_id should be smaller than it's record_id.

exercises/practice/tree-building/tree_building_test.py:170: AssertionError
____________________ TreeBuildingTest.test_empty_list_input ____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_empty_list_input>

    def test_empty_list_input(self):
        records = []
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/tree-building/tree_building.py:29: in BuildTree
    validate_records(records)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = []

    def validate_records(records):
        record_ids = set()
        parent_ids = set()
        for record in records:
            record_ids.add(record.record_id)
            parent_ids.add(record.parent_id)
            if record.record_id == 0 and record.parent_id != 0:
                raise ValueError('Root record should have parent ID equal to its own ID')
            if record.record_id < record.parent_id:
                raise ValueError('Record ID should be greater than or equal to its parent ID')
        if len(record_ids) != len(records) or len(parent_ids) != len(records):
            raise ValueError('Duplicate record IDs or parent IDs found')
        if len(record_ids - parent_ids) != 1:
>           raise ValueError('Invalid tree structure')
E           ValueError: Invalid tree structure

exercises/practice/tree-building/tree_building.py:26: ValueError
______________ TreeBuildingTest.test_higher_id_parent_of_lower_id ______________

self = <tree_building_test.TreeBuildingTest testMethod=test_higher_id_parent_of_lower_id>

    def test_higher_id_parent_of_lower_id(self):
        records = [
            Record(0, 0),
            Record(2, 0),
            Record(1, 2)
        ]
        # Record 1 have parent_id(2) greater than record_id(1)
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Node parent_id should be smaller than it's record_id.")
E       AssertionError: 'Record ID should be greater than or equal to its parent ID' != "Node parent_id should be smaller than it's record_id."
E       - Record ID should be greater than or equal to its parent ID
E       + Node parent_id should be smaller than it's record_id.

exercises/practice/tree-building/tree_building_test.py:182: AssertionError
_________________ TreeBuildingTest.test_more_than_two_children _________________

self = <tree_building_test.TreeBuildingTest testMethod=test_more_than_two_children>

    def test_more_than_two_children(self):
        records = [
            Record(0, 0),
            Record(1, 0),
            Record(2, 0),
            Record(3, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/tree-building/tree_building.py:29: in BuildTree
    validate_records(records)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f7cfc7d42e0>, <tree_building.Record object at 0x7f7cfc7d64d0>, <tree_building.Record object at 0x7f7cfc7d5f90>, <tree_building.Record object at 0x7f7cfc7d43a0>]

    def validate_records(records):
        record_ids = set()
        parent_ids = set()
        for record in records:
            record_ids.add(record.record_id)
            parent_ids.add(record.parent_id)
            if record.record_id == 0 and record.parent_id != 0:
                raise ValueError('Root record should have parent ID equal to its own ID')
            if record.record_id < record.parent_id:
                raise ValueError('Record ID should be greater than or equal to its parent ID')
        if len(record_ids) != len(records) or len(parent_ids) != len(records):
>           raise ValueError('Duplicate record IDs or parent IDs found')
E           ValueError: Duplicate record IDs or parent IDs found

exercises/practice/tree-building/tree_building.py:24: ValueError
______________________ TreeBuildingTest.test_no_root_node ______________________

self = <tree_building_test.TreeBuildingTest testMethod=test_no_root_node>

    def test_no_root_node(self):
        records = [
            Record(1, 0),
            Record(2, 0)
        ]
        # Record with record_id 0 (root) is missing
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Record id is invalid or out of order.")
E       AssertionError: 'Duplicate record IDs or parent IDs found' != 'Record id is invalid or out of order.'
E       - Duplicate record IDs or parent IDs found
E       + Record id is invalid or out of order.

exercises/practice/tree-building/tree_building_test.py:125: AssertionError
_____________________ TreeBuildingTest.test_non_continuous _____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_non_continuous>

    def test_non_continuous(self):
        records = [
            Record(2, 0),
            Record(4, 2),
            Record(1, 0),
            Record(0, 0)
        ]
        # Record with record_id 3 is missing
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Record id is invalid or out of order.")
E       AssertionError: 'Duplicate record IDs or parent IDs found' != 'Record id is invalid or out of order.'
E       - Duplicate record IDs or parent IDs found
E       + Record id is invalid or out of order.

exercises/practice/tree-building/tree_building_test.py:138: AssertionError
________________________ TreeBuildingTest.test_one_node ________________________

self = <tree_building_test.TreeBuildingTest testMethod=test_one_node>

    def test_one_node(self):
        records = [
            Record(0, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/tree-building/tree_building.py:29: in BuildTree
    validate_records(records)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f7cfc8080a0>]

    def validate_records(records):
        record_ids = set()
        parent_ids = set()
        for record in records:
            record_ids.add(record.record_id)
            parent_ids.add(record.parent_id)
            if record.record_id == 0 and record.parent_id != 0:
                raise ValueError('Root record should have parent ID equal to its own ID')
            if record.record_id < record.parent_id:
                raise ValueError('Record ID should be greater than or equal to its parent ID')
        if len(record_ids) != len(records) or len(parent_ids) != len(records):
            raise ValueError('Duplicate record IDs or parent IDs found')
        if len(record_ids - parent_ids) != 1:
>           raise ValueError('Invalid tree structure')
E           ValueError: Invalid tree structure

exercises/practice/tree-building/tree_building.py:26: ValueError
__________________ TreeBuildingTest.test_root_node_has_parent __________________

self = <tree_building_test.TreeBuildingTest testMethod=test_root_node_has_parent>

    def test_root_node_has_parent(self):
        records = [
            Record(0, 1),
            Record(1, 0)
        ]
        # Root parent_id should be equal to record_id(0)
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Node parent_id should be smaller than it's record_id.")
E       AssertionError: 'Root record should have parent ID equal to its own ID' != "Node parent_id should be smaller than it's record_id."
E       - Root record should have parent ID equal to its own ID
E       + Node parent_id should be smaller than it's record_id.

exercises/practice/tree-building/tree_building_test.py:114: AssertionError
__________________ TreeBuildingTest.test_three_nodes_in_order __________________

self = <tree_building_test.TreeBuildingTest testMethod=test_three_nodes_in_order>

    def test_three_nodes_in_order(self):
        records = [
            Record(0, 0),
            Record(1, 0),
            Record(2, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/tree-building/tree_building.py:29: in BuildTree
    validate_records(records)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f7cfc824580>, <tree_building.Record object at 0x7f7cfc824610>, <tree_building.Record object at 0x7f7cfc8271c0>]

    def validate_records(records):
        record_ids = set()
        parent_ids = set()
        for record in records:
            record_ids.add(record.record_id)
            parent_ids.add(record.parent_id)
            if record.record_id == 0 and record.parent_id != 0:
                raise ValueError('Root record should have parent ID equal to its own ID')
            if record.record_id < record.parent_id:
                raise ValueError('Record ID should be greater than or equal to its parent ID')
        if len(record_ids) != len(records) or len(parent_ids) != len(records):
>           raise ValueError('Duplicate record IDs or parent IDs found')
E           ValueError: Duplicate record IDs or parent IDs found

exercises/practice/tree-building/tree_building.py:24: ValueError
______________ TreeBuildingTest.test_three_nodes_in_reverse_order ______________

self = <tree_building_test.TreeBuildingTest testMethod=test_three_nodes_in_reverse_order>

    def test_three_nodes_in_reverse_order(self):
        records = [
            Record(2, 0),
            Record(1, 0),
            Record(0, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/tree-building/tree_building.py:29: in BuildTree
    validate_records(records)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f7cfc8094e0>, <tree_building.Record object at 0x7f7cfc8082e0>, <tree_building.Record object at 0x7f7cfc808e20>]

    def validate_records(records):
        record_ids = set()
        parent_ids = set()
        for record in records:
            record_ids.add(record.record_id)
            parent_ids.add(record.parent_id)
            if record.record_id == 0 and record.parent_id != 0:
                raise ValueError('Root record should have parent ID equal to its own ID')
            if record.record_id < record.parent_id:
                raise ValueError('Record ID should be greater than or equal to its parent ID')
        if len(record_ids) != len(records) or len(parent_ids) != len(records):
>           raise ValueError('Duplicate record IDs or parent IDs found')
E           ValueError: Duplicate record IDs or parent IDs found

exercises/practice/tree-building/tree_building.py:24: ValueError
____________________ TreeBuildingTest.test_unbalanced_tree _____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_unbalanced_tree>

    def test_unbalanced_tree(self):
        records = [
            Record(0, 0),
            Record(1, 0),
            Record(2, 0),
            Record(3, 1),
            Record(4, 1),
            Record(5, 1),
            Record(6, 2),
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/tree-building/tree_building.py:29: in BuildTree
    validate_records(records)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f7cfc981bd0>, <tree_building.Record object at 0x7f7cfc9825f0>, <tree_building.Reco...0x7f7cfc981810>, <tree_building.Record object at 0x7f7cfc983280>, <tree_building.Record object at 0x7f7cfc982170>, ...]

    def validate_records(records):
        record_ids = set()
        parent_ids = set()
        for record in records:
            record_ids.add(record.record_id)
            parent_ids.add(record.parent_id)
            if record.record_id == 0 and record.parent_id != 0:
                raise ValueError('Root record should have parent ID equal to its own ID')
            if record.record_id < record.parent_id:
                raise ValueError('Record ID should be greater than or equal to its parent ID')
        if len(record_ids) != len(records) or len(parent_ids) != len(records):
>           raise ValueError('Duplicate record IDs or parent IDs found')
E           ValueError: Duplicate record IDs or parent IDs found

exercises/practice/tree-building/tree_building.py:24: ValueError
=========================== short test summary info ============================
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_binary_tree
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_cycle_directly
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_cycle_indirectly
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_empty_list_input
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_higher_id_parent_of_lower_id
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_more_than_two_children
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_no_root_node
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_non_continuous
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_one_node
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_root_node_has_parent
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_three_nodes_in_order
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_three_nodes_in_reverse_order
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_unbalanced_tree
============================== 13 failed in 0.09s ==============================
