============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 13 items

exercises/practice/tree-building/tree_building_test.py FFF.FF..F.FFF     [100%]

=================================== FAILURES ===================================
______________________ TreeBuildingTest.test_binary_tree _______________________

self = <tree_building_test.TreeBuildingTest testMethod=test_binary_tree>

    def test_binary_tree(self):
        records = [
            Record(6, 2),
            Record(0, 0),
            Record(3, 1),
            Record(2, 0),
            Record(4, 1),
            Record(5, 2),
            Record(1, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7efdd2917760>, <tree_building.Record object at 0x7efdd2917550>, <tree_building.Reco...0x7efdd2917850>, <tree_building.Record object at 0x7efdd2917610>, <tree_building.Record object at 0x7efdd29175b0>, ...]

    def BuildTree(records):
        if not records:
            return None
    
        records.sort(key=lambda x: x.record_id)
        if len(records) != records[-1].record_id + 1:
            raise ValueError("Record id is invalid or out of order.")
        nodes = {}
        root = None
    
        for record in records:
            if record.record_id == record.parent_id:
                if record.record_id == 0:
                    root = Node(record.record_id)
                    nodes[record.record_id] = root
                else:
                    raise ValueError("Only root should have equal record and parent id.")
            elif record.record_id < record.parent_id:
                raise ValueError("Node parent_id should be smaller than it's record_id.")
            else:
                node = Node(record.record_id)
                nodes[record.record_id] = node
    
>           raise ValueError("Record id is invalid or out of order.")
E           ValueError: Record id is invalid or out of order.

exercises/practice/tree-building/tree_building.py:36: ValueError
_____________________ TreeBuildingTest.test_cycle_directly _____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_cycle_directly>

    def test_cycle_directly(self):
        records = [
            Record(5, 2),
            Record(3, 2),
            Record(2, 2),
            Record(4, 1),
            Record(1, 0),
            Record(0, 0),
            Record(6, 3)
        ]
        # Cycle caused by Record 2 with parent_id pointing to itself
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Only root should have equal record and parent id.")
E       AssertionError: 'Record id is invalid or out of order.' != 'Only root should have equal record and parent id.'
E       - Record id is invalid or out of order.
E       + Only root should have equal record and parent id.

exercises/practice/tree-building/tree_building_test.py:154: AssertionError
____________________ TreeBuildingTest.test_cycle_indirectly ____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_cycle_indirectly>

    def test_cycle_indirectly(self):
        records = [
            Record(5, 2),
            Record(3, 2),
            Record(2, 6),
            Record(4, 1),
            Record(1, 0),
            Record(0, 0),
            Record(6, 3)
        ]
        # Cycle caused by Record 2 with parent_id(6) greater than record_id(2)
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Node parent_id should be smaller than it's record_id.")
E       AssertionError: 'Record id is invalid or out of order.' != "Node parent_id should be smaller than it's record_id."
E       - Record id is invalid or out of order.
E       + Node parent_id should be smaller than it's record_id.

exercises/practice/tree-building/tree_building_test.py:170: AssertionError
______________ TreeBuildingTest.test_higher_id_parent_of_lower_id ______________

self = <tree_building_test.TreeBuildingTest testMethod=test_higher_id_parent_of_lower_id>

    def test_higher_id_parent_of_lower_id(self):
        records = [
            Record(0, 0),
            Record(2, 0),
            Record(1, 2)
        ]
        # Record 1 have parent_id(2) greater than record_id(1)
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Node parent_id should be smaller than it's record_id.")
E       AssertionError: 'Record id is invalid or out of order.' != "Node parent_id should be smaller than it's record_id."
E       - Record id is invalid or out of order.
E       + Node parent_id should be smaller than it's record_id.

exercises/practice/tree-building/tree_building_test.py:182: AssertionError
_________________ TreeBuildingTest.test_more_than_two_children _________________

self = <tree_building_test.TreeBuildingTest testMethod=test_more_than_two_children>

    def test_more_than_two_children(self):
        records = [
            Record(0, 0),
            Record(1, 0),
            Record(2, 0),
            Record(3, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7efdd27589d0>, <tree_building.Record object at 0x7efdd2758a30>, <tree_building.Record object at 0x7efdd2758c10>, <tree_building.Record object at 0x7efdd2758c70>]

    def BuildTree(records):
        if not records:
            return None
    
        records.sort(key=lambda x: x.record_id)
        if len(records) != records[-1].record_id + 1:
            raise ValueError("Record id is invalid or out of order.")
        nodes = {}
        root = None
    
        for record in records:
            if record.record_id == record.parent_id:
                if record.record_id == 0:
                    root = Node(record.record_id)
                    nodes[record.record_id] = root
                else:
                    raise ValueError("Only root should have equal record and parent id.")
            elif record.record_id < record.parent_id:
                raise ValueError("Node parent_id should be smaller than it's record_id.")
            else:
                node = Node(record.record_id)
                nodes[record.record_id] = node
    
>           raise ValueError("Record id is invalid or out of order.")
E           ValueError: Record id is invalid or out of order.

exercises/practice/tree-building/tree_building.py:36: ValueError
________________________ TreeBuildingTest.test_one_node ________________________

self = <tree_building_test.TreeBuildingTest testMethod=test_one_node>

    def test_one_node(self):
        records = [
            Record(0, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7efdd290a290>]

    def BuildTree(records):
        if not records:
            return None
    
        records.sort(key=lambda x: x.record_id)
        if len(records) != records[-1].record_id + 1:
            raise ValueError("Record id is invalid or out of order.")
        nodes = {}
        root = None
    
        for record in records:
            if record.record_id == record.parent_id:
                if record.record_id == 0:
                    root = Node(record.record_id)
                    nodes[record.record_id] = root
                else:
                    raise ValueError("Only root should have equal record and parent id.")
            elif record.record_id < record.parent_id:
                raise ValueError("Node parent_id should be smaller than it's record_id.")
            else:
                node = Node(record.record_id)
                nodes[record.record_id] = node
    
>           raise ValueError("Record id is invalid or out of order.")
E           ValueError: Record id is invalid or out of order.

exercises/practice/tree-building/tree_building.py:36: ValueError
__________________ TreeBuildingTest.test_three_nodes_in_order __________________

self = <tree_building_test.TreeBuildingTest testMethod=test_three_nodes_in_order>

    def test_three_nodes_in_order(self):
        records = [
            Record(0, 0),
            Record(1, 0),
            Record(2, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7efdd2768580>, <tree_building.Record object at 0x7efdd2768640>, <tree_building.Record object at 0x7efdd2768610>]

    def BuildTree(records):
        if not records:
            return None
    
        records.sort(key=lambda x: x.record_id)
        if len(records) != records[-1].record_id + 1:
            raise ValueError("Record id is invalid or out of order.")
        nodes = {}
        root = None
    
        for record in records:
            if record.record_id == record.parent_id:
                if record.record_id == 0:
                    root = Node(record.record_id)
                    nodes[record.record_id] = root
                else:
                    raise ValueError("Only root should have equal record and parent id.")
            elif record.record_id < record.parent_id:
                raise ValueError("Node parent_id should be smaller than it's record_id.")
            else:
                node = Node(record.record_id)
                nodes[record.record_id] = node
    
>           raise ValueError("Record id is invalid or out of order.")
E           ValueError: Record id is invalid or out of order.

exercises/practice/tree-building/tree_building.py:36: ValueError
______________ TreeBuildingTest.test_three_nodes_in_reverse_order ______________

self = <tree_building_test.TreeBuildingTest testMethod=test_three_nodes_in_reverse_order>

    def test_three_nodes_in_reverse_order(self):
        records = [
            Record(2, 0),
            Record(1, 0),
            Record(0, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7efdd27a5060>, <tree_building.Record object at 0x7efdd27a4f40>, <tree_building.Record object at 0x7efdd27a5030>]

    def BuildTree(records):
        if not records:
            return None
    
        records.sort(key=lambda x: x.record_id)
        if len(records) != records[-1].record_id + 1:
            raise ValueError("Record id is invalid or out of order.")
        nodes = {}
        root = None
    
        for record in records:
            if record.record_id == record.parent_id:
                if record.record_id == 0:
                    root = Node(record.record_id)
                    nodes[record.record_id] = root
                else:
                    raise ValueError("Only root should have equal record and parent id.")
            elif record.record_id < record.parent_id:
                raise ValueError("Node parent_id should be smaller than it's record_id.")
            else:
                node = Node(record.record_id)
                nodes[record.record_id] = node
    
>           raise ValueError("Record id is invalid or out of order.")
E           ValueError: Record id is invalid or out of order.

exercises/practice/tree-building/tree_building.py:36: ValueError
____________________ TreeBuildingTest.test_unbalanced_tree _____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_unbalanced_tree>

    def test_unbalanced_tree(self):
        records = [
            Record(0, 0),
            Record(1, 0),
            Record(2, 0),
            Record(3, 1),
            Record(4, 1),
            Record(5, 1),
            Record(6, 2),
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7efdd2758bb0>, <tree_building.Record object at 0x7efdd2759e10>, <tree_building.Reco...0x7efdd2759810>, <tree_building.Record object at 0x7efdd2759660>, <tree_building.Record object at 0x7efdd2759c00>, ...]

    def BuildTree(records):
        if not records:
            return None
    
        records.sort(key=lambda x: x.record_id)
        if len(records) != records[-1].record_id + 1:
            raise ValueError("Record id is invalid or out of order.")
        nodes = {}
        root = None
    
        for record in records:
            if record.record_id == record.parent_id:
                if record.record_id == 0:
                    root = Node(record.record_id)
                    nodes[record.record_id] = root
                else:
                    raise ValueError("Only root should have equal record and parent id.")
            elif record.record_id < record.parent_id:
                raise ValueError("Node parent_id should be smaller than it's record_id.")
            else:
                node = Node(record.record_id)
                nodes[record.record_id] = node
    
>           raise ValueError("Record id is invalid or out of order.")
E           ValueError: Record id is invalid or out of order.

exercises/practice/tree-building/tree_building.py:36: ValueError
=========================== short test summary info ============================
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_binary_tree
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_cycle_directly
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_cycle_indirectly
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_higher_id_parent_of_lower_id
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_more_than_two_children
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_one_node
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_three_nodes_in_order
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_three_nodes_in_reverse_order
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_unbalanced_tree
========================= 9 failed, 4 passed in 0.07s ==========================
