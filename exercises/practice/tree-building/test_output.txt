============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1, asyncio-0.21.1
asyncio: mode=strict
collected 13 items

exercises/practice/tree-building/tree_building_test.py FFFFFFFFFFFFF     [100%]

=================================== FAILURES ===================================
______________________ TreeBuildingTest.test_binary_tree _______________________

self = <tree_building_test.TreeBuildingTest testMethod=test_binary_tree>

    def test_binary_tree(self):
        records = [
            Record(6, 2),
            Record(0, 0),
            Record(3, 1),
            Record(2, 0),
            Record(4, 1),
            Record(5, 2),
            Record(1, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f44ce417280>, <tree_building.Record object at 0x7f44ce416f50>, <tree_building.Reco...0x7f44ce416f20>, <tree_building.Record object at 0x7f44ce416b60>, <tree_building.Record object at 0x7f44ce416d40>, ...]

    def BuildTree(records):
        nodes = {}
        for record in records:
            node_id = record.record_id
            parent_id = record.parent_id
            if node_id in nodes:
                raise ValueError('Duplicate node ID')
            if parent_id == node_id:
                if parent_id != 0:
                    raise ValueError('Invalid parent ID')
                root = node
    
            node = Node(node_id)
            nodes[node_id] = node
            if parent_id == node_id:
                root = node
            else:
                parent_node = nodes.get(parent_id)
                if parent_node is None:
>                   raise ValueError('Invalid parent ID')
E                   ValueError: Invalid parent ID

exercises/practice/tree-building/tree_building.py:32: ValueError
_____________________ TreeBuildingTest.test_cycle_directly _____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_cycle_directly>

    def test_cycle_directly(self):
        records = [
            Record(5, 2),
            Record(3, 2),
            Record(2, 2),
            Record(4, 1),
            Record(1, 0),
            Record(0, 0),
            Record(6, 3)
        ]
        # Cycle caused by Record 2 with parent_id pointing to itself
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Only root should have equal record and parent id.")
E       AssertionError: 'Invalid parent ID' != 'Only root should have equal record and parent id.'
E       - Invalid parent ID
E       + Only root should have equal record and parent id.

exercises/practice/tree-building/tree_building_test.py:154: AssertionError
____________________ TreeBuildingTest.test_cycle_indirectly ____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_cycle_indirectly>

    def test_cycle_indirectly(self):
        records = [
            Record(5, 2),
            Record(3, 2),
            Record(2, 6),
            Record(4, 1),
            Record(1, 0),
            Record(0, 0),
            Record(6, 3)
        ]
        # Cycle caused by Record 2 with parent_id(6) greater than record_id(2)
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Node parent_id should be smaller than it's record_id.")
E       AssertionError: 'Invalid parent ID' != "Node parent_id should be smaller than it's record_id."
E       - Invalid parent ID
E       + Node parent_id should be smaller than it's record_id.

exercises/practice/tree-building/tree_building_test.py:170: AssertionError
____________________ TreeBuildingTest.test_empty_list_input ____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_empty_list_input>

    def test_empty_list_input(self):
        records = []
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = []

    def BuildTree(records):
        nodes = {}
        for record in records:
            node_id = record.record_id
            parent_id = record.parent_id
            if node_id in nodes:
                raise ValueError('Duplicate node ID')
            if parent_id == node_id:
                if parent_id != 0:
                    raise ValueError('Invalid parent ID')
                root = node
    
            node = Node(node_id)
            nodes[node_id] = node
            if parent_id == node_id:
                root = node
            else:
                parent_node = nodes.get(parent_id)
                if parent_node is None:
                    raise ValueError('Invalid parent ID')
                parent_node.children.append(node)
>       return root
E       UnboundLocalError: local variable 'root' referenced before assignment

exercises/practice/tree-building/tree_building.py:34: UnboundLocalError
______________ TreeBuildingTest.test_higher_id_parent_of_lower_id ______________

self = <tree_building_test.TreeBuildingTest testMethod=test_higher_id_parent_of_lower_id>

    def test_higher_id_parent_of_lower_id(self):
        records = [
            Record(0, 0),
            Record(2, 0),
            Record(1, 2)
        ]
        # Record 1 have parent_id(2) greater than record_id(1)
        with self.assertRaises(ValueError) as err:
>           BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def BuildTree(records):
        nodes = {}
        for record in records:
            node_id = record.record_id
            parent_id = record.parent_id
            if node_id in nodes:
                raise ValueError('Duplicate node ID')
            if parent_id == node_id:
                if parent_id != 0:
                    raise ValueError('Invalid parent ID')
>               root = node
E               UnboundLocalError: local variable 'node' referenced before assignment

exercises/practice/tree-building/tree_building.py:23: UnboundLocalError
_________________ TreeBuildingTest.test_more_than_two_children _________________

self = <tree_building_test.TreeBuildingTest testMethod=test_more_than_two_children>

    def test_more_than_two_children(self):
        records = [
            Record(0, 0),
            Record(1, 0),
            Record(2, 0),
            Record(3, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f44ce29e0b0>, <tree_building.Record object at 0x7f44ce29e0e0>, <tree_building.Record object at 0x7f44ce29e350>, <tree_building.Record object at 0x7f44ce29e2f0>]

    def BuildTree(records):
        nodes = {}
        for record in records:
            node_id = record.record_id
            parent_id = record.parent_id
            if node_id in nodes:
                raise ValueError('Duplicate node ID')
            if parent_id == node_id:
                if parent_id != 0:
                    raise ValueError('Invalid parent ID')
>               root = node
E               UnboundLocalError: local variable 'node' referenced before assignment

exercises/practice/tree-building/tree_building.py:23: UnboundLocalError
______________________ TreeBuildingTest.test_no_root_node ______________________

self = <tree_building_test.TreeBuildingTest testMethod=test_no_root_node>

    def test_no_root_node(self):
        records = [
            Record(1, 0),
            Record(2, 0)
        ]
        # Record with record_id 0 (root) is missing
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Record id is invalid or out of order.")
E       AssertionError: 'Invalid parent ID' != 'Record id is invalid or out of order.'
E       - Invalid parent ID
E       + Record id is invalid or out of order.

exercises/practice/tree-building/tree_building_test.py:125: AssertionError
_____________________ TreeBuildingTest.test_non_continuous _____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_non_continuous>

    def test_non_continuous(self):
        records = [
            Record(2, 0),
            Record(4, 2),
            Record(1, 0),
            Record(0, 0)
        ]
        # Record with record_id 3 is missing
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Record id is invalid or out of order.")
E       AssertionError: 'Invalid parent ID' != 'Record id is invalid or out of order.'
E       - Invalid parent ID
E       + Record id is invalid or out of order.

exercises/practice/tree-building/tree_building_test.py:138: AssertionError
________________________ TreeBuildingTest.test_one_node ________________________

self = <tree_building_test.TreeBuildingTest testMethod=test_one_node>

    def test_one_node(self):
        records = [
            Record(0, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f44ce2979d0>]

    def BuildTree(records):
        nodes = {}
        for record in records:
            node_id = record.record_id
            parent_id = record.parent_id
            if node_id in nodes:
                raise ValueError('Duplicate node ID')
            if parent_id == node_id:
                if parent_id != 0:
                    raise ValueError('Invalid parent ID')
>               root = node
E               UnboundLocalError: local variable 'node' referenced before assignment

exercises/practice/tree-building/tree_building.py:23: UnboundLocalError
__________________ TreeBuildingTest.test_root_node_has_parent __________________

self = <tree_building_test.TreeBuildingTest testMethod=test_root_node_has_parent>

    def test_root_node_has_parent(self):
        records = [
            Record(0, 1),
            Record(1, 0)
        ]
        # Root parent_id should be equal to record_id(0)
        with self.assertRaises(ValueError) as err:
            BuildTree(records)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Node parent_id should be smaller than it's record_id.")
E       AssertionError: 'Invalid parent ID' != "Node parent_id should be smaller than it's record_id."
E       - Invalid parent ID
E       + Node parent_id should be smaller than it's record_id.

exercises/practice/tree-building/tree_building_test.py:114: AssertionError
__________________ TreeBuildingTest.test_three_nodes_in_order __________________

self = <tree_building_test.TreeBuildingTest testMethod=test_three_nodes_in_order>

    def test_three_nodes_in_order(self):
        records = [
            Record(0, 0),
            Record(1, 0),
            Record(2, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f44ce2979d0>, <tree_building.Record object at 0x7f44ce294550>, <tree_building.Record object at 0x7f44ce297970>]

    def BuildTree(records):
        nodes = {}
        for record in records:
            node_id = record.record_id
            parent_id = record.parent_id
            if node_id in nodes:
                raise ValueError('Duplicate node ID')
            if parent_id == node_id:
                if parent_id != 0:
                    raise ValueError('Invalid parent ID')
>               root = node
E               UnboundLocalError: local variable 'node' referenced before assignment

exercises/practice/tree-building/tree_building.py:23: UnboundLocalError
______________ TreeBuildingTest.test_three_nodes_in_reverse_order ______________

self = <tree_building_test.TreeBuildingTest testMethod=test_three_nodes_in_reverse_order>

    def test_three_nodes_in_reverse_order(self):
        records = [
            Record(2, 0),
            Record(1, 0),
            Record(0, 0)
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f44ce452da0>, <tree_building.Record object at 0x7f44ce453160>, <tree_building.Record object at 0x7f44ce452bc0>]

    def BuildTree(records):
        nodes = {}
        for record in records:
            node_id = record.record_id
            parent_id = record.parent_id
            if node_id in nodes:
                raise ValueError('Duplicate node ID')
            if parent_id == node_id:
                if parent_id != 0:
                    raise ValueError('Invalid parent ID')
                root = node
    
            node = Node(node_id)
            nodes[node_id] = node
            if parent_id == node_id:
                root = node
            else:
                parent_node = nodes.get(parent_id)
                if parent_node is None:
>                   raise ValueError('Invalid parent ID')
E                   ValueError: Invalid parent ID

exercises/practice/tree-building/tree_building.py:32: ValueError
____________________ TreeBuildingTest.test_unbalanced_tree _____________________

self = <tree_building_test.TreeBuildingTest testMethod=test_unbalanced_tree>

    def test_unbalanced_tree(self):
        records = [
            Record(0, 0),
            Record(1, 0),
            Record(2, 0),
            Record(3, 1),
            Record(4, 1),
            Record(5, 1),
            Record(6, 2),
        ]
>       root = BuildTree(records)

exercises/practice/tree-building/tree_building_test.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [<tree_building.Record object at 0x7f44ce2ff850>, <tree_building.Record object at 0x7f44ce2ff820>, <tree_building.Reco...0x7f44ce2ffa30>, <tree_building.Record object at 0x7f44ce2ff760>, <tree_building.Record object at 0x7f44ce2ff610>, ...]

    def BuildTree(records):
        nodes = {}
        for record in records:
            node_id = record.record_id
            parent_id = record.parent_id
            if node_id in nodes:
                raise ValueError('Duplicate node ID')
            if parent_id == node_id:
                if parent_id != 0:
                    raise ValueError('Invalid parent ID')
>               root = node
E               UnboundLocalError: local variable 'node' referenced before assignment

exercises/practice/tree-building/tree_building.py:23: UnboundLocalError
=========================== short test summary info ============================
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_binary_tree
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_cycle_directly
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_cycle_indirectly
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_empty_list_input
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_higher_id_parent_of_lower_id
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_more_than_two_children
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_no_root_node
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_non_continuous
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_one_node
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_root_node_has_parent
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_three_nodes_in_order
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_three_nodes_in_reverse_order
FAILED exercises/practice/tree-building/tree_building_test.py::TreeBuildingTest::test_unbalanced_tree
============================== 13 failed in 0.09s ==============================
