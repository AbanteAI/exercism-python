============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 6 items

exercises/practice/satellite/satellite_test.py FFFFF.                    [100%]

=================================== FAILURES ===================================
________________________ SatelliteTest.test_empty_tree _________________________

self = <satellite_test.SatelliteTest testMethod=test_empty_tree>

    def test_empty_tree(self):
        preorder = []
        inorder = []
    
        expected = {}
>       self.assertEqual(tree_from_traversals(preorder, inorder), expected)

exercises/practice/satellite/satellite_test.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

preorder = [], inorder = []

    def tree_from_traversals(preorder, inorder):
>       return build_tree(preorder, inorder).to_dict()
E       AttributeError: 'NoneType' object has no attribute 'to_dict'

exercises/practice/satellite/satellite.py:34: AttributeError
_______ SatelliteTest.test_reject_inconsistent_traversals_of_same_length _______

self = <satellite_test.SatelliteTest testMethod=test_reject_inconsistent_traversals_of_same_length>

    def test_reject_inconsistent_traversals_of_same_length(self):
        preorder = ["x", "y", "z"]
        inorder = ["a", "b", "c"]
    
        with self.assertRaises(ValueError) as err:
            tree_from_traversals(preorder, inorder)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(
            err.exception.args[0], "traversals must have the same elements"
        )
E       AssertionError: "'x' is not in list" != 'traversals must have the same elements'
E       - 'x' is not in list
E       + traversals must have the same elements

exercises/practice/satellite/satellite_test.py:58: AssertionError
___________ SatelliteTest.test_reject_traversals_of_different_length ___________

self = <satellite_test.SatelliteTest testMethod=test_reject_traversals_of_different_length>

    def test_reject_traversals_of_different_length(self):
        preorder = ["a", "b"]
        inorder = ["b", "a", "r"]
    
        with self.assertRaises(ValueError) as err:
            tree_from_traversals(preorder, inorder)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "traversals must have the same length")
E       AssertionError: 'Traversals have different lengths' != 'traversals must have the same length'
E       - Traversals have different lengths
E       + traversals must have the same length

exercises/practice/satellite/satellite_test.py:49: AssertionError
___________ SatelliteTest.test_reject_traversals_with_repeated_items ___________

self = <satellite_test.SatelliteTest testMethod=test_reject_traversals_with_repeated_items>

    def test_reject_traversals_with_repeated_items(self):
        preorder = ["a", "b", "a"]
        inorder = ["b", "a", "a"]
    
        with self.assertRaises(ValueError) as err:
            tree_from_traversals(preorder, inorder)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "traversals must contain unique items")
E       AssertionError: 'Traversals have repeated items' != 'traversals must contain unique items'
E       - Traversals have repeated items
E       + traversals must contain unique items

exercises/practice/satellite/satellite_test.py:69: AssertionError
___________________ SatelliteTest.test_tree_with_many_items ____________________

self = <satellite_test.SatelliteTest testMethod=test_tree_with_many_items>

    def test_tree_with_many_items(self):
        preorder = ["a", "i", "x", "f", "r"]
        inorder = ["i", "a", "f", "x", "r"]
    
        expected = {
            "v": "a",
            "l": {"v": "i", "l": {}, "r": {}},
            "r": {
                "v": "x",
                "l": {"v": "f", "l": {}, "r": {}},
                "r": {"v": "r", "l": {}, "r": {}},
            },
        }
>       self.assertEqual(tree_from_traversals(preorder, inorder), expected)

exercises/practice/satellite/satellite_test.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/satellite/satellite.py:34: in tree_from_traversals
    return build_tree(preorder, inorder).to_dict()
exercises/practice/satellite/satellite.py:28: in build_tree
    root.left = build_tree(preorder, inorder[:index])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

preorder = ['i', 'x', 'f', 'r'], inorder = ['i']

    def build_tree(preorder, inorder):
        if len(preorder) != len(inorder):
>           raise ValueError("Traversals have different lengths")
E           ValueError: Traversals have different lengths

exercises/practice/satellite/satellite.py:17: ValueError
=========================== short test summary info ============================
FAILED exercises/practice/satellite/satellite_test.py::SatelliteTest::test_empty_tree
FAILED exercises/practice/satellite/satellite_test.py::SatelliteTest::test_reject_inconsistent_traversals_of_same_length
FAILED exercises/practice/satellite/satellite_test.py::SatelliteTest::test_reject_traversals_of_different_length
FAILED exercises/practice/satellite/satellite_test.py::SatelliteTest::test_reject_traversals_with_repeated_items
FAILED exercises/practice/satellite/satellite_test.py::SatelliteTest::test_tree_with_many_items
========================= 5 failed, 1 passed in 0.04s ==========================
