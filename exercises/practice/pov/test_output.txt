============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 15 items

exercises/practice/pov/pov_test.py FFFFFFFFFF...FF                       [100%]

=================================== FAILURES ===================================
______________ PovTest.test_can_find_path_from_nodes_other_than_x ______________

self = <pov_test.PovTest testMethod=test_can_find_path_from_nodes_other_than_x>

    def test_can_find_path_from_nodes_other_than_x(self):
        tree = Tree("parent", [Tree("a"), Tree("x"), Tree("b"), Tree("c")])
        expected = ["a", "parent", "c"]
>       self.assertEqual(tree.path_to("a", "c"), expected)

exercises/practice/pov/pov_test.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:58: in path_to
    self.from_pov(from_node)
exercises/practice/pov/pov.py:28: in from_pov
    self._reorient(node, parent)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7f5c96174af0>
node = <pov.Tree object at 0x7f5c96174d30>, parent = 0

    def _reorient(self, node, parent):
        # Move up the tree, making the current node the parent of its parent
        while parent is not None:
>           grandparent, parent_index = self._find_with_parent(parent.label)
E           AttributeError: 'int' object has no attribute 'label'

exercises/practice/pov/pov.py:48: AttributeError
________________ PovTest.test_can_find_path_not_involving_root _________________

self = <pov_test.PovTest testMethod=test_can_find_path_not_involving_root>

    def test_can_find_path_not_involving_root(self):
        tree = Tree(
            "grandparent",
            [Tree("parent", [Tree("x"), Tree("sibling-0"), Tree("sibling-1")])],
        )
        expected = ["x", "parent", "sibling-1"]
>       self.assertEqual(tree.path_to("x", "sibling-1"), expected)

exercises/practice/pov/pov_test.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:58: in path_to
    self.from_pov(from_node)
exercises/practice/pov/pov.py:28: in from_pov
    self._reorient(node, parent)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7f5c96157b20>
node = <pov.Tree object at 0x7f5c96156260>, parent = 0

    def _reorient(self, node, parent):
        # Move up the tree, making the current node the parent of its parent
        while parent is not None:
>           grandparent, parent_index = self._find_with_parent(parent.label)
E           AttributeError: 'int' object has no attribute 'label'

exercises/practice/pov/pov.py:48: AttributeError
_____________________ PovTest.test_can_find_path_to_cousin _____________________

self = <pov_test.PovTest testMethod=test_can_find_path_to_cousin>

    def test_can_find_path_to_cousin(self):
        tree = Tree(
            "grandparent",
            [
                Tree(
                    "parent",
                    [
                        Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                        Tree("sibling-0"),
                        Tree("sibling-1"),
                    ],
                ),
                Tree("uncle", [Tree("cousin-0"), Tree("cousin-1")]),
            ],
        )
        expected = ["x", "parent", "grandparent", "uncle", "cousin-1"]
>       self.assertEqual(tree.path_to("x", "cousin-1"), expected)

exercises/practice/pov/pov_test.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:58: in path_to
    self.from_pov(from_node)
exercises/practice/pov/pov.py:28: in from_pov
    self._reorient(node, parent)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7f5c969669e0>
node = <pov.Tree object at 0x7f5c96174490>, parent = 0

    def _reorient(self, node, parent):
        # Move up the tree, making the current node the parent of its parent
        while parent is not None:
>           grandparent, parent_index = self._find_with_parent(parent.label)
E           AttributeError: 'int' object has no attribute 'label'

exercises/practice/pov/pov.py:48: AttributeError
_____________________ PovTest.test_can_find_path_to_parent _____________________

self = <pov_test.PovTest testMethod=test_can_find_path_to_parent>

    def test_can_find_path_to_parent(self):
        tree = Tree("parent", [Tree("x"), Tree("sibling")])
        expected = ["x", "parent"]
>       self.assertEqual(tree.path_to("x", "parent"), expected)

exercises/practice/pov/pov_test.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:58: in path_to
    self.from_pov(from_node)
exercises/practice/pov/pov.py:28: in from_pov
    self._reorient(node, parent)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7f5c961fb610>
node = <pov.Tree object at 0x7f5c961fb370>, parent = 0

    def _reorient(self, node, parent):
        # Move up the tree, making the current node the parent of its parent
        while parent is not None:
>           grandparent, parent_index = self._find_with_parent(parent.label)
E           AttributeError: 'int' object has no attribute 'label'

exercises/practice/pov/pov.py:48: AttributeError
____________________ PovTest.test_can_find_path_to_sibling _____________________

self = <pov_test.PovTest testMethod=test_can_find_path_to_sibling>

    def test_can_find_path_to_sibling(self):
        tree = Tree("parent", [Tree("a"), Tree("x"), Tree("b"), Tree("c")])
        expected = ["x", "parent", "b"]
>       self.assertEqual(tree.path_to("x", "b"), expected)

exercises/practice/pov/pov_test.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:58: in path_to
    self.from_pov(from_node)
exercises/practice/pov/pov.py:28: in from_pov
    self._reorient(node, parent)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7f5c96174a00>
node = <pov.Tree object at 0x7f5c961742e0>, parent = 1

    def _reorient(self, node, parent):
        # Move up the tree, making the current node the parent of its parent
        while parent is not None:
>           grandparent, parent_index = self._find_with_parent(parent.label)
E           AttributeError: 'int' object has no attribute 'label'

exercises/practice/pov/pov.py:48: AttributeError
_____________ PovTest.test_can_reroot_a_complex_tree_with_cousins ______________

self = <pov_test.PovTest testMethod=test_can_reroot_a_complex_tree_with_cousins>

    def test_can_reroot_a_complex_tree_with_cousins(self):
        tree = Tree(
            "grandparent",
            [
                Tree(
                    "parent",
                    [
                        Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                        Tree("sibling-0"),
                        Tree("sibling-1"),
                    ],
                ),
                Tree("uncle", [Tree("cousin-0"), Tree("cousin-1")]),
            ],
        )
        expected = Tree(
            "x",
            [
                Tree("kid-1"),
                Tree("kid-0"),
                Tree(
                    "parent",
                    [
                        Tree("sibling-0"),
                        Tree("sibling-1"),
                        Tree(
                            "grandparent",
                            [Tree("uncle", [Tree("cousin-0"), Tree("cousin-1")])],
                        ),
                    ],
                ),
            ],
        )
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:28: in from_pov
    self._reorient(node, parent)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7f5c96966620>
node = <pov.Tree object at 0x7f5c969658a0>, parent = 0

    def _reorient(self, node, parent):
        # Move up the tree, making the current node the parent of its parent
        while parent is not None:
>           grandparent, parent_index = self._find_with_parent(parent.label)
E           AttributeError: 'int' object has no attribute 'label'

exercises/practice/pov/pov.py:48: AttributeError
________ PovTest.test_can_reroot_a_tree_with_a_parent_and_many_siblings ________

self = <pov_test.PovTest testMethod=test_can_reroot_a_tree_with_a_parent_and_many_siblings>

    def test_can_reroot_a_tree_with_a_parent_and_many_siblings(self):
        tree = Tree("parent", [Tree("a"), Tree("x"), Tree("b"), Tree("c")])
        expected = Tree("x", [Tree("parent", [Tree("a"), Tree("b"), Tree("c")])])
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:28: in from_pov
    self._reorient(node, parent)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7f5c961f8820>
node = <pov.Tree object at 0x7f5c961f8790>, parent = 1

    def _reorient(self, node, parent):
        # Move up the tree, making the current node the parent of its parent
        while parent is not None:
>           grandparent, parent_index = self._find_with_parent(parent.label)
E           AttributeError: 'int' object has no attribute 'label'

exercises/practice/pov/pov.py:48: AttributeError
_________ PovTest.test_can_reroot_a_tree_with_a_parent_and_one_sibling _________

self = <pov_test.PovTest testMethod=test_can_reroot_a_tree_with_a_parent_and_one_sibling>

    def test_can_reroot_a_tree_with_a_parent_and_one_sibling(self):
        tree = Tree("parent", [Tree("x"), Tree("sibling")])
        expected = Tree("x", [Tree("parent", [Tree("sibling")])])
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:28: in from_pov
    self._reorient(node, parent)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7f5c96966560>
node = <pov.Tree object at 0x7f5c96966530>, parent = 0

    def _reorient(self, node, parent):
        # Move up the tree, making the current node the parent of its parent
        while parent is not None:
>           grandparent, parent_index = self._find_with_parent(parent.label)
E           AttributeError: 'int' object has no attribute 'label'

exercises/practice/pov/pov.py:48: AttributeError
______ PovTest.test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree ______

self = <pov_test.PovTest testMethod=test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree>

    def test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree(self):
        tree = Tree(
            "level-0",
            [Tree("level-1", [Tree("level-2", [Tree("level-3", [Tree("x")])])])],
        )
        expected = Tree(
            "x",
            [Tree("level-3", [Tree("level-2", [Tree("level-1", [Tree("level-0")])])])],
        )
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:28: in from_pov
    self._reorient(node, parent)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7f5c961fe530>
node = <pov.Tree object at 0x7f5c961ff2e0>, parent = 0

    def _reorient(self, node, parent):
        # Move up the tree, making the current node the parent of its parent
        while parent is not None:
>           grandparent, parent_index = self._find_with_parent(parent.label)
E           AttributeError: 'int' object has no attribute 'label'

exercises/practice/pov/pov.py:48: AttributeError
______________ PovTest.test_errors_if_destination_does_not_exist _______________

self = <pov_test.PovTest testMethod=test_errors_if_destination_does_not_exist>

    def test_errors_if_destination_does_not_exist(self):
        tree = Tree(
            "parent",
            [
                Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                Tree("sibling-0"),
                Tree("sibling-1"),
            ],
        )
        with self.assertRaises(ValueError) as err:
>           tree.path_to("x", "nonexistent")

exercises/practice/pov/pov_test.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:58: in path_to
    self.from_pov(from_node)
exercises/practice/pov/pov.py:28: in from_pov
    self._reorient(node, parent)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def _reorient(self, node, parent):
        # Move up the tree, making the current node the parent of its parent
        while parent is not None:
>           grandparent, parent_index = self._find_with_parent(parent.label)
E           AttributeError: 'int' object has no attribute 'label'

exercises/practice/pov/pov.py:48: AttributeError
__ PovTest.test_moves_children_of_the_new_root_to_same_level_as_former_parent __

self = <pov_test.PovTest testMethod=test_moves_children_of_the_new_root_to_same_level_as_former_parent>

    def test_moves_children_of_the_new_root_to_same_level_as_former_parent(self):
        tree = Tree("parent", [Tree("x", [Tree("kid-0"), Tree("kid-1")])])
        expected = Tree("x", [Tree("kid-0"), Tree("kid-1"), Tree("parent")])
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:28: in from_pov
    self._reorient(node, parent)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7f5c961e6f80>
node = <pov.Tree object at 0x7f5c961e7f10>, parent = 0

    def _reorient(self, node, parent):
        # Move up the tree, making the current node the parent of its parent
        while parent is not None:
>           grandparent, parent_index = self._find_with_parent(parent.label)
E           AttributeError: 'int' object has no attribute 'label'

exercises/practice/pov/pov.py:48: AttributeError
____ PovTest.test_results_in_the_same_tree_if_the_input_tree_is_a_singleton ____

self = <pov_test.PovTest testMethod=test_results_in_the_same_tree_if_the_input_tree_is_a_singleton>

    def test_results_in_the_same_tree_if_the_input_tree_is_a_singleton(self):
        tree = Tree("x")
        expected = Tree("x")
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov_test.py:173: in assertTreeEquals
    self.assertEqual(result, expected, "{} != {}".format(result, expected))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7f5c961fb640>, other = None

    def __eq__(self, other):
>       return self.__dict__() == other.__dict__()
E       AttributeError: 'NoneType' object has no attribute '__dict__'. Did you mean: '__dir__'?

exercises/practice/pov/pov.py:19: AttributeError
=========================== short test summary info ============================
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_find_path_from_nodes_other_than_x
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_find_path_not_involving_root
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_find_path_to_cousin
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_find_path_to_parent
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_find_path_to_sibling
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_reroot_a_complex_tree_with_cousins
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_reroot_a_tree_with_a_parent_and_many_siblings
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_reroot_a_tree_with_a_parent_and_one_sibling
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree
FAILED exercises/practice/pov/pov_test.py::PovTest::test_errors_if_destination_does_not_exist
FAILED exercises/practice/pov/pov_test.py::PovTest::test_moves_children_of_the_new_root_to_same_level_as_former_parent
FAILED exercises/practice/pov/pov_test.py::PovTest::test_results_in_the_same_tree_if_the_input_tree_is_a_singleton
========================= 12 failed, 3 passed in 0.13s =========================
