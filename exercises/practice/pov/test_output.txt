============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 15 items

exercises/practice/pov/pov_test.py FFFFFFFFFFFFFF.                       [100%]

=================================== FAILURES ===================================
______________ PovTest.test_can_find_path_from_nodes_other_than_x ______________

self = <pov_test.PovTest testMethod=test_can_find_path_from_nodes_other_than_x>

    def test_can_find_path_from_nodes_other_than_x(self):
        tree = Tree("parent", [Tree("a"), Tree("x"), Tree("b"), Tree("c")])
        expected = ["a", "parent", "c"]
>       self.assertEqual(tree.path_to("a", "c"), expected)

exercises/practice/pov/pov_test.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:48: in path_to
    return find_path(root_from_pov, to_node, []) if root_from_pov else None
exercises/practice/pov/pov.py:42: in find_path
    result = find_path(child, target, path + [node.label])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node = <pov.Tree object at 0x7fc580604fa0>, target = 'c', path = ['a']

    def find_path(node, target, path):
        if not node:
            return None
        if node.label == target:
            return path + [target]
        for child in node.children:
            if child.label not in path:
                result = find_path(child, target, path + [node.label])
>           if result:
E           UnboundLocalError: local variable 'result' referenced before assignment

exercises/practice/pov/pov.py:43: UnboundLocalError
________________ PovTest.test_can_find_path_not_involving_root _________________

self = <pov_test.PovTest testMethod=test_can_find_path_not_involving_root>

    def test_can_find_path_not_involving_root(self):
        tree = Tree(
            "grandparent",
            [Tree("parent", [Tree("x"), Tree("sibling-0"), Tree("sibling-1")])],
        )
        expected = ["x", "parent", "sibling-1"]
>       self.assertEqual(tree.path_to("x", "sibling-1"), expected)

exercises/practice/pov/pov_test.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:47: in path_to
    root_from_pov = self.from_pov(from_node)
exercises/practice/pov/pov.py:27: in from_pov
    if new_root != child and new_root not in child.children:
exercises/practice/pov/pov.py:19: in __eq__
    return self.__dict__() == other.__dict__()
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals & position)
_____________________ PovTest.test_can_find_path_to_cousin _____________________

self = <pov_test.PovTest testMethod=test_can_find_path_to_cousin>

    def test_can_find_path_to_cousin(self):
        tree = Tree(
            "grandparent",
            [
                Tree(
                    "parent",
                    [
                        Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                        Tree("sibling-0"),
                        Tree("sibling-1"),
                    ],
                ),
                Tree("uncle", [Tree("cousin-0"), Tree("cousin-1")]),
            ],
        )
        expected = ["x", "parent", "grandparent", "uncle", "cousin-1"]
>       self.assertEqual(tree.path_to("x", "cousin-1"), expected)

exercises/practice/pov/pov_test.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:47: in path_to
    root_from_pov = self.from_pov(from_node)
exercises/practice/pov/pov.py:27: in from_pov
    if new_root != child and new_root not in child.children:
exercises/practice/pov/pov.py:19: in __eq__
    return self.__dict__() == other.__dict__()
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals & position)
_____________________ PovTest.test_can_find_path_to_parent _____________________

self = <pov_test.PovTest testMethod=test_can_find_path_to_parent>

    def test_can_find_path_to_parent(self):
        tree = Tree("parent", [Tree("x"), Tree("sibling")])
        expected = ["x", "parent"]
>       self.assertEqual(tree.path_to("x", "parent"), expected)

exercises/practice/pov/pov_test.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:48: in path_to
    return find_path(root_from_pov, to_node, []) if root_from_pov else None
exercises/practice/pov/pov.py:42: in find_path
    result = find_path(child, target, path + [node.label])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node = <pov.Tree object at 0x7fc5804b7c10>, target = 'parent', path = ['x']

    def find_path(node, target, path):
        if not node:
            return None
        if node.label == target:
            return path + [target]
        for child in node.children:
            if child.label not in path:
                result = find_path(child, target, path + [node.label])
>           if result:
E           UnboundLocalError: local variable 'result' referenced before assignment

exercises/practice/pov/pov.py:43: UnboundLocalError
____________________ PovTest.test_can_find_path_to_sibling _____________________

self = <pov_test.PovTest testMethod=test_can_find_path_to_sibling>

    def test_can_find_path_to_sibling(self):
        tree = Tree("parent", [Tree("a"), Tree("x"), Tree("b"), Tree("c")])
        expected = ["x", "parent", "b"]
>       self.assertEqual(tree.path_to("x", "b"), expected)

exercises/practice/pov/pov_test.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:48: in path_to
    return find_path(root_from_pov, to_node, []) if root_from_pov else None
exercises/practice/pov/pov.py:42: in find_path
    result = find_path(child, target, path + [node.label])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node = <pov.Tree object at 0x7fc580359840>, target = 'b', path = ['x']

    def find_path(node, target, path):
        if not node:
            return None
        if node.label == target:
            return path + [target]
        for child in node.children:
            if child.label not in path:
                result = find_path(child, target, path + [node.label])
>           if result:
E           UnboundLocalError: local variable 'result' referenced before assignment

exercises/practice/pov/pov.py:43: UnboundLocalError
_____________ PovTest.test_can_reroot_a_complex_tree_with_cousins ______________

self = <pov_test.PovTest testMethod=test_can_reroot_a_complex_tree_with_cousins>

    def test_can_reroot_a_complex_tree_with_cousins(self):
        tree = Tree(
            "grandparent",
            [
                Tree(
                    "parent",
                    [
                        Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                        Tree("sibling-0"),
                        Tree("sibling-1"),
                    ],
                ),
                Tree("uncle", [Tree("cousin-0"), Tree("cousin-1")]),
            ],
        )
        expected = Tree(
            "x",
            [
                Tree("kid-1"),
                Tree("kid-0"),
                Tree(
                    "parent",
                    [
                        Tree("sibling-0"),
                        Tree("sibling-1"),
                        Tree(
                            "grandparent",
                            [Tree("uncle", [Tree("cousin-0"), Tree("cousin-1")])],
                        ),
                    ],
                ),
            ],
        )
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:27: in from_pov
    if new_root != child and new_root not in child.children:
exercises/practice/pov/pov.py:19: in __eq__
    return self.__dict__() == other.__dict__()
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
________ PovTest.test_can_reroot_a_tree_with_a_parent_and_many_siblings ________

self = <pov_test.PovTest testMethod=test_can_reroot_a_tree_with_a_parent_and_many_siblings>

    def test_can_reroot_a_tree_with_a_parent_and_many_siblings(self):
        tree = Tree("parent", [Tree("a"), Tree("x"), Tree("b"), Tree("c")])
        expected = Tree("x", [Tree("parent", [Tree("a"), Tree("b"), Tree("c")])])
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov_test.py:173: in assertTreeEquals
    self.assertEqual(result, expected, "{} != {}".format(result, expected))
exercises/practice/pov/pov.py:13: in __str__
    return dumps(self.__dict__(), indent=indent)
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals & position)
_________ PovTest.test_can_reroot_a_tree_with_a_parent_and_one_sibling _________

self = <pov_test.PovTest testMethod=test_can_reroot_a_tree_with_a_parent_and_one_sibling>

    def test_can_reroot_a_tree_with_a_parent_and_one_sibling(self):
        tree = Tree("parent", [Tree("x"), Tree("sibling")])
        expected = Tree("x", [Tree("parent", [Tree("sibling")])])
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov_test.py:173: in assertTreeEquals
    self.assertEqual(result, expected, "{} != {}".format(result, expected))
exercises/practice/pov/pov.py:13: in __str__
    return dumps(self.__dict__(), indent=indent)
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals & position)
______ PovTest.test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree ______

self = <pov_test.PovTest testMethod=test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree>

    def test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree(self):
        tree = Tree(
            "level-0",
            [Tree("level-1", [Tree("level-2", [Tree("level-3", [Tree("x")])])])],
        )
        expected = Tree(
            "x",
            [Tree("level-3", [Tree("level-2", [Tree("level-1", [Tree("level-0")])])])],
        )
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov.py:25: in from_pov
    new_root = child.from_pov(from_node)
exercises/practice/pov/pov.py:25: in from_pov
    new_root = child.from_pov(from_node)
exercises/practice/pov/pov.py:27: in from_pov
    if new_root != child and new_root not in child.children:
exercises/practice/pov/pov.py:19: in __eq__
    return self.__dict__() == other.__dict__()
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pov.Tree object at 0x7fc5804b7370>
other = <pov.Tree object at 0x7fc5804b7370>

    def __lt__(self, other):
>       return self.label < other.label
E       RecursionError: maximum recursion depth exceeded in comparison

exercises/practice/pov/pov.py:16: RecursionError
!!! Recursion error detected, but an error occurred locating the origin of recursion.
  The following exception happened when comparing locals in the stack frame:
    RecursionError: maximum recursion depth exceeded in comparison
  Displaying first and last 10 stack frames out of 961.
______________ PovTest.test_errors_if_destination_does_not_exist _______________

self = <pov_test.PovTest testMethod=test_errors_if_destination_does_not_exist>

    def test_errors_if_destination_does_not_exist(self):
        tree = Tree(
            "parent",
            [
                Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                Tree("sibling-0"),
                Tree("sibling-1"),
            ],
        )
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/pov/pov_test.py:150: AssertionError
_________________ PovTest.test_errors_if_source_does_not_exist _________________

self = <pov_test.PovTest testMethod=test_errors_if_source_does_not_exist>

    def test_errors_if_source_does_not_exist(self):
        tree = Tree(
            "parent",
            [
                Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                Tree("sibling-0"),
                Tree("sibling-1"),
            ],
        )
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/pov/pov_test.py:165: AssertionError
_________ PovTest.test_errors_if_target_does_not_exist_in_a_large_tree _________

self = <pov_test.PovTest testMethod=test_errors_if_target_does_not_exist_in_a_large_tree>

    def test_errors_if_target_does_not_exist_in_a_large_tree(self):
        tree = Tree(
            "parent",
            [
                Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                Tree("sibling-0"),
                Tree("sibling-1"),
            ],
        )
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/pov/pov_test.py:95: AssertionError
_______ PovTest.test_errors_if_target_does_not_exist_in_a_singleton_tree _______

self = <pov_test.PovTest testMethod=test_errors_if_target_does_not_exist_in_a_singleton_tree>

    def test_errors_if_target_does_not_exist_in_a_singleton_tree(self):
        tree = Tree("x")
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/pov/pov_test.py:81: AssertionError
__ PovTest.test_moves_children_of_the_new_root_to_same_level_as_former_parent __

self = <pov_test.PovTest testMethod=test_moves_children_of_the_new_root_to_same_level_as_former_parent>

    def test_moves_children_of_the_new_root_to_same_level_as_former_parent(self):
        tree = Tree("parent", [Tree("x", [Tree("kid-0"), Tree("kid-1")])])
        expected = Tree("x", [Tree("kid-0"), Tree("kid-1"), Tree("parent")])
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov_test.py:173: in assertTreeEquals
    self.assertEqual(result, expected, "{} != {}".format(result, expected))
exercises/practice/pov/pov.py:13: in __str__
    return dumps(self.__dict__(), indent=indent)
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in <listcomp>
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
exercises/practice/pov/pov.py:10: in __dict__
    return {self.label: [c.__dict__() for c in sorted(self.children)]}
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals & position)
=========================== short test summary info ============================
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_find_path_from_nodes_other_than_x
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_find_path_not_involving_root
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_find_path_to_cousin
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_find_path_to_parent
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_find_path_to_sibling
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_reroot_a_complex_tree_with_cousins
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_reroot_a_tree_with_a_parent_and_many_siblings
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_reroot_a_tree_with_a_parent_and_one_sibling
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree
FAILED exercises/practice/pov/pov_test.py::PovTest::test_errors_if_destination_does_not_exist
FAILED exercises/practice/pov/pov_test.py::PovTest::test_errors_if_source_does_not_exist
FAILED exercises/practice/pov/pov_test.py::PovTest::test_errors_if_target_does_not_exist_in_a_large_tree
FAILED exercises/practice/pov/pov_test.py::PovTest::test_errors_if_target_does_not_exist_in_a_singleton_tree
FAILED exercises/practice/pov/pov_test.py::PovTest::test_moves_children_of_the_new_root_to_same_level_as_former_parent
========================= 14 failed, 1 passed in 0.18s =========================
