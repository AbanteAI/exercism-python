============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 15 items

exercises/practice/pov/pov_test.py ..F..F..FFFFF..                       [100%]

=================================== FAILURES ===================================
_____________________ PovTest.test_can_find_path_to_cousin _____________________

self = <pov_test.PovTest testMethod=test_can_find_path_to_cousin>

    def test_can_find_path_to_cousin(self):
        tree = Tree(
            "grandparent",
            [
                Tree(
                    "parent",
                    [
                        Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                        Tree("sibling-0"),
                        Tree("sibling-1"),
                    ],
                ),
                Tree("uncle", [Tree("cousin-0"), Tree("cousin-1")]),
            ],
        )
        expected = ["x", "parent", "grandparent", "uncle", "cousin-1"]
>       self.assertEqual(tree.path_to("x", "cousin-1"), expected)
E       AssertionError: Lists differ: ['x', 'grandparent', 'uncle', 'cousin-1'] != ['x', 'parent', 'grandparent', 'uncle', 'cousin-1']
E       
E       First differing element 1:
E       'grandparent'
E       'parent'
E       
E       Second list contains 1 additional elements.
E       First extra element 4:
E       'cousin-1'
E       
E       - ['x', 'grandparent', 'uncle', 'cousin-1']
E       + ['x', 'parent', 'grandparent', 'uncle', 'cousin-1']
E       ?      ++++++++++

exercises/practice/pov/pov_test.py:126: AssertionError
_____________ PovTest.test_can_reroot_a_complex_tree_with_cousins ______________

self = <pov_test.PovTest testMethod=test_can_reroot_a_complex_tree_with_cousins>

    def test_can_reroot_a_complex_tree_with_cousins(self):
        tree = Tree(
            "grandparent",
            [
                Tree(
                    "parent",
                    [
                        Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                        Tree("sibling-0"),
                        Tree("sibling-1"),
                    ],
                ),
                Tree("uncle", [Tree("cousin-0"), Tree("cousin-1")]),
            ],
        )
        expected = Tree(
            "x",
            [
                Tree("kid-1"),
                Tree("kid-0"),
                Tree(
                    "parent",
                    [
                        Tree("sibling-0"),
                        Tree("sibling-1"),
                        Tree(
                            "grandparent",
                            [Tree("uncle", [Tree("cousin-0"), Tree("cousin-1")])],
                        ),
                    ],
                ),
            ],
        )
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov_test.py:173: in assertTreeEquals
    self.assertEqual(result, expected, "{} != {}".format(result, expected))
E   AssertionError: <pov.Tree object at 0x7f7c8e473a00> != <pov.Tree object at 0x7f7c8e470e50> : {"x": [{"grandparent": [{"uncle": [{"cousin-0": []}, {"cousin-1": []}]}]}, {"kid-0": []}, {"kid-1": []}, {"parent": [{"sibling-0": []}, {"sibling-1": []}]}]} != {"x": [{"kid-0": []}, {"kid-1": []}, {"parent": [{"grandparent": [{"uncle": [{"cousin-0": []}, {"cousin-1": []}]}]}, {"sibling-0": []}, {"sibling-1": []}]}]}
______ PovTest.test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree ______

self = <pov_test.PovTest testMethod=test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree>

    def test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree(self):
        tree = Tree(
            "level-0",
            [Tree("level-1", [Tree("level-2", [Tree("level-3", [Tree("x")])])])],
        )
        expected = Tree(
            "x",
            [Tree("level-3", [Tree("level-2", [Tree("level-1", [Tree("level-0")])])])],
        )
>       self.assertTreeEquals(tree.from_pov("x"), expected)

exercises/practice/pov/pov_test.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/pov/pov_test.py:173: in assertTreeEquals
    self.assertEqual(result, expected, "{} != {}".format(result, expected))
E   AssertionError: <pov.Tree object at 0x7f7c8e600880> != <pov.Tree object at 0x7f7c8e476680> : {"x": [{"level-0": []}, {"level-1": []}, {"level-2": []}, {"level-3": []}]} != {"x": [{"level-3": [{"level-2": [{"level-1": [{"level-0": []}]}]}]}]}
______________ PovTest.test_errors_if_destination_does_not_exist _______________

self = <pov_test.PovTest testMethod=test_errors_if_destination_does_not_exist>

    def test_errors_if_destination_does_not_exist(self):
        tree = Tree(
            "parent",
            [
                Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                Tree("sibling-0"),
                Tree("sibling-1"),
            ],
        )
        with self.assertRaises(ValueError) as err:
            tree.path_to("x", "nonexistent")
        self.assertEqual(type(err.exception), ValueError)
    
>       self.assertEqual(err.exception.args[0], "No path found")
E       AssertionError: 'Target node not found' != 'No path found'
E       - Target node not found
E       + No path found

exercises/practice/pov/pov_test.py:154: AssertionError
_________________ PovTest.test_errors_if_source_does_not_exist _________________

self = <pov_test.PovTest testMethod=test_errors_if_source_does_not_exist>

    def test_errors_if_source_does_not_exist(self):
        tree = Tree(
            "parent",
            [
                Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                Tree("sibling-0"),
                Tree("sibling-1"),
            ],
        )
        with self.assertRaises(ValueError) as err:
            tree.path_to("nonexistent", "x")
        self.assertEqual(type(err.exception), ValueError)
    
>       self.assertEqual(err.exception.args[0], "Tree could not be reoriented")
E       AssertionError: 'Source node not found' != 'Tree could not be reoriented'
E       - Source node not found
E       + Tree could not be reoriented

exercises/practice/pov/pov_test.py:169: AssertionError
_________ PovTest.test_errors_if_target_does_not_exist_in_a_large_tree _________

self = <pov_test.PovTest testMethod=test_errors_if_target_does_not_exist_in_a_large_tree>

    def test_errors_if_target_does_not_exist_in_a_large_tree(self):
        tree = Tree(
            "parent",
            [
                Tree("x", [Tree("kid-0"), Tree("kid-1")]),
                Tree("sibling-0"),
                Tree("sibling-1"),
            ],
        )
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/pov/pov_test.py:95: AssertionError
_______ PovTest.test_errors_if_target_does_not_exist_in_a_singleton_tree _______

self = <pov_test.PovTest testMethod=test_errors_if_target_does_not_exist_in_a_singleton_tree>

    def test_errors_if_target_does_not_exist_in_a_singleton_tree(self):
        tree = Tree("x")
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/pov/pov_test.py:81: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_find_path_to_cousin
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_reroot_a_complex_tree_with_cousins
FAILED exercises/practice/pov/pov_test.py::PovTest::test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree
FAILED exercises/practice/pov/pov_test.py::PovTest::test_errors_if_destination_does_not_exist
FAILED exercises/practice/pov/pov_test.py::PovTest::test_errors_if_source_does_not_exist
FAILED exercises/practice/pov/pov_test.py::PovTest::test_errors_if_target_does_not_exist_in_a_large_tree
FAILED exercises/practice/pov/pov_test.py::PovTest::test_errors_if_target_does_not_exist_in_a_singleton_tree
========================= 7 failed, 8 passed in 0.08s ==========================
