============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1, asyncio-0.21.1
asyncio: mode=strict
collected 35 items

exercises/practice/poker/poker_test.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 94%]
FF                                                                       [100%]

=================================== FAILURES ===================================
_______________ PokerTest.test_a_straight_beats_three_of_a_kind ________________

self = <poker_test.PokerTest testMethod=test_a_straight_beats_three_of_a_kind>

    def test_a_straight_beats_three_of_a_kind(self):
>       self.assertEqual(
            best_hands(["4S 5H 4C 8D 4H", "3S 4D 2S 6D 5C"]), ["3S 4D 2S 6D 5C"]
        )
E       AssertionError: Lists differ: [[(1, 3), (2, 1), (0, 3), (4, 1), (3, 0)]] != ['3S 4D 2S 6D 5C']
E       
E       First differing element 0:
E       [(1, 3), (2, 1), (0, 3), (4, 1), (3, 0)]
E       '3S 4D 2S 6D 5C'
E       
E       - [[(1, 3), (2, 1), (0, 3), (4, 1), (3, 0)]]
E       + ['3S 4D 2S 6D 5C']

exercises/practice/poker/poker_test.py:106: AssertionError
__________________ PokerTest.test_a_tie_has_multiple_winners ___________________

self = <poker_test.PokerTest testMethod=test_a_tie_has_multiple_winners>

    def test_a_tie_has_multiple_winners(self):
        self.assertEqual(
>           best_hands(
                [
                    "4D 5S 6S 8D 3C",
                    "2S 4C 7S 9H 10H",
                    "3S 4S 5D 6H JH",
                    "3H 4H 5C 6C JD",
                ]
            ),
            ["3S 4S 5D 6H JH", "3H 4H 5C 6C JD"],
        )

exercises/practice/poker/poker_test.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:56: in best_hands
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:56: in <listcomp>
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:5: in parse_hand
    return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f6e8f69b520>

>   return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
E   ValueError: substring not found

exercises/practice/poker/poker.py:5: ValueError
______________ PokerTest.test_aces_can_end_a_straight_10_j_q_k_a _______________

self = <poker_test.PokerTest testMethod=test_aces_can_end_a_straight_10_j_q_k_a>

    def test_aces_can_end_a_straight_10_j_q_k_a(self):
        self.assertEqual(
>           best_hands(["4S 5H 4C 8D 4H", "10D JH QS KD AC"]), ["10D JH QS KD AC"]
        )

exercises/practice/poker/poker_test.py:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:56: in best_hands
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:56: in <listcomp>
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:5: in parse_hand
    return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f6e8f6d3ee0>

>   return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
E   ValueError: substring not found

exercises/practice/poker/poker.py:5: ValueError
___________ PokerTest.test_aces_can_end_a_straight_flush_10_j_q_k_a ____________

self = <poker_test.PokerTest testMethod=test_aces_can_end_a_straight_flush_10_j_q_k_a>

    def test_aces_can_end_a_straight_flush_10_j_q_k_a(self):
        self.assertEqual(
>           best_hands(["KC AH AS AD AC", "10C JC QC KC AC"]), ["10C JC QC KC AC"]
        )

exercises/practice/poker/poker_test.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:56: in best_hands
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:56: in <listcomp>
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:5: in parse_hand
    return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f6e8f80dab0>

>   return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
E   ValueError: substring not found

exercises/practice/poker/poker.py:5: ValueError
______________ PokerTest.test_aces_can_start_a_straight_a_2_3_4_5 ______________

self = <poker_test.PokerTest testMethod=test_aces_can_start_a_straight_a_2_3_4_5>

    def test_aces_can_start_a_straight_a_2_3_4_5(self):
>       self.assertEqual(
            best_hands(["4S 5H 4C 8D 4H", "4D AH 3S 2D 5C"]), ["4D AH 3S 2D 5C"]
        )
E       AssertionError: Lists differ: [[(2, 3), (3, 2), (2, 0), (6, 1), (2, 2)]] != ['4D AH 3S 2D 5C']
E       
E       First differing element 0:
E       [(2, 3), (3, 2), (2, 0), (6, 1), (2, 2)]
E       '4D AH 3S 2D 5C'
E       
E       - [[(2, 3), (3, 2), (2, 0), (6, 1), (2, 2)]]
E       + ['4D AH 3S 2D 5C']

exercises/practice/poker/poker_test.py:116: AssertionError
___________ PokerTest.test_aces_can_start_a_straight_flush_a_2_3_4_5 ___________

self = <poker_test.PokerTest testMethod=test_aces_can_start_a_straight_flush_a_2_3_4_5>

    def test_aces_can_start_a_straight_flush_a_2_3_4_5(self):
>       self.assertEqual(
            best_hands(["KS AH AS AD AC", "4H AH 3H 2H 5H"]), ["4H AH 3H 2H 5H"]
        )
E       AssertionError: Lists differ: [[(11, 3), (12, 2), (12, 3), (12, 1), (12, 0)]] != ['4H AH 3H 2H 5H']
E       
E       First differing element 0:
E       [(11, 3), (12, 2), (12, 3), (12, 1), (12, 0)]
E       '4H AH 3H 2H 5H'
E       
E       - [[(11, 3), (12, 2), (12, 3), (12, 1), (12, 0)]]
E       + ['4H AH 3H 2H 5H']

exercises/practice/poker/poker_test.py:194: AssertionError
__ PokerTest.test_aces_cannot_be_in_the_middle_of_a_straight_flush_q_k_a_2_3 ___

self = <poker_test.PokerTest testMethod=test_aces_cannot_be_in_the_middle_of_a_straight_flush_q_k_a_2_3>

    def test_aces_cannot_be_in_the_middle_of_a_straight_flush_q_k_a_2_3(self):
        self.assertEqual(
>           best_hands(["2C AC QC 10C KC", "QH KH AH 2H 3H"]), ["2C AC QC 10C KC"]
        )

exercises/practice/poker/poker_test.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:56: in best_hands
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:56: in <listcomp>
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:5: in parse_hand
    return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f6e8f699450>

>   return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
E   ValueError: substring not found

exercises/practice/poker/poker.py:5: ValueError
_____ PokerTest.test_aces_cannot_be_in_the_middle_of_a_straight_q_k_a_2_3 ______

self = <poker_test.PokerTest testMethod=test_aces_cannot_be_in_the_middle_of_a_straight_q_k_a_2_3>

    def test_aces_cannot_be_in_the_middle_of_a_straight_q_k_a_2_3(self):
>       self.assertEqual(
            best_hands(["2C 3D 7H 5H 2S", "QS KH AC 2D 3S"]), ["2C 3D 7H 5H 2S"]
        )
E       AssertionError: Lists differ: [[(0, 0), (1, 1), (5, 2), (3, 2), (0, 3)]] != ['2C 3D 7H 5H 2S']
E       
E       First differing element 0:
E       [(0, 0), (1, 1), (5, 2), (3, 2), (0, 3)]
E       '2C 3D 7H 5H 2S'
E       
E       - [[(0, 0), (1, 1), (5, 2), (3, 2), (0, 3)]]
E       + ['2C 3D 7H 5H 2S']

exercises/practice/poker/poker_test.py:121: AssertionError
_ PokerTest.test_both_hands_have_a_flush_tie_goes_to_high_card_down_to_the_last_one_if_necessary _

self = <poker_test.PokerTest testMethod=test_both_hands_have_a_flush_tie_goes_to_high_card_down_to_the_last_one_if_necessary>

    def test_both_hands_have_a_flush_tie_goes_to_high_card_down_to_the_last_one_if_necessary(
        self,
    ):
>       self.assertEqual(
            best_hands(["4H 7H 8H 9H 6H", "2S 4S 5S 6S 7S"]), ["4H 7H 8H 9H 6H"]
        )
E       AssertionError: Lists differ: [[(2, 2), (5, 2), (6, 2), (7, 2), (4, 2)],[37 chars] 3)]] != ['4H 7H 8H 9H 6H']
E       
E       First differing element 0:
E       [(2, 2), (5, 2), (6, 2), (7, 2), (4, 2)]
E       '4H 7H 8H 9H 6H'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(0, 3), (2, 3), (3, 3), (4, 3), (5, 3)]
E       
E       + ['4H 7H 8H 9H 6H']
E       - [[(2, 2), (5, 2), (6, 2), (7, 2), (4, 2)],
E       -  [(0, 3), (2, 3), (3, 3), (4, 3), (5, 3)]]

exercises/practice/poker/poker_test.py:145: AssertionError
_ PokerTest.test_both_hands_have_a_full_house_tie_goes_to_highest_ranked_triplet _

self = <poker_test.PokerTest testMethod=test_both_hands_have_a_full_house_tie_goes_to_highest_ranked_triplet>

    def test_both_hands_have_a_full_house_tie_goes_to_highest_ranked_triplet(self):
>       self.assertEqual(
            best_hands(["4H 4S 4D 9S 9D", "5H 5S 5D 8S 8D"]), ["5H 5S 5D 8S 8D"]
        )
E       AssertionError: Lists differ: [[(2, 2), (2, 3), (2, 1), (7, 3), (7, 1)],[37 chars] 1)]] != ['5H 5S 5D 8S 8D']
E       
E       First differing element 0:
E       [(2, 2), (2, 3), (2, 1), (7, 3), (7, 1)]
E       '5H 5S 5D 8S 8D'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(3, 2), (3, 3), (3, 1), (6, 3), (6, 1)]
E       
E       + ['5H 5S 5D 8S 8D']
E       - [[(2, 2), (2, 3), (2, 1), (7, 3), (7, 1)],
E       -  [(3, 2), (3, 3), (3, 1), (6, 3), (6, 1)]]

exercises/practice/poker/poker_test.py:155: AssertionError
_ PokerTest.test_both_hands_have_a_straight_flush_tie_goes_to_highest_ranked_card _

self = <poker_test.PokerTest testMethod=test_both_hands_have_a_straight_flush_tie_goes_to_highest_ranked_card>

    def test_both_hands_have_a_straight_flush_tie_goes_to_highest_ranked_card(self):
>       self.assertEqual(
            best_hands(["4H 6H 7H 8H 5H", "5S 7S 8S 9S 6S"]), ["5S 7S 8S 9S 6S"]
        )
E       AssertionError: Lists differ: [[(2, 2), (4, 2), (5, 2), (6, 2), (3, 2)],[37 chars] 3)]] != ['5S 7S 8S 9S 6S']
E       
E       First differing element 0:
E       [(2, 2), (4, 2), (5, 2), (6, 2), (3, 2)]
E       '5S 7S 8S 9S 6S'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(3, 3), (5, 3), (6, 3), (7, 3), (4, 3)]
E       
E       + ['5S 7S 8S 9S 6S']
E       - [[(2, 2), (4, 2), (5, 2), (6, 2), (3, 2)],
E       -  [(3, 3), (5, 3), (6, 3), (7, 3), (4, 3)]]

exercises/practice/poker/poker_test.py:204: AssertionError
_____ PokerTest.test_both_hands_have_four_of_a_kind_tie_goes_to_high_quad ______

self = <poker_test.PokerTest testMethod=test_both_hands_have_four_of_a_kind_tie_goes_to_high_quad>

    def test_both_hands_have_four_of_a_kind_tie_goes_to_high_quad(self):
>       self.assertEqual(
            best_hands(["2S 2H 2C 8D 2D", "4S 5H 5S 5D 5C"]), ["4S 5H 5S 5D 5C"]
        )
E       AssertionError: Lists differ: [[(0, 3), (0, 2), (0, 0), (6, 1), (0, 1)],[37 chars] 0)]] != ['4S 5H 5S 5D 5C']
E       
E       First differing element 0:
E       [(0, 3), (0, 2), (0, 0), (6, 1), (0, 1)]
E       '4S 5H 5S 5D 5C'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(2, 3), (3, 2), (3, 3), (3, 1), (3, 0)]
E       
E       + ['4S 5H 5S 5D 5C']
E       - [[(0, 3), (0, 2), (0, 0), (6, 1), (0, 1)],
E       -  [(2, 3), (3, 2), (3, 3), (3, 1), (3, 0)]]

exercises/practice/poker/poker_test.py:172: AssertionError
_ PokerTest.test_both_hands_have_three_of_a_kind_tie_goes_to_highest_ranked_triplet _

self = <poker_test.PokerTest testMethod=test_both_hands_have_three_of_a_kind_tie_goes_to_highest_ranked_triplet>

    def test_both_hands_have_three_of_a_kind_tie_goes_to_highest_ranked_triplet(self):
>       self.assertEqual(
            best_hands(["2S 2H 2C 8D JH", "4S AH AS 8C AD"]), ["4S AH AS 8C AD"]
        )
E       AssertionError: Lists differ: [[(0, 3), (0, 2), (0, 0), (6, 1), (9, 2)],[40 chars] 1)]] != ['4S AH AS 8C AD']
E       
E       First differing element 0:
E       [(0, 3), (0, 2), (0, 0), (6, 1), (9, 2)]
E       '4S AH AS 8C AD'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(2, 3), (12, 2), (12, 3), (6, 0), (12, 1)]
E       
E       + ['4S AH AS 8C AD']
E       - [[(0, 3), (0, 2), (0, 0), (6, 1), (9, 2)],
E       -  [(2, 3), (12, 2), (12, 3), (6, 0), (12, 1)]]

exercises/practice/poker/poker_test.py:94: AssertionError
_ PokerTest.test_both_hands_have_two_identically_ranked_pairs_tie_goes_to_remaining_card_kicker _

self = <poker_test.PokerTest testMethod=test_both_hands_have_two_identically_ranked_pairs_tie_goes_to_remaining_card_kicker>

    def test_both_hands_have_two_identically_ranked_pairs_tie_goes_to_remaining_card_kicker(
        self,
    ):
>       self.assertEqual(
            best_hands(["JD QH JS 8D QC", "JS QS JC 2D QD"]), ["JD QH JS 8D QC"]
        )
E       AssertionError: Lists differ: [[(9, 1), (10, 2), (9, 3), (6, 1), (10, 0)[41 chars] 1)]] != ['JD QH JS 8D QC']
E       
E       First differing element 0:
E       [(9, 1), (10, 2), (9, 3), (6, 1), (10, 0)]
E       'JD QH JS 8D QC'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(9, 3), (10, 3), (9, 0), (0, 1), (10, 1)]
E       
E       + ['JD QH JS 8D QC']
E       - [[(9, 1), (10, 2), (9, 3), (6, 1), (10, 0)],
E       -  [(9, 3), (10, 3), (9, 0), (0, 1), (10, 1)]]

exercises/practice/poker/poker_test.py:72: AssertionError
______ PokerTest.test_both_hands_have_two_pairs_highest_ranked_pair_wins _______

self = <poker_test.PokerTest testMethod=test_both_hands_have_two_pairs_highest_ranked_pair_wins>

    def test_both_hands_have_two_pairs_highest_ranked_pair_wins(self):
>       self.assertEqual(
            best_hands(["2S 8H 2D 8D 3H", "4S 5H 4C 8S 5D"]), ["2S 8H 2D 8D 3H"]
        )
E       AssertionError: Lists differ: [[(0, 3), (6, 2), (0, 1), (6, 1), (1, 2)],[37 chars] 1)]] != ['2S 8H 2D 8D 3H']
E       
E       First differing element 0:
E       [(0, 3), (6, 2), (0, 1), (6, 1), (1, 2)]
E       '2S 8H 2D 8D 3H'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(2, 3), (3, 2), (2, 0), (6, 3), (3, 1)]
E       
E       + ['2S 8H 2D 8D 3H']
E       - [[(0, 3), (6, 2), (0, 1), (6, 1), (1, 2)],
E       -  [(2, 3), (3, 2), (2, 0), (6, 3), (3, 1)]]

exercises/practice/poker/poker_test.py:58: AssertionError
_ PokerTest.test_both_hands_have_two_pairs_that_add_to_the_same_value_win_goes_to_highest_pair _

self = <poker_test.PokerTest testMethod=test_both_hands_have_two_pairs_that_add_to_the_same_value_win_goes_to_highest_pair>

    def test_both_hands_have_two_pairs_that_add_to_the_same_value_win_goes_to_highest_pair(
        self,
    ):
>       self.assertEqual(
            best_hands(["6S 6H 3S 3H AS", "7H 7S 2H 2S AC"]), ["7H 7S 2H 2S AC"]
        )
E       AssertionError: Lists differ: [[(4, 3), (4, 2), (1, 3), (1, 2), (12, 3)][39 chars] 0)]] != ['7H 7S 2H 2S AC']
E       
E       First differing element 0:
E       [(4, 3), (4, 2), (1, 3), (1, 2), (12, 3)]
E       '7H 7S 2H 2S AC'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(5, 2), (5, 3), (0, 2), (0, 3), (12, 0)]
E       
E       + ['7H 7S 2H 2S AC']
E       - [[(4, 3), (4, 2), (1, 3), (1, 2), (12, 3)],
E       -  [(5, 2), (5, 3), (0, 2), (0, 3), (12, 0)]]

exercises/practice/poker/poker_test.py:79: AssertionError
_ PokerTest.test_both_hands_have_two_pairs_with_the_same_highest_ranked_pair_tie_goes_to_low_pair _

self = <poker_test.PokerTest testMethod=test_both_hands_have_two_pairs_with_the_same_highest_ranked_pair_tie_goes_to_low_pair>

    def test_both_hands_have_two_pairs_with_the_same_highest_ranked_pair_tie_goes_to_low_pair(
        self,
    ):
>       self.assertEqual(
            best_hands(["2S QS 2C QD JH", "JD QH JS 8D QC"]), ["JD QH JS 8D QC"]
        )
E       AssertionError: Lists differ: [[(0, 3), (10, 3), (0, 0), (10, 1), (9, 2)[41 chars] 0)]] != ['JD QH JS 8D QC']
E       
E       First differing element 0:
E       [(0, 3), (10, 3), (0, 0), (10, 1), (9, 2)]
E       'JD QH JS 8D QC'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(9, 1), (10, 2), (9, 3), (6, 1), (10, 0)]
E       
E       + ['JD QH JS 8D QC']
E       - [[(0, 3), (10, 3), (0, 0), (10, 1), (9, 2)],
E       -  [(9, 1), (10, 2), (9, 3), (6, 1), (10, 0)]]

exercises/practice/poker/poker_test.py:65: AssertionError
__ PokerTest.test_both_hands_with_a_straight_tie_goes_to_highest_ranked_card ___

self = <poker_test.PokerTest testMethod=test_both_hands_with_a_straight_tie_goes_to_highest_ranked_card>

    def test_both_hands_with_a_straight_tie_goes_to_highest_ranked_card(self):
>       self.assertEqual(
            best_hands(["4S 6C 7S 8D 5H", "5S 7H 8S 9D 6H"]), ["5S 7H 8S 9D 6H"]
        )
E       AssertionError: Lists differ: [[(2, 3), (4, 0), (5, 3), (6, 1), (3, 2)],[37 chars] 2)]] != ['5S 7H 8S 9D 6H']
E       
E       First differing element 0:
E       [(2, 3), (4, 0), (5, 3), (6, 1), (3, 2)]
E       '5S 7H 8S 9D 6H'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(3, 3), (5, 2), (6, 3), (7, 1), (4, 2)]
E       
E       + ['5S 7H 8S 9D 6H']
E       - [[(2, 3), (4, 0), (5, 3), (6, 1), (3, 2)],
E       -  [(3, 3), (5, 2), (6, 3), (7, 1), (4, 2)]]

exercises/practice/poker/poker_test.py:126: AssertionError
_ PokerTest.test_even_though_an_ace_is_usually_high_a_5_high_straight_flush_is_the_lowest_scoring_straight_flush _

self = <poker_test.PokerTest testMethod=test_even_though_an_ace_is_usually_high_a_5_high_straight_flush_is_the_lowest_scoring_straight_flush>

    def test_even_though_an_ace_is_usually_high_a_5_high_straight_flush_is_the_lowest_scoring_straight_flush(
        self,
    ):
>       self.assertEqual(
            best_hands(["2H 3H 4H 5H 6H", "4D AD 3D 2D 5D"]), ["2H 3H 4H 5H 6H"]
        )
E       AssertionError: Lists differ: [[(0, 2), (1, 2), (2, 2), (3, 2), (4, 2)]] != ['2H 3H 4H 5H 6H']
E       
E       First differing element 0:
E       [(0, 2), (1, 2), (2, 2), (3, 2), (4, 2)]
E       '2H 3H 4H 5H 6H'
E       
E       - [[(0, 2), (1, 2), (2, 2), (3, 2), (4, 2)]]
E       + ['2H 3H 4H 5H 6H']

exercises/practice/poker/poker_test.py:211: AssertionError
_ PokerTest.test_even_though_an_ace_is_usually_high_a_5_high_straight_is_the_lowest_scoring_straight _

self = <poker_test.PokerTest testMethod=test_even_though_an_ace_is_usually_high_a_5_high_straight_is_the_lowest_scoring_straight>

    def test_even_though_an_ace_is_usually_high_a_5_high_straight_is_the_lowest_scoring_straight(
        self,
    ):
>       self.assertEqual(
            best_hands(["2H 3C 4D 5D 6H", "4S AH 3S 2D 5H"]), ["2H 3C 4D 5D 6H"]
        )
E       AssertionError: Lists differ: [[(0, 2), (1, 0), (2, 1), (3, 1), (4, 2)]] != ['2H 3C 4D 5D 6H']
E       
E       First differing element 0:
E       [(0, 2), (1, 0), (2, 1), (3, 1), (4, 2)]
E       '2H 3C 4D 5D 6H'
E       
E       - [[(0, 2), (1, 0), (2, 1), (3, 1), (4, 2)]]
E       + ['2H 3C 4D 5D 6H']

exercises/practice/poker/poker_test.py:133: AssertionError
____________________ PokerTest.test_flush_beats_a_straight _____________________

self = <poker_test.PokerTest testMethod=test_flush_beats_a_straight>

    def test_flush_beats_a_straight(self):
>       self.assertEqual(
            best_hands(["4C 6H 7D 8D 5H", "2S 4S 5S 6S 7S"]), ["2S 4S 5S 6S 7S"]
        )
E       AssertionError: Lists differ: [[(0, 3), (2, 3), (3, 3), (4, 3), (5, 3)]] != ['2S 4S 5S 6S 7S']
E       
E       First differing element 0:
E       [(0, 3), (2, 3), (3, 3), (4, 3), (5, 3)]
E       '2S 4S 5S 6S 7S'
E       
E       - [[(0, 3), (2, 3), (3, 3), (4, 3), (5, 3)]]
E       + ['2S 4S 5S 6S 7S']

exercises/practice/poker/poker_test.py:138: AssertionError
_______________ PokerTest.test_four_of_a_kind_beats_a_full_house _______________

self = <poker_test.PokerTest testMethod=test_four_of_a_kind_beats_a_full_house>

    def test_four_of_a_kind_beats_a_full_house(self):
>       self.assertEqual(
            best_hands(["4S 5H 4D 5D 4H", "3S 3H 2S 3D 3C"]), ["3S 3H 2S 3D 3C"]
        )
E       AssertionError: Lists differ: [[(1, 3), (1, 2), (0, 3), (1, 1), (1, 0)]] != ['3S 3H 2S 3D 3C']
E       
E       First differing element 0:
E       [(1, 3), (1, 2), (0, 3), (1, 1), (1, 0)]
E       '3S 3H 2S 3D 3C'
E       
E       - [[(1, 3), (1, 2), (0, 3), (1, 1), (1, 0)]]
E       + ['3S 3H 2S 3D 3C']

exercises/practice/poker/poker_test.py:167: AssertionError
___________________ PokerTest.test_full_house_beats_a_flush ____________________

self = <poker_test.PokerTest testMethod=test_full_house_beats_a_flush>

    def test_full_house_beats_a_flush(self):
>       self.assertEqual(
            best_hands(["3H 6H 7H 8H 5H", "4S 5H 4C 5D 4H"]), ["4S 5H 4C 5D 4H"]
        )
E       AssertionError: Lists differ: [[(1, 2), (4, 2), (5, 2), (6, 2), (3, 2)]] != ['4S 5H 4C 5D 4H']
E       
E       First differing element 0:
E       [(1, 2), (4, 2), (5, 2), (6, 2), (3, 2)]
E       '4S 5H 4C 5D 4H'
E       
E       - [[(1, 2), (4, 2), (5, 2), (6, 2), (3, 2)]]
E       + ['4S 5H 4C 5D 4H']

exercises/practice/poker/poker_test.py:150: AssertionError
______________ PokerTest.test_highest_card_out_of_all_hands_wins _______________

self = <poker_test.PokerTest testMethod=test_highest_card_out_of_all_hands_wins>

    def test_highest_card_out_of_all_hands_wins(self):
        self.assertEqual(
>           best_hands(["4D 5S 6S 8D 3C", "2S 4C 7S 9H 10H", "3S 4S 5D 6H JH"]),
            ["3S 4S 5D 6H JH"],
        )

exercises/practice/poker/poker_test.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:56: in best_hands
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:56: in <listcomp>
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:5: in parse_hand
    return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f6e8f6dda80>

>   return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
E   ValueError: substring not found

exercises/practice/poker/poker.py:5: ValueError
_______________________ PokerTest.test_highest_pair_wins _______________________

self = <poker_test.PokerTest testMethod=test_highest_pair_wins>

    def test_highest_pair_wins(self):
>       self.assertEqual(
            best_hands(["4S 2H 6S 2D JH", "2S 4H 6C 4D JD"]), ["2S 4H 6C 4D JD"]
        )
E       AssertionError: Lists differ: [[(2, 3), (0, 2), (4, 3), (0, 1), (9, 2)],[37 chars] 1)]] != ['2S 4H 6C 4D JD']
E       
E       First differing element 0:
E       [(2, 3), (0, 2), (4, 3), (0, 1), (9, 2)]
E       '2S 4H 6C 4D JD'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(0, 3), (2, 2), (4, 0), (2, 1), (9, 1)]
E       
E       + ['2S 4H 6C 4D JD']
E       - [[(2, 3), (0, 2), (4, 3), (0, 1), (9, 2)],
E       -  [(0, 3), (2, 2), (4, 0), (2, 1), (9, 1)]]

exercises/practice/poker/poker_test.py:48: AssertionError
_ PokerTest.test_multiple_hands_with_the_same_high_cards_tie_compares_next_highest_ranked_down_to_last_card _

self = <poker_test.PokerTest testMethod=test_multiple_hands_with_the_same_high_cards_tie_compares_next_highest_ranked_down_to_last_card>

    def test_multiple_hands_with_the_same_high_cards_tie_compares_next_highest_ranked_down_to_last_card(
        self,
    ):
>       self.assertEqual(
            best_hands(["3S 5H 6S 8D 7H", "2S 5D 6D 8C 7S"]), ["3S 5H 6S 8D 7H"]
        )
E       AssertionError: Lists differ: [[(1, 3), (3, 2), (4, 3), (6, 1), (5, 2)],[37 chars] 3)]] != ['3S 5H 6S 8D 7H']
E       
E       First differing element 0:
E       [(1, 3), (3, 2), (4, 3), (6, 1), (5, 2)]
E       '3S 5H 6S 8D 7H'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(0, 3), (3, 1), (4, 1), (6, 0), (5, 3)]
E       
E       + ['3S 5H 6S 8D 7H']
E       - [[(1, 3), (3, 2), (4, 3), (6, 1), (5, 2)],
E       -  [(0, 3), (3, 1), (4, 1), (6, 0), (5, 3)]]

exercises/practice/poker/poker_test.py:38: AssertionError
___________________ PokerTest.test_one_pair_beats_high_card ____________________

self = <poker_test.PokerTest testMethod=test_one_pair_beats_high_card>

    def test_one_pair_beats_high_card(self):
>       self.assertEqual(
            best_hands(["4S 5H 6C 8D KH", "2S 4H 6S 4D JH"]), ["2S 4H 6S 4D JH"]
        )
E       AssertionError: Lists differ: [[(0, 3), (2, 2), (4, 3), (2, 1), (9, 2)]] != ['2S 4H 6S 4D JH']
E       
E       First differing element 0:
E       [(0, 3), (2, 2), (4, 3), (2, 1), (9, 2)]
E       '2S 4H 6S 4D JH'
E       
E       - [[(0, 3), (2, 2), (4, 3), (2, 1), (9, 2)]]
E       + ['2S 4H 6S 4D JH']

exercises/practice/poker/poker_test.py:43: AssertionError
____________________ PokerTest.test_single_hand_always_wins ____________________

self = <poker_test.PokerTest testMethod=test_single_hand_always_wins>

    def test_single_hand_always_wins(self):
>       self.assertEqual(best_hands(["4S 5S 7H 8D JC"]), ["4S 5S 7H 8D JC"])
E       AssertionError: Lists differ: [[(2, 3), (3, 3), (5, 2), (6, 1), (9, 0)]] != ['4S 5S 7H 8D JC']
E       
E       First differing element 0:
E       [(2, 3), (3, 3), (5, 2), (6, 1), (9, 0)]
E       '4S 5S 7H 8D JC'
E       
E       - [[(2, 3), (3, 3), (5, 2), (6, 1), (9, 0)]]
E       + ['4S 5S 7H 8D JC']

exercises/practice/poker/poker_test.py:14: AssertionError
______________ PokerTest.test_straight_flush_beats_four_of_a_kind ______________

self = <poker_test.PokerTest testMethod=test_straight_flush_beats_four_of_a_kind>

    def test_straight_flush_beats_four_of_a_kind(self):
        self.assertEqual(
>           best_hands(["4S 5H 5S 5D 5C", "7S 8S 9S 6S 10S"]), ["7S 8S 9S 6S 10S"]
        )

exercises/practice/poker/poker_test.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:56: in best_hands
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:56: in <listcomp>
    hands = [parse_hand(hand) for hand in hands]
exercises/practice/poker/poker.py:5: in parse_hand
    return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f6e8f713550>

>   return [(ranks.index(card[0]), suits.index(card[1])) for card in hand.split()]
E   ValueError: substring not found

exercises/practice/poker/poker.py:5: ValueError
________________ PokerTest.test_three_of_a_kind_beats_two_pair _________________

self = <poker_test.PokerTest testMethod=test_three_of_a_kind_beats_two_pair>

    def test_three_of_a_kind_beats_two_pair(self):
>       self.assertEqual(
            best_hands(["2S 8H 2H 8D JH", "4S 5H 4C 8S 4H"]), ["4S 5H 4C 8S 4H"]
        )
E       AssertionError: Lists differ: [[(2, 3), (3, 2), (2, 0), (6, 3), (2, 2)]] != ['4S 5H 4C 8S 4H']
E       
E       First differing element 0:
E       [(2, 3), (3, 2), (2, 0), (6, 3), (2, 2)]
E       '4S 5H 4C 8S 4H'
E       
E       - [[(2, 3), (3, 2), (2, 0), (6, 3), (2, 2)]]
E       + ['4S 5H 4C 8S 4H']

exercises/practice/poker/poker_test.py:89: AssertionError
___________________ PokerTest.test_two_pairs_beats_one_pair ____________________

self = <poker_test.PokerTest testMethod=test_two_pairs_beats_one_pair>

    def test_two_pairs_beats_one_pair(self):
>       self.assertEqual(
            best_hands(["2S 8H 6S 8D JH", "4S 5H 4C 8C 5C"]), ["4S 5H 4C 8C 5C"]
        )
E       AssertionError: Lists differ: [[(0, 3), (6, 2), (4, 3), (6, 1), (9, 2)],[37 chars] 0)]] != ['4S 5H 4C 8C 5C']
E       
E       First differing element 0:
E       [(0, 3), (6, 2), (4, 3), (6, 1), (9, 2)]
E       '4S 5H 4C 8C 5C'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(2, 3), (3, 2), (2, 0), (6, 0), (3, 0)]
E       
E       + ['4S 5H 4C 8C 5C']
E       - [[(0, 3), (6, 2), (4, 3), (6, 1), (9, 2)],
E       -  [(2, 3), (3, 2), (2, 0), (6, 0), (3, 0)]]

exercises/practice/poker/poker_test.py:53: AssertionError
____________ PokerTest.test_two_pairs_first_ranked_by_largest_pair _____________

self = <poker_test.PokerTest testMethod=test_two_pairs_first_ranked_by_largest_pair>

    def test_two_pairs_first_ranked_by_largest_pair(self):
>       self.assertEqual(
            best_hands(["5C 2S 5S 4H 4C", "6S 2S 6H 7C 2C"]), ["6S 2S 6H 7C 2C"]
        )
E       AssertionError: Lists differ: [[(3, 0), (0, 3), (3, 3), (2, 2), (2, 0)],[37 chars] 0)]] != ['6S 2S 6H 7C 2C']
E       
E       First differing element 0:
E       [(3, 0), (0, 3), (3, 3), (2, 2), (2, 0)]
E       '6S 2S 6H 7C 2C'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(4, 3), (0, 3), (4, 2), (5, 0), (0, 0)]
E       
E       + ['6S 2S 6H 7C 2C']
E       - [[(3, 0), (0, 3), (3, 3), (2, 2), (2, 0)],
E       -  [(4, 3), (0, 3), (4, 2), (5, 0), (0, 0)]]

exercises/practice/poker/poker_test.py:84: AssertionError
_ PokerTest.test_with_multiple_decks_both_hands_have_a_full_house_with_the_same_triplet_tie_goes_to_the_pair _

self = <poker_test.PokerTest testMethod=test_with_multiple_decks_both_hands_have_a_full_house_with_the_same_triplet_tie_goes_to_the_pair>

    def test_with_multiple_decks_both_hands_have_a_full_house_with_the_same_triplet_tie_goes_to_the_pair(
        self,
    ):
>       self.assertEqual(
            best_hands(["5H 5S 5D 9S 9D", "5H 5S 5D 8S 8D"]), ["5H 5S 5D 9S 9D"]
        )
E       AssertionError: Lists differ: [[(3, 2), (3, 3), (3, 1), (7, 3), (7, 1)],[37 chars] 1)]] != ['5H 5S 5D 9S 9D']
E       
E       First differing element 0:
E       [(3, 2), (3, 3), (3, 1), (7, 3), (7, 1)]
E       '5H 5S 5D 9S 9D'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(3, 2), (3, 3), (3, 1), (6, 3), (6, 1)]
E       
E       + ['5H 5S 5D 9S 9D']
E       - [[(3, 2), (3, 3), (3, 1), (7, 3), (7, 1)],
E       -  [(3, 2), (3, 3), (3, 1), (6, 3), (6, 1)]]

exercises/practice/poker/poker_test.py:162: AssertionError
_ PokerTest.test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker _

self = <poker_test.PokerTest testMethod=test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker>

    def test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker(
        self,
    ):
>       self.assertEqual(
            best_hands(["3S 3H 2S 3D 3C", "3S 3H 4S 3D 3C"]), ["3S 3H 4S 3D 3C"]
        )
E       AssertionError: Lists differ: [[(1, 3), (1, 2), (0, 3), (1, 1), (1, 0)],[37 chars] 0)]] != ['3S 3H 4S 3D 3C']
E       
E       First differing element 0:
E       [(1, 3), (1, 2), (0, 3), (1, 1), (1, 0)]
E       '3S 3H 4S 3D 3C'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(1, 3), (1, 2), (2, 3), (1, 1), (1, 0)]
E       
E       + ['3S 3H 4S 3D 3C']
E       - [[(1, 3), (1, 2), (0, 3), (1, 1), (1, 0)],
E       -  [(1, 3), (1, 2), (2, 3), (1, 1), (1, 0)]]

exercises/practice/poker/poker_test.py:179: AssertionError
_ PokerTest.test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards _

self = <poker_test.PokerTest testMethod=test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards>

    def test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards(
        self,
    ):
>       self.assertEqual(
            best_hands(["4S AH AS 7C AD", "4S AH AS 8C AD"]), ["4S AH AS 8C AD"]
        )
E       AssertionError: Lists differ: [[(2, 3), (12, 2), (12, 3), (5, 0), (12, 1[43 chars] 1)]] != ['4S AH AS 8C AD']
E       
E       First differing element 0:
E       [(2, 3), (12, 2), (12, 3), (5, 0), (12, 1)]
E       '4S AH AS 8C AD'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       [(2, 3), (12, 2), (12, 3), (6, 0), (12, 1)]
E       
E       + ['4S AH AS 8C AD']
E       - [[(2, 3), (12, 2), (12, 3), (5, 0), (12, 1)],
E       -  [(2, 3), (12, 2), (12, 3), (6, 0), (12, 1)]]

exercises/practice/poker/poker_test.py:101: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_a_straight_beats_three_of_a_kind
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_a_tie_has_multiple_winners
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_end_a_straight_10_j_q_k_a
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_end_a_straight_flush_10_j_q_k_a
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_start_a_straight_a_2_3_4_5
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_start_a_straight_flush_a_2_3_4_5
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_cannot_be_in_the_middle_of_a_straight_flush_q_k_a_2_3
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_cannot_be_in_the_middle_of_a_straight_q_k_a_2_3
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_a_flush_tie_goes_to_high_card_down_to_the_last_one_if_necessary
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_a_full_house_tie_goes_to_highest_ranked_triplet
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_a_straight_flush_tie_goes_to_highest_ranked_card
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_four_of_a_kind_tie_goes_to_high_quad
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_three_of_a_kind_tie_goes_to_highest_ranked_triplet
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_two_identically_ranked_pairs_tie_goes_to_remaining_card_kicker
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_two_pairs_highest_ranked_pair_wins
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_two_pairs_that_add_to_the_same_value_win_goes_to_highest_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_two_pairs_with_the_same_highest_ranked_pair_tie_goes_to_low_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_with_a_straight_tie_goes_to_highest_ranked_card
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_even_though_an_ace_is_usually_high_a_5_high_straight_flush_is_the_lowest_scoring_straight_flush
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_even_though_an_ace_is_usually_high_a_5_high_straight_is_the_lowest_scoring_straight
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_flush_beats_a_straight
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_four_of_a_kind_beats_a_full_house
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_full_house_beats_a_flush
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_highest_card_out_of_all_hands_wins
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_highest_pair_wins
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_multiple_hands_with_the_same_high_cards_tie_compares_next_highest_ranked_down_to_last_card
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_one_pair_beats_high_card
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_single_hand_always_wins
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_straight_flush_beats_four_of_a_kind
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_three_of_a_kind_beats_two_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_two_pairs_beats_one_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_two_pairs_first_ranked_by_largest_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_with_multiple_decks_both_hands_have_a_full_house_with_the_same_triplet_tie_goes_to_the_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards
============================== 35 failed in 0.19s ==============================
