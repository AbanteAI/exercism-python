============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 35 items

exercises/practice/poker/poker_test.py .FFFFFF......F.........F....F...F [ 94%]
FF                                                                       [100%]

=================================== FAILURES ===================================
__________________ PokerTest.test_a_tie_has_multiple_winners ___________________

self = <poker_test.PokerTest testMethod=test_a_tie_has_multiple_winners>

    def test_a_tie_has_multiple_winners(self):
        self.assertEqual(
>           best_hands(
                [
                    "4D 5S 6S 8D 3C",
                    "2S 4C 7S 9H 10H",
                    "3S 4S 5D 6H JH",
                    "3H 4H 5C 6C JD",
                ]
            ),
            ["3S 4S 5D 6H JH", "3H 4H 5C 6C JD"],
        )

exercises/practice/poker/poker_test.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:44: in best_hands
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:44: in <listcomp>
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:20: in hand_value
    card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f84131d5570>

>   card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
E   KeyError: '10'

exercises/practice/poker/poker.py:20: KeyError
______________ PokerTest.test_aces_can_end_a_straight_10_j_q_k_a _______________

self = <poker_test.PokerTest testMethod=test_aces_can_end_a_straight_10_j_q_k_a>

    def test_aces_can_end_a_straight_10_j_q_k_a(self):
        self.assertEqual(
>           best_hands(["4S 5H 4C 8D 4H", "10D JH QS KD AC"]), ["10D JH QS KD AC"]
        )

exercises/practice/poker/poker_test.py:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:44: in best_hands
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:44: in <listcomp>
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:20: in hand_value
    card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f841308fbe0>

>   card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
E   KeyError: '10'

exercises/practice/poker/poker.py:20: KeyError
___________ PokerTest.test_aces_can_end_a_straight_flush_10_j_q_k_a ____________

self = <poker_test.PokerTest testMethod=test_aces_can_end_a_straight_flush_10_j_q_k_a>

    def test_aces_can_end_a_straight_flush_10_j_q_k_a(self):
        self.assertEqual(
>           best_hands(["KC AH AS AD AC", "10C JC QC KC AC"]), ["10C JC QC KC AC"]
        )

exercises/practice/poker/poker_test.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:44: in best_hands
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:44: in <listcomp>
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:20: in hand_value
    card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f841304aa70>

>   card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
E   KeyError: '10'

exercises/practice/poker/poker.py:20: KeyError
______________ PokerTest.test_aces_can_start_a_straight_a_2_3_4_5 ______________

self = <poker_test.PokerTest testMethod=test_aces_can_start_a_straight_a_2_3_4_5>

    def test_aces_can_start_a_straight_a_2_3_4_5(self):
>       self.assertEqual(
            best_hands(["4S 5H 4C 8D 4H", "4D AH 3S 2D 5C"]), ["4D AH 3S 2D 5C"]
        )
E       AssertionError: Lists differ: ['4S 5H 4C 8D 4H'] != ['4D AH 3S 2D 5C']
E       
E       First differing element 0:
E       '4S 5H 4C 8D 4H'
E       '4D AH 3S 2D 5C'
E       
E       - ['4S 5H 4C 8D 4H']
E       + ['4D AH 3S 2D 5C']

exercises/practice/poker/poker_test.py:116: AssertionError
___________ PokerTest.test_aces_can_start_a_straight_flush_a_2_3_4_5 ___________

self = <poker_test.PokerTest testMethod=test_aces_can_start_a_straight_flush_a_2_3_4_5>

    def test_aces_can_start_a_straight_flush_a_2_3_4_5(self):
>       self.assertEqual(
            best_hands(["KS AH AS AD AC", "4H AH 3H 2H 5H"]), ["4H AH 3H 2H 5H"]
        )
E       AssertionError: Lists differ: ['KS AH AS AD AC'] != ['4H AH 3H 2H 5H']
E       
E       First differing element 0:
E       'KS AH AS AD AC'
E       '4H AH 3H 2H 5H'
E       
E       - ['KS AH AS AD AC']
E       + ['4H AH 3H 2H 5H']

exercises/practice/poker/poker_test.py:194: AssertionError
__ PokerTest.test_aces_cannot_be_in_the_middle_of_a_straight_flush_q_k_a_2_3 ___

self = <poker_test.PokerTest testMethod=test_aces_cannot_be_in_the_middle_of_a_straight_flush_q_k_a_2_3>

    def test_aces_cannot_be_in_the_middle_of_a_straight_flush_q_k_a_2_3(self):
        self.assertEqual(
>           best_hands(["2C AC QC 10C KC", "QH KH AH 2H 3H"]), ["2C AC QC 10C KC"]
        )

exercises/practice/poker/poker_test.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:44: in best_hands
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:44: in <listcomp>
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:20: in hand_value
    card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f8413193790>

>   card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
E   KeyError: '10'

exercises/practice/poker/poker.py:20: KeyError
_ PokerTest.test_both_hands_have_two_identically_ranked_pairs_tie_goes_to_remaining_card_kicker _

self = <poker_test.PokerTest testMethod=test_both_hands_have_two_identically_ranked_pairs_tie_goes_to_remaining_card_kicker>

    def test_both_hands_have_two_identically_ranked_pairs_tie_goes_to_remaining_card_kicker(
        self,
    ):
>       self.assertEqual(
            best_hands(["JD QH JS 8D QC", "JS QS JC 2D QD"]), ["JD QH JS 8D QC"]
        )
E       AssertionError: Lists differ: ['JD QH JS 8D QC', 'JS QS JC 2D QD'] != ['JD QH JS 8D QC']
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       'JS QS JC 2D QD'
E       
E       - ['JD QH JS 8D QC', 'JS QS JC 2D QD']
E       + ['JD QH JS 8D QC']

exercises/practice/poker/poker_test.py:72: AssertionError
______________ PokerTest.test_highest_card_out_of_all_hands_wins _______________

self = <poker_test.PokerTest testMethod=test_highest_card_out_of_all_hands_wins>

    def test_highest_card_out_of_all_hands_wins(self):
        self.assertEqual(
>           best_hands(["4D 5S 6S 8D 3C", "2S 4C 7S 9H 10H", "3S 4S 5D 6H JH"]),
            ["3S 4S 5D 6H JH"],
        )

exercises/practice/poker/poker_test.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:44: in best_hands
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:44: in <listcomp>
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:20: in hand_value
    card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f84131d6950>

>   card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
E   KeyError: '10'

exercises/practice/poker/poker.py:20: KeyError
______________ PokerTest.test_straight_flush_beats_four_of_a_kind ______________

self = <poker_test.PokerTest testMethod=test_straight_flush_beats_four_of_a_kind>

    def test_straight_flush_beats_four_of_a_kind(self):
        self.assertEqual(
>           best_hands(["4S 5H 5S 5D 5C", "7S 8S 9S 6S 10S"]), ["7S 8S 9S 6S 10S"]
        )

exercises/practice/poker/poker_test.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/poker/poker.py:44: in best_hands
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:44: in <listcomp>
    hand_values = [(hand, hand_value(hand)) for hand in hands]
exercises/practice/poker/poker.py:20: in hand_value
    card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f841308f340>

>   card_ranks = sorted([values[card[:-1]] for card in hand.split()], reverse=True)
E   KeyError: '10'

exercises/practice/poker/poker.py:20: KeyError
_ PokerTest.test_with_multiple_decks_both_hands_have_a_full_house_with_the_same_triplet_tie_goes_to_the_pair _

self = <poker_test.PokerTest testMethod=test_with_multiple_decks_both_hands_have_a_full_house_with_the_same_triplet_tie_goes_to_the_pair>

    def test_with_multiple_decks_both_hands_have_a_full_house_with_the_same_triplet_tie_goes_to_the_pair(
        self,
    ):
>       self.assertEqual(
            best_hands(["5H 5S 5D 9S 9D", "5H 5S 5D 8S 8D"]), ["5H 5S 5D 9S 9D"]
        )
E       AssertionError: Lists differ: ['5H 5S 5D 9S 9D', '5H 5S 5D 8S 8D'] != ['5H 5S 5D 9S 9D']
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       '5H 5S 5D 8S 8D'
E       
E       - ['5H 5S 5D 9S 9D', '5H 5S 5D 8S 8D']
E       + ['5H 5S 5D 9S 9D']

exercises/practice/poker/poker_test.py:162: AssertionError
_ PokerTest.test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker _

self = <poker_test.PokerTest testMethod=test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker>

    def test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker(
        self,
    ):
>       self.assertEqual(
            best_hands(["3S 3H 2S 3D 3C", "3S 3H 4S 3D 3C"]), ["3S 3H 4S 3D 3C"]
        )
E       AssertionError: Lists differ: ['3S 3H 2S 3D 3C', '3S 3H 4S 3D 3C'] != ['3S 3H 4S 3D 3C']
E       
E       First differing element 0:
E       '3S 3H 2S 3D 3C'
E       '3S 3H 4S 3D 3C'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       '3S 3H 4S 3D 3C'
E       
E       - ['3S 3H 2S 3D 3C', '3S 3H 4S 3D 3C']
E       + ['3S 3H 4S 3D 3C']

exercises/practice/poker/poker_test.py:179: AssertionError
_ PokerTest.test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards _

self = <poker_test.PokerTest testMethod=test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards>

    def test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards(
        self,
    ):
>       self.assertEqual(
            best_hands(["4S AH AS 7C AD", "4S AH AS 8C AD"]), ["4S AH AS 8C AD"]
        )
E       AssertionError: Lists differ: ['4S AH AS 7C AD', '4S AH AS 8C AD'] != ['4S AH AS 8C AD']
E       
E       First differing element 0:
E       '4S AH AS 7C AD'
E       '4S AH AS 8C AD'
E       
E       First list contains 1 additional elements.
E       First extra element 1:
E       '4S AH AS 8C AD'
E       
E       - ['4S AH AS 7C AD', '4S AH AS 8C AD']
E       + ['4S AH AS 8C AD']

exercises/practice/poker/poker_test.py:101: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_a_tie_has_multiple_winners
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_end_a_straight_10_j_q_k_a
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_end_a_straight_flush_10_j_q_k_a
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_start_a_straight_a_2_3_4_5
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_start_a_straight_flush_a_2_3_4_5
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_cannot_be_in_the_middle_of_a_straight_flush_q_k_a_2_3
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_two_identically_ranked_pairs_tie_goes_to_remaining_card_kicker
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_highest_card_out_of_all_hands_wins
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_straight_flush_beats_four_of_a_kind
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_with_multiple_decks_both_hands_have_a_full_house_with_the_same_triplet_tie_goes_to_the_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards
======================== 12 failed, 23 passed in 0.11s =========================
