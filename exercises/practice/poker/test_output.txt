============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 35 items

exercises/practice/poker/poker_test.py FFFFFF...FFFF..FFF..FFFFF.F.FFFF. [ 94%]
FF                                                                       [100%]

=================================== FAILURES ===================================
_______________ PokerTest.test_a_straight_beats_three_of_a_kind ________________

self = <poker_test.PokerTest testMethod=test_a_straight_beats_three_of_a_kind>

    def test_a_straight_beats_three_of_a_kind(self):
>       self.assertEqual(
            best_hands(["4S 5H 4C 8D 4H", "3S 4D 2S 6D 5C"]), ["3S 4D 2S 6D 5C"]
        )
E       AssertionError: Lists differ: ['4S 5H 4C 8D 4H'] != ['3S 4D 2S 6D 5C']
E       
E       First differing element 0:
E       '4S 5H 4C 8D 4H'
E       '3S 4D 2S 6D 5C'
E       
E       - ['4S 5H 4C 8D 4H']
E       + ['3S 4D 2S 6D 5C']

exercises/practice/poker/poker_test.py:106: AssertionError
__________________ PokerTest.test_a_tie_has_multiple_winners ___________________

self = <poker_test.PokerTest testMethod=test_a_tie_has_multiple_winners>

    def test_a_tie_has_multiple_winners(self):
>       self.assertEqual(
            best_hands(
                [
                    "4D 5S 6S 8D 3C",
                    "2S 4C 7S 9H 10H",
                    "3S 4S 5D 6H JH",
                    "3H 4H 5C 6C JD",
                ]
            ),
            ["3S 4S 5D 6H JH", "3H 4H 5C 6C JD"],
        )
E       AssertionError: Lists differ: ['4D 5S 6S 8D 3C'] != ['3S 4S 5D 6H JH', '3H 4H 5C 6C JD']
E       
E       First differing element 0:
E       '4D 5S 6S 8D 3C'
E       '3S 4S 5D 6H JH'
E       
E       Second list contains 1 additional elements.
E       First extra element 1:
E       '3H 4H 5C 6C JD'
E       
E       - ['4D 5S 6S 8D 3C']
E       + ['3S 4S 5D 6H JH', '3H 4H 5C 6C JD']

exercises/practice/poker/poker_test.py:23: AssertionError
______________ PokerTest.test_aces_can_end_a_straight_10_j_q_k_a _______________

self = <poker_test.PokerTest testMethod=test_aces_can_end_a_straight_10_j_q_k_a>

    def test_aces_can_end_a_straight_10_j_q_k_a(self):
>       self.assertEqual(
            best_hands(["4S 5H 4C 8D 4H", "10D JH QS KD AC"]), ["10D JH QS KD AC"]
        )
E       AssertionError: Lists differ: ['4S 5H 4C 8D 4H'] != ['10D JH QS KD AC']
E       
E       First differing element 0:
E       '4S 5H 4C 8D 4H'
E       '10D JH QS KD AC'
E       
E       - ['4S 5H 4C 8D 4H']
E       + ['10D JH QS KD AC']

exercises/practice/poker/poker_test.py:111: AssertionError
___________ PokerTest.test_aces_can_end_a_straight_flush_10_j_q_k_a ____________

self = <poker_test.PokerTest testMethod=test_aces_can_end_a_straight_flush_10_j_q_k_a>

    def test_aces_can_end_a_straight_flush_10_j_q_k_a(self):
>       self.assertEqual(
            best_hands(["KC AH AS AD AC", "10C JC QC KC AC"]), ["10C JC QC KC AC"]
        )
E       AssertionError: Lists differ: ['KC AH AS AD AC'] != ['10C JC QC KC AC']
E       
E       First differing element 0:
E       'KC AH AS AD AC'
E       '10C JC QC KC AC'
E       
E       - ['KC AH AS AD AC']
E       + ['10C JC QC KC AC']

exercises/practice/poker/poker_test.py:189: AssertionError
______________ PokerTest.test_aces_can_start_a_straight_a_2_3_4_5 ______________

self = <poker_test.PokerTest testMethod=test_aces_can_start_a_straight_a_2_3_4_5>

    def test_aces_can_start_a_straight_a_2_3_4_5(self):
>       self.assertEqual(
            best_hands(["4S 5H 4C 8D 4H", "4D AH 3S 2D 5C"]), ["4D AH 3S 2D 5C"]
        )
E       AssertionError: Lists differ: ['4S 5H 4C 8D 4H'] != ['4D AH 3S 2D 5C']
E       
E       First differing element 0:
E       '4S 5H 4C 8D 4H'
E       '4D AH 3S 2D 5C'
E       
E       - ['4S 5H 4C 8D 4H']
E       + ['4D AH 3S 2D 5C']

exercises/practice/poker/poker_test.py:116: AssertionError
___________ PokerTest.test_aces_can_start_a_straight_flush_a_2_3_4_5 ___________

self = <poker_test.PokerTest testMethod=test_aces_can_start_a_straight_flush_a_2_3_4_5>

    def test_aces_can_start_a_straight_flush_a_2_3_4_5(self):
>       self.assertEqual(
            best_hands(["KS AH AS AD AC", "4H AH 3H 2H 5H"]), ["4H AH 3H 2H 5H"]
        )
E       AssertionError: Lists differ: ['KS AH AS AD AC'] != ['4H AH 3H 2H 5H']
E       
E       First differing element 0:
E       'KS AH AS AD AC'
E       '4H AH 3H 2H 5H'
E       
E       - ['KS AH AS AD AC']
E       + ['4H AH 3H 2H 5H']

exercises/practice/poker/poker_test.py:194: AssertionError
_ PokerTest.test_both_hands_have_a_full_house_tie_goes_to_highest_ranked_triplet _

self = <poker_test.PokerTest testMethod=test_both_hands_have_a_full_house_tie_goes_to_highest_ranked_triplet>

    def test_both_hands_have_a_full_house_tie_goes_to_highest_ranked_triplet(self):
>       self.assertEqual(
            best_hands(["4H 4S 4D 9S 9D", "5H 5S 5D 8S 8D"]), ["5H 5S 5D 8S 8D"]
        )
E       AssertionError: Lists differ: ['4H 4S 4D 9S 9D'] != ['5H 5S 5D 8S 8D']
E       
E       First differing element 0:
E       '4H 4S 4D 9S 9D'
E       '5H 5S 5D 8S 8D'
E       
E       - ['4H 4S 4D 9S 9D']
E       + ['5H 5S 5D 8S 8D']

exercises/practice/poker/poker_test.py:155: AssertionError
_ PokerTest.test_both_hands_have_a_straight_flush_tie_goes_to_highest_ranked_card _

self = <poker_test.PokerTest testMethod=test_both_hands_have_a_straight_flush_tie_goes_to_highest_ranked_card>

    def test_both_hands_have_a_straight_flush_tie_goes_to_highest_ranked_card(self):
>       self.assertEqual(
            best_hands(["4H 6H 7H 8H 5H", "5S 7S 8S 9S 6S"]), ["5S 7S 8S 9S 6S"]
        )
E       AssertionError: Lists differ: ['4H 6H 7H 8H 5H'] != ['5S 7S 8S 9S 6S']
E       
E       First differing element 0:
E       '4H 6H 7H 8H 5H'
E       '5S 7S 8S 9S 6S'
E       
E       - ['4H 6H 7H 8H 5H']
E       + ['5S 7S 8S 9S 6S']

exercises/practice/poker/poker_test.py:204: AssertionError
_____ PokerTest.test_both_hands_have_four_of_a_kind_tie_goes_to_high_quad ______

self = <poker_test.PokerTest testMethod=test_both_hands_have_four_of_a_kind_tie_goes_to_high_quad>

    def test_both_hands_have_four_of_a_kind_tie_goes_to_high_quad(self):
>       self.assertEqual(
            best_hands(["2S 2H 2C 8D 2D", "4S 5H 5S 5D 5C"]), ["4S 5H 5S 5D 5C"]
        )
E       AssertionError: Lists differ: ['2S 2H 2C 8D 2D'] != ['4S 5H 5S 5D 5C']
E       
E       First differing element 0:
E       '2S 2H 2C 8D 2D'
E       '4S 5H 5S 5D 5C'
E       
E       - ['2S 2H 2C 8D 2D']
E       + ['4S 5H 5S 5D 5C']

exercises/practice/poker/poker_test.py:172: AssertionError
_ PokerTest.test_both_hands_have_three_of_a_kind_tie_goes_to_highest_ranked_triplet _

self = <poker_test.PokerTest testMethod=test_both_hands_have_three_of_a_kind_tie_goes_to_highest_ranked_triplet>

    def test_both_hands_have_three_of_a_kind_tie_goes_to_highest_ranked_triplet(self):
>       self.assertEqual(
            best_hands(["2S 2H 2C 8D JH", "4S AH AS 8C AD"]), ["4S AH AS 8C AD"]
        )
E       AssertionError: Lists differ: ['2S 2H 2C 8D JH'] != ['4S AH AS 8C AD']
E       
E       First differing element 0:
E       '2S 2H 2C 8D JH'
E       '4S AH AS 8C AD'
E       
E       - ['2S 2H 2C 8D JH']
E       + ['4S AH AS 8C AD']

exercises/practice/poker/poker_test.py:94: AssertionError
_ PokerTest.test_both_hands_have_two_pairs_that_add_to_the_same_value_win_goes_to_highest_pair _

self = <poker_test.PokerTest testMethod=test_both_hands_have_two_pairs_that_add_to_the_same_value_win_goes_to_highest_pair>

    def test_both_hands_have_two_pairs_that_add_to_the_same_value_win_goes_to_highest_pair(
        self,
    ):
>       self.assertEqual(
            best_hands(["6S 6H 3S 3H AS", "7H 7S 2H 2S AC"]), ["7H 7S 2H 2S AC"]
        )
E       AssertionError: Lists differ: ['6S 6H 3S 3H AS'] != ['7H 7S 2H 2S AC']
E       
E       First differing element 0:
E       '6S 6H 3S 3H AS'
E       '7H 7S 2H 2S AC'
E       
E       - ['6S 6H 3S 3H AS']
E       + ['7H 7S 2H 2S AC']

exercises/practice/poker/poker_test.py:79: AssertionError
_ PokerTest.test_both_hands_have_two_pairs_with_the_same_highest_ranked_pair_tie_goes_to_low_pair _

self = <poker_test.PokerTest testMethod=test_both_hands_have_two_pairs_with_the_same_highest_ranked_pair_tie_goes_to_low_pair>

    def test_both_hands_have_two_pairs_with_the_same_highest_ranked_pair_tie_goes_to_low_pair(
        self,
    ):
>       self.assertEqual(
            best_hands(["2S QS 2C QD JH", "JD QH JS 8D QC"]), ["JD QH JS 8D QC"]
        )
E       AssertionError: Lists differ: ['2S QS 2C QD JH'] != ['JD QH JS 8D QC']
E       
E       First differing element 0:
E       '2S QS 2C QD JH'
E       'JD QH JS 8D QC'
E       
E       - ['2S QS 2C QD JH']
E       + ['JD QH JS 8D QC']

exercises/practice/poker/poker_test.py:65: AssertionError
__ PokerTest.test_both_hands_with_a_straight_tie_goes_to_highest_ranked_card ___

self = <poker_test.PokerTest testMethod=test_both_hands_with_a_straight_tie_goes_to_highest_ranked_card>

    def test_both_hands_with_a_straight_tie_goes_to_highest_ranked_card(self):
>       self.assertEqual(
            best_hands(["4S 6C 7S 8D 5H", "5S 7H 8S 9D 6H"]), ["5S 7H 8S 9D 6H"]
        )
E       AssertionError: Lists differ: ['4S 6C 7S 8D 5H'] != ['5S 7H 8S 9D 6H']
E       
E       First differing element 0:
E       '4S 6C 7S 8D 5H'
E       '5S 7H 8S 9D 6H'
E       
E       - ['4S 6C 7S 8D 5H']
E       + ['5S 7H 8S 9D 6H']

exercises/practice/poker/poker_test.py:126: AssertionError
____________________ PokerTest.test_flush_beats_a_straight _____________________

self = <poker_test.PokerTest testMethod=test_flush_beats_a_straight>

    def test_flush_beats_a_straight(self):
>       self.assertEqual(
            best_hands(["4C 6H 7D 8D 5H", "2S 4S 5S 6S 7S"]), ["2S 4S 5S 6S 7S"]
        )
E       AssertionError: Lists differ: ['4C 6H 7D 8D 5H'] != ['2S 4S 5S 6S 7S']
E       
E       First differing element 0:
E       '4C 6H 7D 8D 5H'
E       '2S 4S 5S 6S 7S'
E       
E       - ['4C 6H 7D 8D 5H']
E       + ['2S 4S 5S 6S 7S']

exercises/practice/poker/poker_test.py:138: AssertionError
_______________ PokerTest.test_four_of_a_kind_beats_a_full_house _______________

self = <poker_test.PokerTest testMethod=test_four_of_a_kind_beats_a_full_house>

    def test_four_of_a_kind_beats_a_full_house(self):
>       self.assertEqual(
            best_hands(["4S 5H 4D 5D 4H", "3S 3H 2S 3D 3C"]), ["3S 3H 2S 3D 3C"]
        )
E       AssertionError: Lists differ: ['4S 5H 4D 5D 4H'] != ['3S 3H 2S 3D 3C']
E       
E       First differing element 0:
E       '4S 5H 4D 5D 4H'
E       '3S 3H 2S 3D 3C'
E       
E       - ['4S 5H 4D 5D 4H']
E       + ['3S 3H 2S 3D 3C']

exercises/practice/poker/poker_test.py:167: AssertionError
___________________ PokerTest.test_full_house_beats_a_flush ____________________

self = <poker_test.PokerTest testMethod=test_full_house_beats_a_flush>

    def test_full_house_beats_a_flush(self):
>       self.assertEqual(
            best_hands(["3H 6H 7H 8H 5H", "4S 5H 4C 5D 4H"]), ["4S 5H 4C 5D 4H"]
        )
E       AssertionError: Lists differ: ['3H 6H 7H 8H 5H'] != ['4S 5H 4C 5D 4H']
E       
E       First differing element 0:
E       '3H 6H 7H 8H 5H'
E       '4S 5H 4C 5D 4H'
E       
E       - ['3H 6H 7H 8H 5H']
E       + ['4S 5H 4C 5D 4H']

exercises/practice/poker/poker_test.py:150: AssertionError
______________ PokerTest.test_highest_card_out_of_all_hands_wins _______________

self = <poker_test.PokerTest testMethod=test_highest_card_out_of_all_hands_wins>

    def test_highest_card_out_of_all_hands_wins(self):
>       self.assertEqual(
            best_hands(["4D 5S 6S 8D 3C", "2S 4C 7S 9H 10H", "3S 4S 5D 6H JH"]),
            ["3S 4S 5D 6H JH"],
        )
E       AssertionError: Lists differ: ['4D 5S 6S 8D 3C'] != ['3S 4S 5D 6H JH']
E       
E       First differing element 0:
E       '4D 5S 6S 8D 3C'
E       '3S 4S 5D 6H JH'
E       
E       - ['4D 5S 6S 8D 3C']
E       + ['3S 4S 5D 6H JH']

exercises/practice/poker/poker_test.py:17: AssertionError
_______________________ PokerTest.test_highest_pair_wins _______________________

self = <poker_test.PokerTest testMethod=test_highest_pair_wins>

    def test_highest_pair_wins(self):
>       self.assertEqual(
            best_hands(["4S 2H 6S 2D JH", "2S 4H 6C 4D JD"]), ["2S 4H 6C 4D JD"]
        )
E       AssertionError: Lists differ: ['4S 2H 6S 2D JH'] != ['2S 4H 6C 4D JD']
E       
E       First differing element 0:
E       '4S 2H 6S 2D JH'
E       '2S 4H 6C 4D JD'
E       
E       - ['4S 2H 6S 2D JH']
E       + ['2S 4H 6C 4D JD']

exercises/practice/poker/poker_test.py:48: AssertionError
___________________ PokerTest.test_one_pair_beats_high_card ____________________

self = <poker_test.PokerTest testMethod=test_one_pair_beats_high_card>

    def test_one_pair_beats_high_card(self):
>       self.assertEqual(
            best_hands(["4S 5H 6C 8D KH", "2S 4H 6S 4D JH"]), ["2S 4H 6S 4D JH"]
        )
E       AssertionError: Lists differ: ['4S 5H 6C 8D KH'] != ['2S 4H 6S 4D JH']
E       
E       First differing element 0:
E       '4S 5H 6C 8D KH'
E       '2S 4H 6S 4D JH'
E       
E       - ['4S 5H 6C 8D KH']
E       + ['2S 4H 6S 4D JH']

exercises/practice/poker/poker_test.py:43: AssertionError
______________ PokerTest.test_straight_flush_beats_four_of_a_kind ______________

self = <poker_test.PokerTest testMethod=test_straight_flush_beats_four_of_a_kind>

    def test_straight_flush_beats_four_of_a_kind(self):
>       self.assertEqual(
            best_hands(["4S 5H 5S 5D 5C", "7S 8S 9S 6S 10S"]), ["7S 8S 9S 6S 10S"]
        )
E       AssertionError: Lists differ: ['4S 5H 5S 5D 5C'] != ['7S 8S 9S 6S 10S']
E       
E       First differing element 0:
E       '4S 5H 5S 5D 5C'
E       '7S 8S 9S 6S 10S'
E       
E       - ['4S 5H 5S 5D 5C']
E       + ['7S 8S 9S 6S 10S']

exercises/practice/poker/poker_test.py:184: AssertionError
________________ PokerTest.test_three_of_a_kind_beats_two_pair _________________

self = <poker_test.PokerTest testMethod=test_three_of_a_kind_beats_two_pair>

    def test_three_of_a_kind_beats_two_pair(self):
>       self.assertEqual(
            best_hands(["2S 8H 2H 8D JH", "4S 5H 4C 8S 4H"]), ["4S 5H 4C 8S 4H"]
        )
E       AssertionError: Lists differ: ['2S 8H 2H 8D JH'] != ['4S 5H 4C 8S 4H']
E       
E       First differing element 0:
E       '2S 8H 2H 8D JH'
E       '4S 5H 4C 8S 4H'
E       
E       - ['2S 8H 2H 8D JH']
E       + ['4S 5H 4C 8S 4H']

exercises/practice/poker/poker_test.py:89: AssertionError
___________________ PokerTest.test_two_pairs_beats_one_pair ____________________

self = <poker_test.PokerTest testMethod=test_two_pairs_beats_one_pair>

    def test_two_pairs_beats_one_pair(self):
>       self.assertEqual(
            best_hands(["2S 8H 6S 8D JH", "4S 5H 4C 8C 5C"]), ["4S 5H 4C 8C 5C"]
        )
E       AssertionError: Lists differ: ['2S 8H 6S 8D JH'] != ['4S 5H 4C 8C 5C']
E       
E       First differing element 0:
E       '2S 8H 6S 8D JH'
E       '4S 5H 4C 8C 5C'
E       
E       - ['2S 8H 6S 8D JH']
E       + ['4S 5H 4C 8C 5C']

exercises/practice/poker/poker_test.py:53: AssertionError
____________ PokerTest.test_two_pairs_first_ranked_by_largest_pair _____________

self = <poker_test.PokerTest testMethod=test_two_pairs_first_ranked_by_largest_pair>

    def test_two_pairs_first_ranked_by_largest_pair(self):
>       self.assertEqual(
            best_hands(["5C 2S 5S 4H 4C", "6S 2S 6H 7C 2C"]), ["6S 2S 6H 7C 2C"]
        )
E       AssertionError: Lists differ: ['5C 2S 5S 4H 4C'] != ['6S 2S 6H 7C 2C']
E       
E       First differing element 0:
E       '5C 2S 5S 4H 4C'
E       '6S 2S 6H 7C 2C'
E       
E       - ['5C 2S 5S 4H 4C']
E       + ['6S 2S 6H 7C 2C']

exercises/practice/poker/poker_test.py:84: AssertionError
_ PokerTest.test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker _

self = <poker_test.PokerTest testMethod=test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker>

    def test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker(
        self,
    ):
>       self.assertEqual(
            best_hands(["3S 3H 2S 3D 3C", "3S 3H 4S 3D 3C"]), ["3S 3H 4S 3D 3C"]
        )
E       AssertionError: Lists differ: ['3S 3H 2S 3D 3C'] != ['3S 3H 4S 3D 3C']
E       
E       First differing element 0:
E       '3S 3H 2S 3D 3C'
E       '3S 3H 4S 3D 3C'
E       
E       - ['3S 3H 2S 3D 3C']
E       ?         ^
E       
E       + ['3S 3H 4S 3D 3C']
E       ?         ^

exercises/practice/poker/poker_test.py:179: AssertionError
_ PokerTest.test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards _

self = <poker_test.PokerTest testMethod=test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards>

    def test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards(
        self,
    ):
>       self.assertEqual(
            best_hands(["4S AH AS 7C AD", "4S AH AS 8C AD"]), ["4S AH AS 8C AD"]
        )
E       AssertionError: Lists differ: ['4S AH AS 7C AD'] != ['4S AH AS 8C AD']
E       
E       First differing element 0:
E       '4S AH AS 7C AD'
E       '4S AH AS 8C AD'
E       
E       - ['4S AH AS 7C AD']
E       ?            ^
E       
E       + ['4S AH AS 8C AD']
E       ?            ^

exercises/practice/poker/poker_test.py:101: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_a_straight_beats_three_of_a_kind
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_a_tie_has_multiple_winners
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_end_a_straight_10_j_q_k_a
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_end_a_straight_flush_10_j_q_k_a
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_start_a_straight_a_2_3_4_5
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_aces_can_start_a_straight_flush_a_2_3_4_5
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_a_full_house_tie_goes_to_highest_ranked_triplet
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_a_straight_flush_tie_goes_to_highest_ranked_card
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_four_of_a_kind_tie_goes_to_high_quad
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_three_of_a_kind_tie_goes_to_highest_ranked_triplet
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_two_pairs_that_add_to_the_same_value_win_goes_to_highest_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_have_two_pairs_with_the_same_highest_ranked_pair_tie_goes_to_low_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_both_hands_with_a_straight_tie_goes_to_highest_ranked_card
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_flush_beats_a_straight
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_four_of_a_kind_beats_a_full_house
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_full_house_beats_a_flush
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_highest_card_out_of_all_hands_wins
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_highest_pair_wins
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_one_pair_beats_high_card
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_straight_flush_beats_four_of_a_kind
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_three_of_a_kind_beats_two_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_two_pairs_beats_one_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_two_pairs_first_ranked_by_largest_pair
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker
FAILED exercises/practice/poker/poker_test.py::PokerTest::test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards
======================== 25 failed, 10 passed in 0.14s =========================
