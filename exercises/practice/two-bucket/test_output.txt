============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 9 items

exercises/practice/two-bucket/two_bucket_test.py .FFFFFF.F               [100%]

=================================== FAILURES ===================================
_ TwoBucketTest.test_measure_one_step_using_bucket_one_of_size_1_and_bucket_two_of_size_3_start_with_bucket_two _

self = <two_bucket_test.TwoBucketTest testMethod=test_measure_one_step_using_bucket_one_of_size_1_and_bucket_two_of_size_3_start_with_bucket_two>

    def test_measure_one_step_using_bucket_one_of_size_1_and_bucket_two_of_size_3_start_with_bucket_two(
        self,
    ):
>       self.assertEqual(measure(1, 3, 3, "two"), (1, "two", 0))

exercises/practice/two-bucket/two_bucket_test.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bucket_one = 1, bucket_two = 3, goal = 3, start_bucket = 'two'

    def measure(bucket_one, bucket_two, goal, start_bucket):
>       start_bucket = int(start_bucket)
E       ValueError: invalid literal for int() with base 10: 'two'

exercises/practice/two-bucket/two_bucket.py:2: ValueError
_ TwoBucketTest.test_measure_using_bucket_one_of_size_2_and_bucket_two_of_size_3_start_with_bucket_one_and_end_with_bucket_two _

self = <two_bucket_test.TwoBucketTest testMethod=test_measure_using_bucket_one_of_size_2_and_bucket_two_of_size_3_start_with_bucket_one_and_end_with_bucket_two>

    def test_measure_using_bucket_one_of_size_2_and_bucket_two_of_size_3_start_with_bucket_one_and_end_with_bucket_two(
        self,
    ):
>       self.assertEqual(measure(2, 3, 3, "one"), (2, "two", 2))

exercises/practice/two-bucket/two_bucket_test.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bucket_one = 2, bucket_two = 3, goal = 3, start_bucket = 'one'

    def measure(bucket_one, bucket_two, goal, start_bucket):
>       start_bucket = int(start_bucket)
E       ValueError: invalid literal for int() with base 10: 'one'

exercises/practice/two-bucket/two_bucket.py:2: ValueError
_ TwoBucketTest.test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_one _

self = <two_bucket_test.TwoBucketTest testMethod=test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_one>

    def test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_one(
        self,
    ):
>       self.assertEqual(measure(3, 5, 1, "one"), (4, "one", 5))

exercises/practice/two-bucket/two_bucket_test.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bucket_one = 3, bucket_two = 5, goal = 1, start_bucket = 'one'

    def measure(bucket_one, bucket_two, goal, start_bucket):
>       start_bucket = int(start_bucket)
E       ValueError: invalid literal for int() with base 10: 'one'

exercises/practice/two-bucket/two_bucket.py:2: ValueError
_ TwoBucketTest.test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_two _

self = <two_bucket_test.TwoBucketTest testMethod=test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_two>

    def test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_two(
        self,
    ):
>       self.assertEqual(measure(3, 5, 1, "two"), (8, "two", 3))

exercises/practice/two-bucket/two_bucket_test.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bucket_one = 3, bucket_two = 5, goal = 1, start_bucket = 'two'

    def measure(bucket_one, bucket_two, goal, start_bucket):
>       start_bucket = int(start_bucket)
E       ValueError: invalid literal for int() with base 10: 'two'

exercises/practice/two-bucket/two_bucket.py:2: ValueError
_ TwoBucketTest.test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_one _

self = <two_bucket_test.TwoBucketTest testMethod=test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_one>

    def test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_one(
        self,
    ):
>       self.assertEqual(measure(7, 11, 2, "one"), (14, "one", 11))

exercises/practice/two-bucket/two_bucket_test.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bucket_one = 7, bucket_two = 11, goal = 2, start_bucket = 'one'

    def measure(bucket_one, bucket_two, goal, start_bucket):
>       start_bucket = int(start_bucket)
E       ValueError: invalid literal for int() with base 10: 'one'

exercises/practice/two-bucket/two_bucket.py:2: ValueError
_ TwoBucketTest.test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_two _

self = <two_bucket_test.TwoBucketTest testMethod=test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_two>

    def test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_two(
        self,
    ):
>       self.assertEqual(measure(7, 11, 2, "two"), (18, "two", 7))

exercises/practice/two-bucket/two_bucket_test.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bucket_one = 7, bucket_two = 11, goal = 2, start_bucket = 'two'

    def measure(bucket_one, bucket_two, goal, start_bucket):
>       start_bucket = int(start_bucket)
E       ValueError: invalid literal for int() with base 10: 'two'

exercises/practice/two-bucket/two_bucket.py:2: ValueError
_ TwoBucketTest.test_with_the_same_buckets_but_a_different_goal_then_it_is_possible _

self = <two_bucket_test.TwoBucketTest testMethod=test_with_the_same_buckets_but_a_different_goal_then_it_is_possible>

    def test_with_the_same_buckets_but_a_different_goal_then_it_is_possible(self):
>       self.assertEqual(measure(6, 15, 9, "one"), (10, "two", 0))

exercises/practice/two-bucket/two_bucket_test.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bucket_one = 6, bucket_two = 15, goal = 9, start_bucket = 'one'

    def measure(bucket_one, bucket_two, goal, start_bucket):
>       start_bucket = int(start_bucket)
E       ValueError: invalid literal for int() with base 10: 'one'

exercises/practice/two-bucket/two_bucket.py:2: ValueError
=========================== short test summary info ============================
FAILED exercises/practice/two-bucket/two_bucket_test.py::TwoBucketTest::test_measure_one_step_using_bucket_one_of_size_1_and_bucket_two_of_size_3_start_with_bucket_two
FAILED exercises/practice/two-bucket/two_bucket_test.py::TwoBucketTest::test_measure_using_bucket_one_of_size_2_and_bucket_two_of_size_3_start_with_bucket_one_and_end_with_bucket_two
FAILED exercises/practice/two-bucket/two_bucket_test.py::TwoBucketTest::test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_one
FAILED exercises/practice/two-bucket/two_bucket_test.py::TwoBucketTest::test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_two
FAILED exercises/practice/two-bucket/two_bucket_test.py::TwoBucketTest::test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_one
FAILED exercises/practice/two-bucket/two_bucket_test.py::TwoBucketTest::test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_two
FAILED exercises/practice/two-bucket/two_bucket_test.py::TwoBucketTest::test_with_the_same_buckets_but_a_different_goal_then_it_is_possible
========================= 7 failed, 2 passed in 0.07s ==========================
