============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 43 items

exercises/practice/rational-numbers/rational_numbers_test.py ........... [ 25%]
.........FFFFFFF...FF...........                                         [100%]

=================================== FAILURES ===================================
_ RationalNumbersTest.test_raise_a_negative_rational_number_to_a_positive_integer_power _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_negative_rational_number_to_a_positive_integer_power>

    def test_raise_a_negative_rational_number_to_a_positive_integer_power(self):
>       self.assertEqual(Rational(-1, 2) ** 3, Rational(-1, 8))

exercises/practice/rational-numbers/rational_numbers_test.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/rational-numbers/rational_numbers.py:53: in __pow__
    return Rational(new_numer, new_denom)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Rational' object has no attribute 'numer'") raised in repr()] Rational object at 0x7f14ca9ba770>
numer = -1.0, denom = 8.0

    def __init__(self, numer, denom):
        if denom == 0:
            raise ValueError("Denominator cannot be zero.")
>       common_divisor = gcd(numer, denom)
E       TypeError: 'float' object cannot be interpreted as an integer

exercises/practice/rational-numbers/rational_numbers.py:7: TypeError
_ RationalNumbersTest.test_raise_a_negative_rational_number_to_an_even_negative_integer_power _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_negative_rational_number_to_an_even_negative_integer_power>

    def test_raise_a_negative_rational_number_to_an_even_negative_integer_power(self):
>       self.assertEqual(Rational(-3, 5) ** -2, Rational(25, 9))

exercises/practice/rational-numbers/rational_numbers_test.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/rational-numbers/rational_numbers.py:53: in __pow__
    return Rational(new_numer, new_denom)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Rational' object has no attribute 'numer'") raised in repr()] Rational object at 0x7f14cb1cde70>
numer = 25.0, denom = 9.0

    def __init__(self, numer, denom):
        if denom == 0:
            raise ValueError("Denominator cannot be zero.")
>       common_divisor = gcd(numer, denom)
E       TypeError: 'float' object cannot be interpreted as an integer

exercises/practice/rational-numbers/rational_numbers.py:7: TypeError
_ RationalNumbersTest.test_raise_a_negative_rational_number_to_an_odd_negative_integer_power _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_negative_rational_number_to_an_odd_negative_integer_power>

    def test_raise_a_negative_rational_number_to_an_odd_negative_integer_power(self):
>       self.assertEqual(Rational(-3, 5) ** -3, Rational(-125, 27))

exercises/practice/rational-numbers/rational_numbers_test.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/rational-numbers/rational_numbers.py:53: in __pow__
    return Rational(new_numer, new_denom)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Rational' object has no attribute 'numer'") raised in repr()] Rational object at 0x7f14caa6b190>
numer = 125.0, denom = -27.0

    def __init__(self, numer, denom):
        if denom == 0:
            raise ValueError("Denominator cannot be zero.")
>       common_divisor = gcd(numer, denom)
E       TypeError: 'float' object cannot be interpreted as an integer

exercises/practice/rational-numbers/rational_numbers.py:7: TypeError
_ RationalNumbersTest.test_raise_a_negative_rational_number_to_the_power_of_zero _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_negative_rational_number_to_the_power_of_zero>

    def test_raise_a_negative_rational_number_to_the_power_of_zero(self):
>       self.assertEqual(Rational(-1, 2) ** 0, Rational(1, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/rational-numbers/rational_numbers.py:53: in __pow__
    return Rational(new_numer, new_denom)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Rational' object has no attribute 'numer'") raised in repr()] Rational object at 0x7f14caa6d090>
numer = 1.0, denom = 1.0

    def __init__(self, numer, denom):
        if denom == 0:
            raise ValueError("Denominator cannot be zero.")
>       common_divisor = gcd(numer, denom)
E       TypeError: 'float' object cannot be interpreted as an integer

exercises/practice/rational-numbers/rational_numbers.py:7: TypeError
_ RationalNumbersTest.test_raise_a_positive_rational_number_to_a_negative_integer_power _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_positive_rational_number_to_a_negative_integer_power>

    def test_raise_a_positive_rational_number_to_a_negative_integer_power(self):
>       self.assertEqual(Rational(3, 5) ** -2, Rational(25, 9))

exercises/practice/rational-numbers/rational_numbers_test.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/rational-numbers/rational_numbers.py:53: in __pow__
    return Rational(new_numer, new_denom)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Rational' object has no attribute 'numer'") raised in repr()] Rational object at 0x7f14caa74250>
numer = 25.0, denom = 9.0

    def __init__(self, numer, denom):
        if denom == 0:
            raise ValueError("Denominator cannot be zero.")
>       common_divisor = gcd(numer, denom)
E       TypeError: 'float' object cannot be interpreted as an integer

exercises/practice/rational-numbers/rational_numbers.py:7: TypeError
_ RationalNumbersTest.test_raise_a_positive_rational_number_to_a_positive_integer_power _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_positive_rational_number_to_a_positive_integer_power>

    def test_raise_a_positive_rational_number_to_a_positive_integer_power(self):
>       self.assertEqual(Rational(1, 2) ** 3, Rational(1, 8))

exercises/practice/rational-numbers/rational_numbers_test.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/rational-numbers/rational_numbers.py:53: in __pow__
    return Rational(new_numer, new_denom)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Rational' object has no attribute 'numer'") raised in repr()] Rational object at 0x7f14ca9b9de0>
numer = 1.0, denom = 8.0

    def __init__(self, numer, denom):
        if denom == 0:
            raise ValueError("Denominator cannot be zero.")
>       common_divisor = gcd(numer, denom)
E       TypeError: 'float' object cannot be interpreted as an integer

exercises/practice/rational-numbers/rational_numbers.py:7: TypeError
_ RationalNumbersTest.test_raise_a_positive_rational_number_to_the_power_of_zero _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_positive_rational_number_to_the_power_of_zero>

    def test_raise_a_positive_rational_number_to_the_power_of_zero(self):
>       self.assertEqual(Rational(1, 2) ** 0, Rational(1, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/rational-numbers/rational_numbers.py:53: in __pow__
    return Rational(new_numer, new_denom)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Rational' object has no attribute 'numer'") raised in repr()] Rational object at 0x7f14caa69300>
numer = 1.0, denom = 1.0

    def __init__(self, numer, denom):
        if denom == 0:
            raise ValueError("Denominator cannot be zero.")
>       common_divisor = gcd(numer, denom)
E       TypeError: 'float' object cannot be interpreted as an integer

exercises/practice/rational-numbers/rational_numbers.py:7: TypeError
____________ RationalNumbersTest.test_raise_one_to_an_integer_power ____________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_one_to_an_integer_power>

    def test_raise_one_to_an_integer_power(self):
>       self.assertEqual(Rational(1, 1) ** 4, Rational(1, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/rational-numbers/rational_numbers.py:53: in __pow__
    return Rational(new_numer, new_denom)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Rational' object has no attribute 'numer'") raised in repr()] Rational object at 0x7f14caa6a800>
numer = 1.0, denom = 1.0

    def __init__(self, numer, denom):
        if denom == 0:
            raise ValueError("Denominator cannot be zero.")
>       common_divisor = gcd(numer, denom)
E       TypeError: 'float' object cannot be interpreted as an integer

exercises/practice/rational-numbers/rational_numbers.py:7: TypeError
___________ RationalNumbersTest.test_raise_zero_to_an_integer_power ____________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_zero_to_an_integer_power>

    def test_raise_zero_to_an_integer_power(self):
>       self.assertEqual(Rational(0, 1) ** 5, Rational(0, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/rational-numbers/rational_numbers.py:53: in __pow__
    return Rational(new_numer, new_denom)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Rational' object has no attribute 'numer'") raised in repr()] Rational object at 0x7f14caa6cc10>
numer = 0.0, denom = 1.0

    def __init__(self, numer, denom):
        if denom == 0:
            raise ValueError("Denominator cannot be zero.")
>       common_divisor = gcd(numer, denom)
E       TypeError: 'float' object cannot be interpreted as an integer

exercises/practice/rational-numbers/rational_numbers.py:7: TypeError
=========================== short test summary info ============================
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_negative_rational_number_to_a_positive_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_negative_rational_number_to_an_even_negative_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_negative_rational_number_to_an_odd_negative_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_negative_rational_number_to_the_power_of_zero
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_positive_rational_number_to_a_negative_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_positive_rational_number_to_a_positive_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_positive_rational_number_to_the_power_of_zero
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_one_to_an_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_zero_to_an_integer_power
========================= 9 failed, 34 passed in 0.12s =========================
