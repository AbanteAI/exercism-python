============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 43 items

exercises/practice/rational-numbers/rational_numbers_test.py FFFFFFFFFFF [ 25%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF                                         [100%]

=================================== FAILURES ===================================
____ RationalNumbersTest.test_absolute_value_of_a_negative_rational_number _____

self = <rational_numbers_test.RationalNumbersTest testMethod=test_absolute_value_of_a_negative_rational_number>

    def test_absolute_value_of_a_negative_rational_number(self):
>       self.assertEqual(abs(Rational(-1, 2)), Rational(1, 2))

exercises/practice/rational-numbers/rational_numbers_test.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/2, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_absolute_value_of_a_negative_rational_number_with_negative_denominator _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_absolute_value_of_a_negative_rational_number_with_negative_denominator>

    def test_absolute_value_of_a_negative_rational_number_with_negative_denominator(
        self,
    ):
>       self.assertEqual(abs(Rational(1, -2)), Rational(1, 2))

exercises/practice/rational-numbers/rational_numbers_test.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/2, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
____ RationalNumbersTest.test_absolute_value_of_a_positive_rational_number _____

self = <rational_numbers_test.RationalNumbersTest testMethod=test_absolute_value_of_a_positive_rational_number>

    def test_absolute_value_of_a_positive_rational_number(self):
>       self.assertEqual(abs(Rational(1, 2)), Rational(1, 2))

exercises/practice/rational-numbers/rational_numbers_test.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/2, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_absolute_value_of_a_positive_rational_number_with_negative_numerator_and_denominator _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_absolute_value_of_a_positive_rational_number_with_negative_numerator_and_denominator>

    def test_absolute_value_of_a_positive_rational_number_with_negative_numerator_and_denominator(
        self,
    ):
>       self.assertEqual(abs(Rational(-1, -2)), Rational(1, 2))

exercises/practice/rational-numbers/rational_numbers_test.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/2, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_absolute_value_of_a_rational_number_is_reduced_to_lowest_terms _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_absolute_value_of_a_rational_number_is_reduced_to_lowest_terms>

    def test_absolute_value_of_a_rational_number_is_reduced_to_lowest_terms(self):
>       self.assertEqual(abs(Rational(2, 4)), Rational(1, 2))

exercises/practice/rational-numbers/rational_numbers_test.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/2, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_______________ RationalNumbersTest.test_absolute_value_of_zero ________________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_absolute_value_of_zero>

    def test_absolute_value_of_zero(self):
>       self.assertEqual(abs(Rational(0, 1)), Rational(0, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0/1, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_add_a_positive_rational_number_and_a_negative_rational_number _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_add_a_positive_rational_number_and_a_negative_rational_number>

    def test_add_a_positive_rational_number_and_a_negative_rational_number(self):
>       self.assertEqual(Rational(1, 2) + Rational(-2, 3), Rational(-1, 6))

exercises/practice/rational-numbers/rational_numbers_test.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = -1/6, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
____ RationalNumbersTest.test_add_a_rational_number_to_its_additive_inverse ____

self = <rational_numbers_test.RationalNumbersTest testMethod=test_add_a_rational_number_to_its_additive_inverse>

    def test_add_a_rational_number_to_its_additive_inverse(self):
>       self.assertEqual(Rational(1, 2) + Rational(-1, 2), Rational(0, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0/1, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
__________ RationalNumbersTest.test_add_two_negative_rational_numbers __________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_add_two_negative_rational_numbers>

    def test_add_two_negative_rational_numbers(self):
>       self.assertEqual(Rational(-1, 2) + Rational(-2, 3), Rational(-7, 6))

exercises/practice/rational-numbers/rational_numbers_test.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = -7/6, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
__________ RationalNumbersTest.test_add_two_positive_rational_numbers __________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_add_two_positive_rational_numbers>

    def test_add_two_positive_rational_numbers(self):
>       self.assertEqual(Rational(1, 2) + Rational(2, 3), Rational(7, 6))

exercises/practice/rational-numbers/rational_numbers_test.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 7/6, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_divide_a_positive_rational_number_by_a_negative_rational_number _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_divide_a_positive_rational_number_by_a_negative_rational_number>

    def test_divide_a_positive_rational_number_by_a_negative_rational_number(self):
>       self.assertEqual(Rational(1, 2) / Rational(-2, 3), Rational(-3, 4))

exercises/practice/rational-numbers/rational_numbers_test.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = -3/4, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
____________ RationalNumbersTest.test_divide_a_rational_number_by_1 ____________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_divide_a_rational_number_by_1>

    def test_divide_a_rational_number_by_1(self):
>       self.assertEqual(Rational(1, 2) / Rational(1, 1), Rational(1, 2))

exercises/practice/rational-numbers/rational_numbers_test.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/2, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
________ RationalNumbersTest.test_divide_two_negative_rational_numbers _________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_divide_two_negative_rational_numbers>

    def test_divide_two_negative_rational_numbers(self):
>       self.assertEqual(Rational(-1, 2) / Rational(-2, 3), Rational(3, 4))

exercises/practice/rational-numbers/rational_numbers_test.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 3/4, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
________ RationalNumbersTest.test_divide_two_positive_rational_numbers _________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_divide_two_positive_rational_numbers>

    def test_divide_two_positive_rational_numbers(self):
>       self.assertEqual(Rational(1, 2) / Rational(2, 3), Rational(3, 4))

exercises/practice/rational-numbers/rational_numbers_test.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 3/4, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_multiply_a_negative_rational_number_by_a_positive_rational_number _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_multiply_a_negative_rational_number_by_a_positive_rational_number>

    def test_multiply_a_negative_rational_number_by_a_positive_rational_number(self):
>       self.assertEqual(Rational(-1, 2) * Rational(2, 3), Rational(-1, 3))

exercises/practice/rational-numbers/rational_numbers_test.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = -1/3, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
___________ RationalNumbersTest.test_multiply_a_rational_number_by_0 ___________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_multiply_a_rational_number_by_0>

    def test_multiply_a_rational_number_by_0(self):
>       self.assertEqual(Rational(1, 2) * Rational(0, 1), Rational(0, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0/1, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
___________ RationalNumbersTest.test_multiply_a_rational_number_by_1 ___________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_multiply_a_rational_number_by_1>

    def test_multiply_a_rational_number_by_1(self):
>       self.assertEqual(Rational(1, 2) * Rational(1, 1), Rational(1, 2))

exercises/practice/rational-numbers/rational_numbers_test.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/2, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
____ RationalNumbersTest.test_multiply_a_rational_number_by_its_reciprocal _____

self = <rational_numbers_test.RationalNumbersTest testMethod=test_multiply_a_rational_number_by_its_reciprocal>

    def test_multiply_a_rational_number_by_its_reciprocal(self):
>       self.assertEqual(Rational(1, 2) * Rational(2, 1), Rational(1, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/1, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_______ RationalNumbersTest.test_multiply_two_negative_rational_numbers ________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_multiply_two_negative_rational_numbers>

    def test_multiply_two_negative_rational_numbers(self):
>       self.assertEqual(Rational(-1, 2) * Rational(-2, 3), Rational(1, 3))

exercises/practice/rational-numbers/rational_numbers_test.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/3, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_______ RationalNumbersTest.test_multiply_two_positive_rational_numbers ________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_multiply_two_positive_rational_numbers>

    def test_multiply_two_positive_rational_numbers(self):
>       self.assertEqual(Rational(1, 2) * Rational(2, 3), Rational(1, 3))

exercises/practice/rational-numbers/rational_numbers_test.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/3, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_raise_a_negative_rational_number_to_a_positive_integer_power _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_negative_rational_number_to_a_positive_integer_power>

    def test_raise_a_negative_rational_number_to_a_positive_integer_power(self):
>       self.assertEqual(Rational(-1, 2) ** 3, Rational(-1, 8))

exercises/practice/rational-numbers/rational_numbers_test.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = -1/8, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_raise_a_negative_rational_number_to_an_even_negative_integer_power _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_negative_rational_number_to_an_even_negative_integer_power>

    def test_raise_a_negative_rational_number_to_an_even_negative_integer_power(self):
>       self.assertEqual(Rational(-3, 5) ** -2, Rational(25, 9))

exercises/practice/rational-numbers/rational_numbers_test.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 25/9, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_raise_a_negative_rational_number_to_an_odd_negative_integer_power _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_negative_rational_number_to_an_odd_negative_integer_power>

    def test_raise_a_negative_rational_number_to_an_odd_negative_integer_power(self):
>       self.assertEqual(Rational(-3, 5) ** -3, Rational(-125, 27))

exercises/practice/rational-numbers/rational_numbers_test.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = -125/27, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_raise_a_negative_rational_number_to_the_power_of_zero _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_negative_rational_number_to_the_power_of_zero>

    def test_raise_a_negative_rational_number_to_the_power_of_zero(self):
>       self.assertEqual(Rational(-1, 2) ** 0, Rational(1, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/1, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_raise_a_positive_rational_number_to_a_negative_integer_power _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_positive_rational_number_to_a_negative_integer_power>

    def test_raise_a_positive_rational_number_to_a_negative_integer_power(self):
>       self.assertEqual(Rational(3, 5) ** -2, Rational(25, 9))

exercises/practice/rational-numbers/rational_numbers_test.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 25/9, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_raise_a_positive_rational_number_to_a_positive_integer_power _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_positive_rational_number_to_a_positive_integer_power>

    def test_raise_a_positive_rational_number_to_a_positive_integer_power(self):
>       self.assertEqual(Rational(1, 2) ** 3, Rational(1, 8))

exercises/practice/rational-numbers/rational_numbers_test.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/8, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_ RationalNumbersTest.test_raise_a_positive_rational_number_to_the_power_of_zero _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_positive_rational_number_to_the_power_of_zero>

    def test_raise_a_positive_rational_number_to_the_power_of_zero(self):
>       self.assertEqual(Rational(1, 2) ** 0, Rational(1, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/1, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
__ RationalNumbersTest.test_raise_a_real_number_to_a_negative_rational_number __

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_real_number_to_a_negative_rational_number>

    def test_raise_a_real_number_to_a_negative_rational_number(self):
>       self.assertAlmostEqual(9 ** Rational(-1, 2), 0.3333333333333333, places=8)
E       TypeError: unsupported operand type(s) for -: 'NoneType' and 'float'

exercises/practice/rational-numbers/rational_numbers_test.py:137: TypeError
__ RationalNumbersTest.test_raise_a_real_number_to_a_positive_rational_number __

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_real_number_to_a_positive_rational_number>

    def test_raise_a_real_number_to_a_positive_rational_number(self):
>       self.assertAlmostEqual(8 ** Rational(4, 3), 16.0, places=8)
E       TypeError: unsupported operand type(s) for -: 'NoneType' and 'float'

exercises/practice/rational-numbers/rational_numbers_test.py:134: TypeError
____ RationalNumbersTest.test_raise_a_real_number_to_a_zero_rational_number ____

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_a_real_number_to_a_zero_rational_number>

    def test_raise_a_real_number_to_a_zero_rational_number(self):
>       self.assertAlmostEqual(2 ** Rational(0, 1), 1.0, places=8)
E       TypeError: unsupported operand type(s) for -: 'NoneType' and 'float'

exercises/practice/rational-numbers/rational_numbers_test.py:140: TypeError
____________ RationalNumbersTest.test_raise_one_to_an_integer_power ____________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_one_to_an_integer_power>

    def test_raise_one_to_an_integer_power(self):
>       self.assertEqual(Rational(1, 1) ** 4, Rational(1, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/1, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
___________ RationalNumbersTest.test_raise_zero_to_an_integer_power ____________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_raise_zero_to_an_integer_power>

    def test_raise_zero_to_an_integer_power(self):
>       self.assertEqual(Rational(0, 1) ** 5, Rational(0, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0/1, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
__ RationalNumbersTest.test_reduce_a_negative_rational_number_to_lowest_terms __

self = <rational_numbers_test.RationalNumbersTest testMethod=test_reduce_a_negative_rational_number_to_lowest_terms>

    def test_reduce_a_negative_rational_number_to_lowest_terms(self):
>       self.assertEqual(Rational(-4, 6), Rational(-2, 3))
E       AssertionError: -4/6 != -2/3

exercises/practice/rational-numbers/rational_numbers_test.py:151: AssertionError
__ RationalNumbersTest.test_reduce_a_positive_rational_number_to_lowest_terms __

self = <rational_numbers_test.RationalNumbersTest testMethod=test_reduce_a_positive_rational_number_to_lowest_terms>

    def test_reduce_a_positive_rational_number_to_lowest_terms(self):
>       self.assertEqual(Rational(2, 4), Rational(1, 2))
E       AssertionError: 2/4 != 1/2

exercises/practice/rational-numbers/rational_numbers_test.py:145: AssertionError
_ RationalNumbersTest.test_reduce_a_rational_number_with_a_negative_denominator_to_lowest_terms _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_reduce_a_rational_number_with_a_negative_denominator_to_lowest_terms>

    def test_reduce_a_rational_number_with_a_negative_denominator_to_lowest_terms(self):
>       self.assertEqual(Rational(3, -9), Rational(-1, 3))
E       AssertionError: 3/-9 != -1/3

exercises/practice/rational-numbers/rational_numbers_test.py:154: AssertionError
__________ RationalNumbersTest.test_reduce_an_integer_to_lowest_terms __________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_reduce_an_integer_to_lowest_terms>

    def test_reduce_an_integer_to_lowest_terms(self):
>       self.assertEqual(Rational(-14, 7), Rational(-2, 1))
E       AssertionError: -14/7 != -2/1

exercises/practice/rational-numbers/rational_numbers_test.py:160: AssertionError
_____________ RationalNumbersTest.test_reduce_one_to_lowest_terms ______________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_reduce_one_to_lowest_terms>

    def test_reduce_one_to_lowest_terms(self):
>       self.assertEqual(Rational(13, 13), Rational(1, 1))
E       AssertionError: 13/13 != 1/1

exercises/practice/rational-numbers/rational_numbers_test.py:163: AssertionError
____ RationalNumbersTest.test_reduce_places_the_minus_sign_on_the_numerator ____

self = <rational_numbers_test.RationalNumbersTest testMethod=test_reduce_places_the_minus_sign_on_the_numerator>

    def test_reduce_places_the_minus_sign_on_the_numerator(self):
>       self.assertEqual(Rational(3, -4), Rational(-3, 4))
E       AssertionError: 3/-4 != -3/4

exercises/practice/rational-numbers/rational_numbers_test.py:148: AssertionError
_____________ RationalNumbersTest.test_reduce_zero_to_lowest_terms _____________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_reduce_zero_to_lowest_terms>

    def test_reduce_zero_to_lowest_terms(self):
>       self.assertEqual(Rational(0, 6), Rational(0, 1))
E       AssertionError: 0/6 != 0/1

exercises/practice/rational-numbers/rational_numbers_test.py:157: AssertionError
_ RationalNumbersTest.test_subtract_a_positive_rational_number_and_a_negative_rational_number _

self = <rational_numbers_test.RationalNumbersTest testMethod=test_subtract_a_positive_rational_number_and_a_negative_rational_number>

    def test_subtract_a_positive_rational_number_and_a_negative_rational_number(self):
>       self.assertEqual(Rational(1, 2) - Rational(-2, 3), Rational(7, 6))

exercises/practice/rational-numbers/rational_numbers_test.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 7/6, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_______ RationalNumbersTest.test_subtract_a_rational_number_from_itself ________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_subtract_a_rational_number_from_itself>

    def test_subtract_a_rational_number_from_itself(self):
>       self.assertEqual(Rational(1, 2) - Rational(1, 2), Rational(0, 1))

exercises/practice/rational-numbers/rational_numbers_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0/1, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_______ RationalNumbersTest.test_subtract_two_negative_rational_numbers ________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_subtract_two_negative_rational_numbers>

    def test_subtract_two_negative_rational_numbers(self):
>       self.assertEqual(Rational(-1, 2) - Rational(-2, 3), Rational(1, 6))

exercises/practice/rational-numbers/rational_numbers_test.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1/6, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
_______ RationalNumbersTest.test_subtract_two_positive_rational_numbers ________

self = <rational_numbers_test.RationalNumbersTest testMethod=test_subtract_two_positive_rational_numbers>

    def test_subtract_two_positive_rational_numbers(self):
>       self.assertEqual(Rational(1, 2) - Rational(2, 3), Rational(-1, 6))

exercises/practice/rational-numbers/rational_numbers_test.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = -1/6, other = None

    def __eq__(self, other):
>       return self.numer == other.numer and self.denom == other.denom
E       AttributeError: 'NoneType' object has no attribute 'numer'

exercises/practice/rational-numbers/rational_numbers.py:18: AttributeError
=========================== short test summary info ============================
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_absolute_value_of_a_negative_rational_number
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_absolute_value_of_a_negative_rational_number_with_negative_denominator
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_absolute_value_of_a_positive_rational_number
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_absolute_value_of_a_positive_rational_number_with_negative_numerator_and_denominator
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_absolute_value_of_a_rational_number_is_reduced_to_lowest_terms
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_absolute_value_of_zero
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_add_a_positive_rational_number_and_a_negative_rational_number
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_add_a_rational_number_to_its_additive_inverse
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_add_two_negative_rational_numbers
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_add_two_positive_rational_numbers
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_divide_a_positive_rational_number_by_a_negative_rational_number
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_divide_a_rational_number_by_1
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_divide_two_negative_rational_numbers
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_divide_two_positive_rational_numbers
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_a_negative_rational_number_by_a_positive_rational_number
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_a_rational_number_by_0
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_a_rational_number_by_1
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_a_rational_number_by_its_reciprocal
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_two_negative_rational_numbers
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_two_positive_rational_numbers
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_negative_rational_number_to_a_positive_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_negative_rational_number_to_an_even_negative_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_negative_rational_number_to_an_odd_negative_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_negative_rational_number_to_the_power_of_zero
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_positive_rational_number_to_a_negative_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_positive_rational_number_to_a_positive_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_positive_rational_number_to_the_power_of_zero
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_real_number_to_a_negative_rational_number
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_real_number_to_a_positive_rational_number
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_real_number_to_a_zero_rational_number
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_one_to_an_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_zero_to_an_integer_power
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_a_negative_rational_number_to_lowest_terms
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_a_positive_rational_number_to_lowest_terms
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_a_rational_number_with_a_negative_denominator_to_lowest_terms
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_an_integer_to_lowest_terms
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_one_to_lowest_terms
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_places_the_minus_sign_on_the_numerator
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_zero_to_lowest_terms
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_subtract_a_positive_rational_number_and_a_negative_rational_number
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_subtract_a_rational_number_from_itself
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_subtract_two_negative_rational_numbers
FAILED exercises/practice/rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_subtract_two_positive_rational_numbers
============================== 43 failed in 0.29s ==============================
