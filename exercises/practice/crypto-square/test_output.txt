============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 8 items

exercises/practice/crypto-square/crypto_square_test.py FF.F.FF.          [100%]

=================================== FAILURES ===================================
_ CryptoSquareTest.test_54_character_plaintext_results_in_7_chunks_the_last_two_with_trailing_spaces _

self = <crypto_square_test.CryptoSquareTest testMethod=test_54_character_plaintext_results_in_7_chunks_the_last_two_with_trailing_spaces>

    def test_54_character_plaintext_results_in_7_chunks_the_last_two_with_trailing_spaces(
        self,
    ):
        value = "If man was meant to stay on the ground, god would have given us roots."
        expected = "imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn  sseoau "
>       self.assertEqual(cipher_text(value), expected)

exercises/practice/crypto-square/crypto_square_test.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/crypto-square/crypto_square.py:14: in cipher_text
    transposed_rectangle = ["".join(row[i] for row in rectangle) for i in range(columns)]
exercises/practice/crypto-square/crypto_square.py:14: in <listcomp>
    transposed_rectangle = ["".join(row[i] for row in rectangle) for i in range(columns)]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fb60e55dd50>

>   transposed_rectangle = ["".join(row[i] for row in rectangle) for i in range(columns)]
E   IndexError: string index out of range

exercises/practice/crypto-square/crypto_square.py:14: IndexError
_ CryptoSquareTest.test_8_character_plaintext_results_in_3_chunks_the_last_one_with_a_trailing_space _

self = <crypto_square_test.CryptoSquareTest testMethod=test_8_character_plaintext_results_in_3_chunks_the_last_one_with_a_trailing_space>

    def test_8_character_plaintext_results_in_3_chunks_the_last_one_with_a_trailing_space(
        self,
    ):
        value = "Chill out."
        expected = "clu hlt io "
>       self.assertEqual(cipher_text(value), expected)

exercises/practice/crypto-square/crypto_square_test.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/crypto-square/crypto_square.py:14: in cipher_text
    transposed_rectangle = ["".join(row[i] for row in rectangle) for i in range(columns)]
exercises/practice/crypto-square/crypto_square.py:14: in <listcomp>
    transposed_rectangle = ["".join(row[i] for row in rectangle) for i in range(columns)]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fb60e55f910>

>   transposed_rectangle = ["".join(row[i] for row in rectangle) for i in range(columns)]
E   IndexError: string index out of range

exercises/practice/crypto-square/crypto_square.py:14: IndexError
_____ CryptoSquareTest.test_empty_plaintext_results_in_an_empty_ciphertext _____

self = <crypto_square_test.CryptoSquareTest testMethod=test_empty_plaintext_results_in_an_empty_ciphertext>

    def test_empty_plaintext_results_in_an_empty_ciphertext(self):
        value = ""
        expected = ""
>       self.assertEqual(cipher_text(value), expected)

exercises/practice/crypto-square/crypto_square_test.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plain_text = ''

    def cipher_text(plain_text):
        # Normalize the input by removing spaces and punctuation and converting to lowercase
        normalized_text = "".join(char.lower() for char in plain_text if char.isalpha())
    
        # Determine the number of rows and columns for the rectangle
        length = len(normalized_text)
        rows = int(length ** 0.5)
        columns = rows if rows * rows >= length else rows + 1
    
        # Create the rectangle by breaking the normalized text into rows
>       rectangle = [normalized_text[i:i+columns] for i in range(0, length, columns)]
E       ValueError: range() arg 3 must not be zero

exercises/practice/crypto-square/crypto_square.py:11: ValueError
________ CryptoSquareTest.test_normalization_results_in_empty_plaintext ________

self = <crypto_square_test.CryptoSquareTest testMethod=test_normalization_results_in_empty_plaintext>

    def test_normalization_results_in_empty_plaintext(self):
        value = "... --- ..."
        expected = ""
>       self.assertEqual(cipher_text(value), expected)

exercises/practice/crypto-square/crypto_square_test.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plain_text = '... --- ...'

    def cipher_text(plain_text):
        # Normalize the input by removing spaces and punctuation and converting to lowercase
        normalized_text = "".join(char.lower() for char in plain_text if char.isalpha())
    
        # Determine the number of rows and columns for the rectangle
        length = len(normalized_text)
        rows = int(length ** 0.5)
        columns = rows if rows * rows >= length else rows + 1
    
        # Create the rectangle by breaking the normalized text into rows
>       rectangle = [normalized_text[i:i+columns] for i in range(0, length, columns)]
E       ValueError: range() arg 3 must not be zero

exercises/practice/crypto-square/crypto_square.py:11: ValueError
___________________ CryptoSquareTest.test_remove_punctuation ___________________

self = <crypto_square_test.CryptoSquareTest testMethod=test_remove_punctuation>

    def test_remove_punctuation(self):
        value = "@1,%!"
        expected = "1"
>       self.assertEqual(cipher_text(value), expected)

exercises/practice/crypto-square/crypto_square_test.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plain_text = '@1,%!'

    def cipher_text(plain_text):
        # Normalize the input by removing spaces and punctuation and converting to lowercase
        normalized_text = "".join(char.lower() for char in plain_text if char.isalpha())
    
        # Determine the number of rows and columns for the rectangle
        length = len(normalized_text)
        rows = int(length ** 0.5)
        columns = rows if rows * rows >= length else rows + 1
    
        # Create the rectangle by breaking the normalized text into rows
>       rectangle = [normalized_text[i:i+columns] for i in range(0, length, columns)]
E       ValueError: range() arg 3 must not be zero

exercises/practice/crypto-square/crypto_square.py:11: ValueError
=========================== short test summary info ============================
FAILED exercises/practice/crypto-square/crypto_square_test.py::CryptoSquareTest::test_54_character_plaintext_results_in_7_chunks_the_last_two_with_trailing_spaces
FAILED exercises/practice/crypto-square/crypto_square_test.py::CryptoSquareTest::test_8_character_plaintext_results_in_3_chunks_the_last_one_with_a_trailing_space
FAILED exercises/practice/crypto-square/crypto_square_test.py::CryptoSquareTest::test_empty_plaintext_results_in_an_empty_ciphertext
FAILED exercises/practice/crypto-square/crypto_square_test.py::CryptoSquareTest::test_normalization_results_in_empty_plaintext
FAILED exercises/practice/crypto-square/crypto_square_test.py::CryptoSquareTest::test_remove_punctuation
========================= 5 failed, 3 passed in 0.05s ==========================
