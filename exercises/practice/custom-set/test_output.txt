============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1, asyncio-0.21.1
asyncio: mode=strict
collected 38 items

exercises/practice/custom-set/custom_set_test.py FFFFFFFFFF.FFFFFFFF..FF [ 60%]
F.FF.FFFFFFFFF.                                                          [100%]

=================================== FAILURES ===================================
_____________________ CustomSetTest.test_add_to_empty_set ______________________

self = <custom_set_test.CustomSetTest testMethod=test_add_to_empty_set>

    def test_add_to_empty_set(self):
        sut = CustomSet()
        expected = CustomSet([3])
        sut.add(3)
>       self.assertEqual(sut, expected)
E       AssertionError: <custom_set.CustomSet object at 0x7f29f7601690> != <custom_set.CustomSet object at 0x7f29f7600ac0>

exercises/practice/custom-set/custom_set_test.py:122: AssertionError
___________________ CustomSetTest.test_add_to_non_empty_set ____________________

self = <custom_set_test.CustomSetTest testMethod=test_add_to_non_empty_set>

    def test_add_to_non_empty_set(self):
        sut = CustomSet([1, 2, 4])
        expected = CustomSet([1, 2, 3, 4])
        sut.add(3)
>       self.assertEqual(sut, expected)
E       AssertionError: <custom_set.CustomSet object at 0x7f29f7493250> != <custom_set.CustomSet object at 0x7f29f7493160>

exercises/practice/custom-set/custom_set_test.py:128: AssertionError
____ CustomSetTest.test_adding_an_existing_element_does_not_change_the_set _____

self = <custom_set_test.CustomSetTest testMethod=test_adding_an_existing_element_does_not_change_the_set>

    def test_adding_an_existing_element_does_not_change_the_set(self):
        sut = CustomSet([1, 2, 3])
        expected = CustomSet([1, 2, 3])
        sut.add(3)
>       self.assertEqual(sut, expected)
E       AssertionError: <custom_set.CustomSet object at 0x7f29f7488b20> != <custom_set.CustomSet object at 0x7f29f7488bb0>

exercises/practice/custom-set/custom_set_test.py:134: AssertionError
_ CustomSetTest.test_difference_of_a_non_empty_set_and_an_empty_set_is_the_non_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_difference_of_a_non_empty_set_and_an_empty_set_is_the_non_empty_set>

    def test_difference_of_a_non_empty_set_and_an_empty_set_is_the_non_empty_set(self):
        set1 = CustomSet([1, 2, 3, 4])
        set2 = CustomSet()
        expected = CustomSet([1, 2, 3, 4])
>       self.assertEqual(set1 - set2, expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f74a2440>

exercises/practice/custom-set/custom_set_test.py:184: AssertionError
_ CustomSetTest.test_difference_of_empty_set_and_non_empty_set_is_an_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_difference_of_empty_set_and_non_empty_set_is_an_empty_set>

    def test_difference_of_empty_set_and_non_empty_set_is_an_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet([3, 2, 5])
        expected = CustomSet()
>       self.assertEqual(set1 - set2, expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f748c160>

exercises/practice/custom-set/custom_set_test.py:178: AssertionError
_______ CustomSetTest.test_difference_of_two_empty_sets_is_an_empty_set ________

self = <custom_set_test.CustomSetTest testMethod=test_difference_of_two_empty_sets_is_an_empty_set>

    def test_difference_of_two_empty_sets_is_an_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet()
        expected = CustomSet()
>       self.assertEqual(set1 - set2, expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f7601780>

exercises/practice/custom-set/custom_set_test.py:172: AssertionError
_ CustomSetTest.test_difference_of_two_non_empty_sets_is_a_set_of_elements_that_are_only_in_the_first_set _

self = <custom_set_test.CustomSetTest testMethod=test_difference_of_two_non_empty_sets_is_a_set_of_elements_that_are_only_in_the_first_set>

    def test_difference_of_two_non_empty_sets_is_a_set_of_elements_that_are_only_in_the_first_set(
        self,
    ):
        set1 = CustomSet([3, 2, 1])
        set2 = CustomSet([2, 4])
        expected = CustomSet([1, 3])
>       self.assertEqual(set1 - set2, expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f7493730>

exercises/practice/custom-set/custom_set_test.py:192: AssertionError
________ CustomSetTest.test_empty_set_is_a_subset_of_another_empty_set _________

self = <custom_set_test.CustomSetTest testMethod=test_empty_set_is_a_subset_of_another_empty_set>

    def test_empty_set_is_a_subset_of_another_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet()
>       self.assertIs(set1.issubset(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:36: AssertionError
__________ CustomSetTest.test_empty_set_is_a_subset_of_non_empty_set ___________

self = <custom_set_test.CustomSetTest testMethod=test_empty_set_is_a_subset_of_non_empty_set>

    def test_empty_set_is_a_subset_of_non_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet([1])
>       self.assertIs(set1.issubset(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:41: AssertionError
_________ CustomSetTest.test_empty_set_is_disjoint_with_non_empty_set __________

self = <custom_set_test.CustomSetTest testMethod=test_empty_set_is_disjoint_with_non_empty_set>

    def test_empty_set_is_disjoint_with_non_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet([1])
>       self.assertIs(set1.isdisjoint(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:71: AssertionError
___________________ CustomSetTest.test_empty_sets_are_equal ____________________

self = <custom_set_test.CustomSetTest testMethod=test_empty_sets_are_equal>

    def test_empty_sets_are_equal(self):
        set1 = CustomSet()
        set2 = CustomSet()
>       self.assertEqual(set1, set2)
E       AssertionError: <custom_set.CustomSet object at 0x7f29f7603160> != <custom_set.CustomSet object at 0x7f29f76020e0>

exercises/practice/custom-set/custom_set_test.py:91: AssertionError
_ CustomSetTest.test_intersection_of_a_non_empty_set_and_an_empty_set_is_an_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_intersection_of_a_non_empty_set_and_an_empty_set_is_an_empty_set>

    def test_intersection_of_a_non_empty_set_and_an_empty_set_is_an_empty_set(self):
        set1 = CustomSet([1, 2, 3, 4])
        set2 = CustomSet()
        expected = CustomSet()
>       self.assertEqual(set1.intersection(set2), expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f7489a20>

exercises/practice/custom-set/custom_set_test.py:152: AssertionError
_ CustomSetTest.test_intersection_of_an_empty_set_and_non_empty_set_is_an_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_intersection_of_an_empty_set_and_non_empty_set_is_an_empty_set>

    def test_intersection_of_an_empty_set_and_non_empty_set_is_an_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet([3, 2, 5])
        expected = CustomSet()
>       self.assertEqual(set1.intersection(set2), expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f7492170>

exercises/practice/custom-set/custom_set_test.py:146: AssertionError
______ CustomSetTest.test_intersection_of_two_empty_sets_is_an_empty_set _______

self = <custom_set_test.CustomSetTest testMethod=test_intersection_of_two_empty_sets_is_an_empty_set>

    def test_intersection_of_two_empty_sets_is_an_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet()
        expected = CustomSet()
>       self.assertEqual(set1.intersection(set2), expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f748a320>

exercises/practice/custom-set/custom_set_test.py:140: AssertionError
_ CustomSetTest.test_intersection_of_two_sets_with_no_shared_elements_is_an_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_intersection_of_two_sets_with_no_shared_elements_is_an_empty_set>

    def test_intersection_of_two_sets_with_no_shared_elements_is_an_empty_set(self):
        set1 = CustomSet([1, 2, 3])
        set2 = CustomSet([4, 5, 6])
        expected = CustomSet()
>       self.assertEqual(set1.intersection(set2), expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f748f2b0>

exercises/practice/custom-set/custom_set_test.py:158: AssertionError
_ CustomSetTest.test_intersection_of_two_sets_with_shared_elements_is_a_set_of_the_shared_elements _

self = <custom_set_test.CustomSetTest testMethod=test_intersection_of_two_sets_with_shared_elements_is_a_set_of_the_shared_elements>

    def test_intersection_of_two_sets_with_shared_elements_is_a_set_of_the_shared_elements(
        self,
    ):
        set1 = CustomSet([1, 2, 3, 4])
        set2 = CustomSet([3, 2, 5])
        expected = CustomSet([2, 3])
>       self.assertEqual(set1.intersection(set2), expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f74a0b20>

exercises/practice/custom-set/custom_set_test.py:166: AssertionError
_________ CustomSetTest.test_non_empty_set_is_disjoint_with_empty_set __________

self = <custom_set_test.CustomSetTest testMethod=test_non_empty_set_is_disjoint_with_empty_set>

    def test_non_empty_set_is_disjoint_with_empty_set(self):
        set1 = CustomSet([1])
        set2 = CustomSet()
>       self.assertIs(set1.isdisjoint(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:76: AssertionError
________ CustomSetTest.test_non_empty_set_is_not_a_subset_of_empty_set _________

self = <custom_set_test.CustomSetTest testMethod=test_non_empty_set_is_not_a_subset_of_empty_set>

    def test_non_empty_set_is_not_a_subset_of_empty_set(self):
        set1 = CustomSet([1])
        set2 = CustomSet()
>       self.assertIs(set1.issubset(set2), False)
E       AssertionError: None is not False

exercises/practice/custom-set/custom_set_test.py:46: AssertionError
_____ CustomSetTest.test_set_is_a_subset_of_larger_set_with_same_elements ______

self = <custom_set_test.CustomSetTest testMethod=test_set_is_a_subset_of_larger_set_with_same_elements>

    def test_set_is_a_subset_of_larger_set_with_same_elements(self):
        set1 = CustomSet([1, 2, 3])
        set2 = CustomSet([4, 1, 2, 3])
>       self.assertIs(set1.issubset(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:56: AssertionError
______ CustomSetTest.test_set_is_a_subset_of_set_with_exact_same_elements ______

self = <custom_set_test.CustomSetTest testMethod=test_set_is_a_subset_of_set_with_exact_same_elements>

    def test_set_is_a_subset_of_set_with_exact_same_elements(self):
        set1 = CustomSet([1, 2, 3])
        set2 = CustomSet([1, 2, 3])
>       self.assertIs(set1.issubset(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:51: AssertionError
_ CustomSetTest.test_set_is_not_a_subset_of_set_that_does_not_contain_its_elements _

self = <custom_set_test.CustomSetTest testMethod=test_set_is_not_a_subset_of_set_that_does_not_contain_its_elements>

    def test_set_is_not_a_subset_of_set_that_does_not_contain_its_elements(self):
        set1 = CustomSet([1, 2, 3])
        set2 = CustomSet([4, 1, 3])
>       self.assertIs(set1.issubset(set2), False)
E       AssertionError: None is not False

exercises/practice/custom-set/custom_set_test.py:61: AssertionError
________ CustomSetTest.test_sets_are_disjoint_if_they_share_no_elements ________

self = <custom_set_test.CustomSetTest testMethod=test_sets_are_disjoint_if_they_share_no_elements>

    def test_sets_are_disjoint_if_they_share_no_elements(self):
        set1 = CustomSet([1, 2])
        set2 = CustomSet([3, 4])
>       self.assertIs(set1.isdisjoint(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:86: AssertionError
______ CustomSetTest.test_sets_are_not_disjoint_if_they_share_an_element _______

self = <custom_set_test.CustomSetTest testMethod=test_sets_are_not_disjoint_if_they_share_an_element>

    def test_sets_are_not_disjoint_if_they_share_an_element(self):
        set1 = CustomSet([1, 2])
        set2 = CustomSet([2, 3])
>       self.assertIs(set1.isdisjoint(set2), False)
E       AssertionError: None is not False

exercises/practice/custom-set/custom_set_test.py:81: AssertionError
_____________ CustomSetTest.test_sets_with_elements_are_not_empty ______________

self = <custom_set_test.CustomSetTest testMethod=test_sets_with_elements_are_not_empty>

    def test_sets_with_elements_are_not_empty(self):
        sut = CustomSet([1])
>       self.assertIs(sut.isempty(), False)

exercises/practice/custom-set/custom_set_test.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f29f7489ae0>

    def isempty(self):
>       return len(self.elements) == 0
E       AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:6: AttributeError
______________ CustomSetTest.test_sets_with_no_elements_are_empty ______________

self = <custom_set_test.CustomSetTest testMethod=test_sets_with_no_elements_are_empty>

    def test_sets_with_no_elements_are_empty(self):
        sut = CustomSet()
>       self.assertIs(sut.isempty(), True)

exercises/practice/custom-set/custom_set_test.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f29f74fdea0>

    def isempty(self):
>       return len(self.elements) == 0
E       AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:6: AttributeError
___________ CustomSetTest.test_sets_with_the_same_elements_are_equal ___________

self = <custom_set_test.CustomSetTest testMethod=test_sets_with_the_same_elements_are_equal>

    def test_sets_with_the_same_elements_are_equal(self):
        set1 = CustomSet([1, 2])
        set2 = CustomSet([2, 1])
>       self.assertEqual(set1, set2)
E       AssertionError: <custom_set.CustomSet object at 0x7f29f7493ee0> != <custom_set.CustomSet object at 0x7f29f7490490>

exercises/practice/custom-set/custom_set_test.py:106: AssertionError
___________ CustomSetTest.test_the_empty_set_is_disjoint_with_itself ___________

self = <custom_set_test.CustomSetTest testMethod=test_the_empty_set_is_disjoint_with_itself>

    def test_the_empty_set_is_disjoint_with_itself(self):
        set1 = CustomSet()
        set2 = CustomSet()
>       self.assertIs(set1.isdisjoint(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:66: AssertionError
_ CustomSetTest.test_union_of_a_non_empty_set_and_empty_set_is_the_non_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_union_of_a_non_empty_set_and_empty_set_is_the_non_empty_set>

    def test_union_of_a_non_empty_set_and_empty_set_is_the_non_empty_set(self):
        set1 = CustomSet([1, 3])
        set2 = CustomSet()
        expected = CustomSet([1, 3])
>       self.assertEqual(set1 + set2, expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f7602710>

exercises/practice/custom-set/custom_set_test.py:210: AssertionError
_ CustomSetTest.test_union_of_an_empty_set_and_non_empty_set_is_the_non_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_union_of_an_empty_set_and_non_empty_set_is_the_non_empty_set>

    def test_union_of_an_empty_set_and_non_empty_set_is_the_non_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet([2])
        expected = CustomSet([2])
>       self.assertEqual(set1 + set2, expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f748e290>

exercises/practice/custom-set/custom_set_test.py:204: AssertionError
____________ CustomSetTest.test_union_of_empty_sets_is_an_empty_set ____________

self = <custom_set_test.CustomSetTest testMethod=test_union_of_empty_sets_is_an_empty_set>

    def test_union_of_empty_sets_is_an_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet()
        expected = CustomSet()
>       self.assertEqual(set1 + set2, expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f76025f0>

exercises/practice/custom-set/custom_set_test.py:198: AssertionError
___ CustomSetTest.test_union_of_non_empty_sets_contains_all_unique_elements ____

self = <custom_set_test.CustomSetTest testMethod=test_union_of_non_empty_sets_contains_all_unique_elements>

    def test_union_of_non_empty_sets_contains_all_unique_elements(self):
        set1 = CustomSet([1, 3])
        set2 = CustomSet([2, 3])
        expected = CustomSet([3, 2, 1])
>       self.assertEqual(set1 + set2, expected)
E       AssertionError: None != <custom_set.CustomSet object at 0x7f29f748e2f0>

exercises/practice/custom-set/custom_set_test.py:216: AssertionError
______________ CustomSetTest.test_when_the_element_is_in_the_set _______________

self = <custom_set_test.CustomSetTest testMethod=test_when_the_element_is_in_the_set>

    def test_when_the_element_is_in_the_set(self):
        sut = CustomSet([1, 2, 3])
>       self.assertIn(1, sut)
E       AssertionError: 1 not found in <custom_set.CustomSet object at 0x7f29f7603010>

exercises/practice/custom-set/custom_set_test.py:27: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_add_to_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_add_to_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_adding_an_existing_element_does_not_change_the_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_difference_of_a_non_empty_set_and_an_empty_set_is_the_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_difference_of_empty_set_and_non_empty_set_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_difference_of_two_empty_sets_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_difference_of_two_non_empty_sets_is_a_set_of_elements_that_are_only_in_the_first_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_empty_set_is_a_subset_of_another_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_empty_set_is_a_subset_of_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_empty_set_is_disjoint_with_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_empty_sets_are_equal
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_intersection_of_a_non_empty_set_and_an_empty_set_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_intersection_of_an_empty_set_and_non_empty_set_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_intersection_of_two_empty_sets_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_intersection_of_two_sets_with_no_shared_elements_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_intersection_of_two_sets_with_shared_elements_is_a_set_of_the_shared_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_non_empty_set_is_disjoint_with_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_non_empty_set_is_not_a_subset_of_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_set_is_a_subset_of_larger_set_with_same_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_set_is_a_subset_of_set_with_exact_same_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_set_is_not_a_subset_of_set_that_does_not_contain_its_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_sets_are_disjoint_if_they_share_no_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_sets_are_not_disjoint_if_they_share_an_element
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_sets_with_elements_are_not_empty
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_sets_with_no_elements_are_empty
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_sets_with_the_same_elements_are_equal
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_the_empty_set_is_disjoint_with_itself
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_union_of_a_non_empty_set_and_empty_set_is_the_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_union_of_an_empty_set_and_non_empty_set_is_the_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_union_of_empty_sets_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_union_of_non_empty_sets_contains_all_unique_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_when_the_element_is_in_the_set
========================= 32 failed, 6 passed in 0.20s =========================
