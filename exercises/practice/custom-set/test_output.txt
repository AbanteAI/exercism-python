============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 38 items

exercises/practice/custom-set/custom_set_test.py FFFFFFFFFFFFFFFFFFFF.FF [ 60%]
FFFFFFFFFFFFFF.                                                          [100%]

=================================== FAILURES ===================================
_____________________ CustomSetTest.test_add_to_empty_set ______________________

self = <custom_set_test.CustomSetTest testMethod=test_add_to_empty_set>

    def test_add_to_empty_set(self):
        sut = CustomSet()
        expected = CustomSet([3])
>       sut.add(3)

exercises/practice/custom-set/custom_set_test.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f061254b760>, element = 3

    def add(self, element):
        # Add an element to the set
>       if element not in self.elements:
E       AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:31: AttributeError
___________________ CustomSetTest.test_add_to_non_empty_set ____________________

self = <custom_set_test.CustomSetTest testMethod=test_add_to_non_empty_set>

    def test_add_to_non_empty_set(self):
        sut = CustomSet([1, 2, 4])
        expected = CustomSet([1, 2, 3, 4])
>       sut.add(3)

exercises/practice/custom-set/custom_set_test.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f06124139d0>, element = 3

    def add(self, element):
        # Add an element to the set
>       if element not in self.elements:
E       AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:31: AttributeError
____ CustomSetTest.test_adding_an_existing_element_does_not_change_the_set _____

self = <custom_set_test.CustomSetTest testMethod=test_adding_an_existing_element_does_not_change_the_set>

    def test_adding_an_existing_element_does_not_change_the_set(self):
        sut = CustomSet([1, 2, 3])
        expected = CustomSet([1, 2, 3])
>       sut.add(3)

exercises/practice/custom-set/custom_set_test.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f0612403d90>, element = 3

    def add(self, element):
        # Add an element to the set
>       if element not in self.elements:
E       AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:31: AttributeError
_ CustomSetTest.test_difference_of_a_non_empty_set_and_an_empty_set_is_the_non_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_difference_of_a_non_empty_set_and_an_empty_set_is_the_non_empty_set>

    def test_difference_of_a_non_empty_set_and_an_empty_set_is_the_non_empty_set(self):
        set1 = CustomSet([1, 2, 3, 4])
        set2 = CustomSet()
        expected = CustomSet([1, 2, 3, 4])
>       self.assertEqual(set1 - set2, expected)

exercises/practice/custom-set/custom_set_test.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f061254bd90>
other = <custom_set.CustomSet object at 0x7f061254bdf0>

    def __sub__(self, other):
        # Find the difference between the set and another set
        if isinstance(other, CustomSet):
>           return CustomSet([element for element in self.elements if element not in other.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:49: AttributeError
_ CustomSetTest.test_difference_of_empty_set_and_non_empty_set_is_an_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_difference_of_empty_set_and_non_empty_set_is_an_empty_set>

    def test_difference_of_empty_set_and_non_empty_set_is_an_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet([3, 2, 5])
        expected = CustomSet()
>       self.assertEqual(set1 - set2, expected)

exercises/practice/custom-set/custom_set_test.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f061242f820>
other = <custom_set.CustomSet object at 0x7f061242f730>

    def __sub__(self, other):
        # Find the difference between the set and another set
        if isinstance(other, CustomSet):
>           return CustomSet([element for element in self.elements if element not in other.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:49: AttributeError
_______ CustomSetTest.test_difference_of_two_empty_sets_is_an_empty_set ________

self = <custom_set_test.CustomSetTest testMethod=test_difference_of_two_empty_sets_is_an_empty_set>

    def test_difference_of_two_empty_sets_is_an_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet()
        expected = CustomSet()
>       self.assertEqual(set1 - set2, expected)

exercises/practice/custom-set/custom_set_test.py:172: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f061242e8f0>
other = <custom_set.CustomSet object at 0x7f061242e770>

    def __sub__(self, other):
        # Find the difference between the set and another set
        if isinstance(other, CustomSet):
>           return CustomSet([element for element in self.elements if element not in other.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:49: AttributeError
_ CustomSetTest.test_difference_of_two_non_empty_sets_is_a_set_of_elements_that_are_only_in_the_first_set _

self = <custom_set_test.CustomSetTest testMethod=test_difference_of_two_non_empty_sets_is_a_set_of_elements_that_are_only_in_the_first_set>

    def test_difference_of_two_non_empty_sets_is_a_set_of_elements_that_are_only_in_the_first_set(
        self,
    ):
        set1 = CustomSet([3, 2, 1])
        set2 = CustomSet([2, 4])
        expected = CustomSet([1, 3])
>       self.assertEqual(set1 - set2, expected)

exercises/practice/custom-set/custom_set_test.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f06123ffc40>
other = <custom_set.CustomSet object at 0x7f06123ffe20>

    def __sub__(self, other):
        # Find the difference between the set and another set
        if isinstance(other, CustomSet):
>           return CustomSet([element for element in self.elements if element not in other.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:49: AttributeError
________ CustomSetTest.test_empty_set_is_a_subset_of_another_empty_set _________

self = <custom_set_test.CustomSetTest testMethod=test_empty_set_is_a_subset_of_another_empty_set>

    def test_empty_set_is_a_subset_of_another_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet()
>       self.assertIs(set1.issubset(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:36: AssertionError
__________ CustomSetTest.test_empty_set_is_a_subset_of_non_empty_set ___________

self = <custom_set_test.CustomSetTest testMethod=test_empty_set_is_a_subset_of_non_empty_set>

    def test_empty_set_is_a_subset_of_non_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet([1])
>       self.assertIs(set1.issubset(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:41: AssertionError
_________ CustomSetTest.test_empty_set_is_disjoint_with_non_empty_set __________

self = <custom_set_test.CustomSetTest testMethod=test_empty_set_is_disjoint_with_non_empty_set>

    def test_empty_set_is_disjoint_with_non_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet([1])
>       self.assertIs(set1.isdisjoint(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:71: AssertionError
__________ CustomSetTest.test_empty_set_is_not_equal_to_non_empty_set __________

self = <custom_set_test.CustomSetTest testMethod=test_empty_set_is_not_equal_to_non_empty_set>

    def test_empty_set_is_not_equal_to_non_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet([1, 2, 3])
>       self.assertNotEqual(set1, set2)

exercises/practice/custom-set/custom_set_test.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f06124101f0>
other = <custom_set.CustomSet object at 0x7f0612412ef0>

    def __eq__(self, other):
        # Check if the set is equal to another set
        if isinstance(other, CustomSet):
>           return set(self.elements) == set(other.elements)
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:37: AttributeError
___________________ CustomSetTest.test_empty_sets_are_equal ____________________

self = <custom_set_test.CustomSetTest testMethod=test_empty_sets_are_equal>

    def test_empty_sets_are_equal(self):
        set1 = CustomSet()
        set2 = CustomSet()
>       self.assertEqual(set1, set2)

exercises/practice/custom-set/custom_set_test.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f06123fe800>
other = <custom_set.CustomSet object at 0x7f06123ffc70>

    def __eq__(self, other):
        # Check if the set is equal to another set
        if isinstance(other, CustomSet):
>           return set(self.elements) == set(other.elements)
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:37: AttributeError
_ CustomSetTest.test_intersection_of_a_non_empty_set_and_an_empty_set_is_an_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_intersection_of_a_non_empty_set_and_an_empty_set_is_an_empty_set>

    def test_intersection_of_a_non_empty_set_and_an_empty_set_is_an_empty_set(self):
        set1 = CustomSet([1, 2, 3, 4])
        set2 = CustomSet()
        expected = CustomSet()
>       self.assertEqual(set1.intersection(set2), expected)

exercises/practice/custom-set/custom_set_test.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f061254bf40>
other = <custom_set.CustomSet object at 0x7f0612549f60>

    def intersection(self, other):
        # Find the intersection of the set with another set
        if isinstance(other, CustomSet):
>           return CustomSet([element for element in self.elements if element in other.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:43: AttributeError
_ CustomSetTest.test_intersection_of_an_empty_set_and_non_empty_set_is_an_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_intersection_of_an_empty_set_and_non_empty_set_is_an_empty_set>

    def test_intersection_of_an_empty_set_and_non_empty_set_is_an_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet([3, 2, 5])
        expected = CustomSet()
>       self.assertEqual(set1.intersection(set2), expected)

exercises/practice/custom-set/custom_set_test.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f06123fa020>
other = <custom_set.CustomSet object at 0x7f06123f8df0>

    def intersection(self, other):
        # Find the intersection of the set with another set
        if isinstance(other, CustomSet):
>           return CustomSet([element for element in self.elements if element in other.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:43: AttributeError
______ CustomSetTest.test_intersection_of_two_empty_sets_is_an_empty_set _______

self = <custom_set_test.CustomSetTest testMethod=test_intersection_of_two_empty_sets_is_an_empty_set>

    def test_intersection_of_two_empty_sets_is_an_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet()
        expected = CustomSet()
>       self.assertEqual(set1.intersection(set2), expected)

exercises/practice/custom-set/custom_set_test.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f06125493f0>
other = <custom_set.CustomSet object at 0x7f061254be80>

    def intersection(self, other):
        # Find the intersection of the set with another set
        if isinstance(other, CustomSet):
>           return CustomSet([element for element in self.elements if element in other.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:43: AttributeError
_ CustomSetTest.test_intersection_of_two_sets_with_no_shared_elements_is_an_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_intersection_of_two_sets_with_no_shared_elements_is_an_empty_set>

    def test_intersection_of_two_sets_with_no_shared_elements_is_an_empty_set(self):
        set1 = CustomSet([1, 2, 3])
        set2 = CustomSet([4, 5, 6])
        expected = CustomSet()
>       self.assertEqual(set1.intersection(set2), expected)

exercises/practice/custom-set/custom_set_test.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f0612410f10>
other = <custom_set.CustomSet object at 0x7f0612410370>

    def intersection(self, other):
        # Find the intersection of the set with another set
        if isinstance(other, CustomSet):
>           return CustomSet([element for element in self.elements if element in other.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:43: AttributeError
_ CustomSetTest.test_intersection_of_two_sets_with_shared_elements_is_a_set_of_the_shared_elements _

self = <custom_set_test.CustomSetTest testMethod=test_intersection_of_two_sets_with_shared_elements_is_a_set_of_the_shared_elements>

    def test_intersection_of_two_sets_with_shared_elements_is_a_set_of_the_shared_elements(
        self,
    ):
        set1 = CustomSet([1, 2, 3, 4])
        set2 = CustomSet([3, 2, 5])
        expected = CustomSet([2, 3])
>       self.assertEqual(set1.intersection(set2), expected)

exercises/practice/custom-set/custom_set_test.py:166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f061242e1d0>
other = <custom_set.CustomSet object at 0x7f061242f2b0>

    def intersection(self, other):
        # Find the intersection of the set with another set
        if isinstance(other, CustomSet):
>           return CustomSet([element for element in self.elements if element in other.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:43: AttributeError
_________ CustomSetTest.test_non_empty_set_is_disjoint_with_empty_set __________

self = <custom_set_test.CustomSetTest testMethod=test_non_empty_set_is_disjoint_with_empty_set>

    def test_non_empty_set_is_disjoint_with_empty_set(self):
        set1 = CustomSet([1])
        set2 = CustomSet()
>       self.assertIs(set1.isdisjoint(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:76: AssertionError
________ CustomSetTest.test_non_empty_set_is_not_a_subset_of_empty_set _________

self = <custom_set_test.CustomSetTest testMethod=test_non_empty_set_is_not_a_subset_of_empty_set>

    def test_non_empty_set_is_not_a_subset_of_empty_set(self):
        set1 = CustomSet([1])
        set2 = CustomSet()
>       self.assertIs(set1.issubset(set2), False)
E       AssertionError: None is not False

exercises/practice/custom-set/custom_set_test.py:46: AssertionError
__________ CustomSetTest.test_non_empty_set_is_not_equal_to_empty_set __________

self = <custom_set_test.CustomSetTest testMethod=test_non_empty_set_is_not_equal_to_empty_set>

    def test_non_empty_set_is_not_equal_to_empty_set(self):
        set1 = CustomSet([1, 2, 3])
        set2 = CustomSet()
>       self.assertNotEqual(set1, set2)

exercises/practice/custom-set/custom_set_test.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f06123f8fd0>
other = <custom_set.CustomSet object at 0x7f06123fb460>

    def __eq__(self, other):
        # Check if the set is equal to another set
        if isinstance(other, CustomSet):
>           return set(self.elements) == set(other.elements)
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:37: AttributeError
_____ CustomSetTest.test_set_is_a_subset_of_larger_set_with_same_elements ______

self = <custom_set_test.CustomSetTest testMethod=test_set_is_a_subset_of_larger_set_with_same_elements>

    def test_set_is_a_subset_of_larger_set_with_same_elements(self):
        set1 = CustomSet([1, 2, 3])
        set2 = CustomSet([4, 1, 2, 3])
>       self.assertIs(set1.issubset(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:56: AssertionError
______ CustomSetTest.test_set_is_a_subset_of_set_with_exact_same_elements ______

self = <custom_set_test.CustomSetTest testMethod=test_set_is_a_subset_of_set_with_exact_same_elements>

    def test_set_is_a_subset_of_set_with_exact_same_elements(self):
        set1 = CustomSet([1, 2, 3])
        set2 = CustomSet([1, 2, 3])
>       self.assertIs(set1.issubset(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:51: AssertionError
_ CustomSetTest.test_set_is_not_a_subset_of_set_that_does_not_contain_its_elements _

self = <custom_set_test.CustomSetTest testMethod=test_set_is_not_a_subset_of_set_that_does_not_contain_its_elements>

    def test_set_is_not_a_subset_of_set_that_does_not_contain_its_elements(self):
        set1 = CustomSet([1, 2, 3])
        set2 = CustomSet([4, 1, 3])
>       self.assertIs(set1.issubset(set2), False)
E       AssertionError: None is not False

exercises/practice/custom-set/custom_set_test.py:61: AssertionError
_____ CustomSetTest.test_set_is_not_equal_to_larger_set_with_same_elements _____

self = <custom_set_test.CustomSetTest testMethod=test_set_is_not_equal_to_larger_set_with_same_elements>

    def test_set_is_not_equal_to_larger_set_with_same_elements(self):
        set1 = CustomSet([1, 2, 3])
        set2 = CustomSet([1, 2, 3, 4])
>       self.assertNotEqual(set1, set2)

exercises/practice/custom-set/custom_set_test.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f06123f8fd0>
other = <custom_set.CustomSet object at 0x7f06123fa8f0>

    def __eq__(self, other):
        # Check if the set is equal to another set
        if isinstance(other, CustomSet):
>           return set(self.elements) == set(other.elements)
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:37: AttributeError
________ CustomSetTest.test_sets_are_disjoint_if_they_share_no_elements ________

self = <custom_set_test.CustomSetTest testMethod=test_sets_are_disjoint_if_they_share_no_elements>

    def test_sets_are_disjoint_if_they_share_no_elements(self):
        set1 = CustomSet([1, 2])
        set2 = CustomSet([3, 4])
>       self.assertIs(set1.isdisjoint(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:86: AssertionError
______ CustomSetTest.test_sets_are_not_disjoint_if_they_share_an_element _______

self = <custom_set_test.CustomSetTest testMethod=test_sets_are_not_disjoint_if_they_share_an_element>

    def test_sets_are_not_disjoint_if_they_share_an_element(self):
        set1 = CustomSet([1, 2])
        set2 = CustomSet([2, 3])
>       self.assertIs(set1.isdisjoint(set2), False)
E       AssertionError: None is not False

exercises/practice/custom-set/custom_set_test.py:81: AssertionError
________ CustomSetTest.test_sets_with_different_elements_are_not_equal _________

self = <custom_set_test.CustomSetTest testMethod=test_sets_with_different_elements_are_not_equal>

    def test_sets_with_different_elements_are_not_equal(self):
        set1 = CustomSet([1, 2, 3])
        set2 = CustomSet([1, 2, 4])
>       self.assertNotEqual(set1, set2)

exercises/practice/custom-set/custom_set_test.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f061242d510>
other = <custom_set.CustomSet object at 0x7f061242f8b0>

    def __eq__(self, other):
        # Check if the set is equal to another set
        if isinstance(other, CustomSet):
>           return set(self.elements) == set(other.elements)
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:37: AttributeError
_____________ CustomSetTest.test_sets_with_elements_are_not_empty ______________

self = <custom_set_test.CustomSetTest testMethod=test_sets_with_elements_are_not_empty>

    def test_sets_with_elements_are_not_empty(self):
        sut = CustomSet([1])
>       self.assertIs(sut.isempty(), False)
E       AssertionError: None is not False

exercises/practice/custom-set/custom_set_test.py:19: AssertionError
______________ CustomSetTest.test_sets_with_no_elements_are_empty ______________

self = <custom_set_test.CustomSetTest testMethod=test_sets_with_no_elements_are_empty>

    def test_sets_with_no_elements_are_empty(self):
        sut = CustomSet()
>       self.assertIs(sut.isempty(), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:15: AssertionError
___________ CustomSetTest.test_sets_with_the_same_elements_are_equal ___________

self = <custom_set_test.CustomSetTest testMethod=test_sets_with_the_same_elements_are_equal>

    def test_sets_with_the_same_elements_are_equal(self):
        set1 = CustomSet([1, 2])
        set2 = CustomSet([2, 1])
>       self.assertEqual(set1, set2)

exercises/practice/custom-set/custom_set_test.py:106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f061242f280>
other = <custom_set.CustomSet object at 0x7f061242f130>

    def __eq__(self, other):
        # Check if the set is equal to another set
        if isinstance(other, CustomSet):
>           return set(self.elements) == set(other.elements)
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:37: AttributeError
___________ CustomSetTest.test_the_empty_set_is_disjoint_with_itself ___________

self = <custom_set_test.CustomSetTest testMethod=test_the_empty_set_is_disjoint_with_itself>

    def test_the_empty_set_is_disjoint_with_itself(self):
        set1 = CustomSet()
        set2 = CustomSet()
>       self.assertIs(set1.isdisjoint(set2), True)
E       AssertionError: None is not True

exercises/practice/custom-set/custom_set_test.py:66: AssertionError
_ CustomSetTest.test_union_of_a_non_empty_set_and_empty_set_is_the_non_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_union_of_a_non_empty_set_and_empty_set_is_the_non_empty_set>

    def test_union_of_a_non_empty_set_and_empty_set_is_the_non_empty_set(self):
        set1 = CustomSet([1, 3])
        set2 = CustomSet()
        expected = CustomSet([1, 3])
>       self.assertEqual(set1 + set2, expected)

exercises/practice/custom-set/custom_set_test.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f06124644c0>
other = <custom_set.CustomSet object at 0x7f0612466650>

    def __add__(self, other):
        # Find the union of the set with another set
        if isinstance(other, CustomSet):
>           return CustomSet(self.elements + [element for element in other.elements if element not in self.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:55: AttributeError
_ CustomSetTest.test_union_of_an_empty_set_and_non_empty_set_is_the_non_empty_set _

self = <custom_set_test.CustomSetTest testMethod=test_union_of_an_empty_set_and_non_empty_set_is_the_non_empty_set>

    def test_union_of_an_empty_set_and_non_empty_set_is_the_non_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet([2])
        expected = CustomSet([2])
>       self.assertEqual(set1 + set2, expected)

exercises/practice/custom-set/custom_set_test.py:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f0612402a40>
other = <custom_set.CustomSet object at 0x7f0612403970>

    def __add__(self, other):
        # Find the union of the set with another set
        if isinstance(other, CustomSet):
>           return CustomSet(self.elements + [element for element in other.elements if element not in self.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:55: AttributeError
____________ CustomSetTest.test_union_of_empty_sets_is_an_empty_set ____________

self = <custom_set_test.CustomSetTest testMethod=test_union_of_empty_sets_is_an_empty_set>

    def test_union_of_empty_sets_is_an_empty_set(self):
        set1 = CustomSet()
        set2 = CustomSet()
        expected = CustomSet()
>       self.assertEqual(set1 + set2, expected)

exercises/practice/custom-set/custom_set_test.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f0612412950>
other = <custom_set.CustomSet object at 0x7f0612410d30>

    def __add__(self, other):
        # Find the union of the set with another set
        if isinstance(other, CustomSet):
>           return CustomSet(self.elements + [element for element in other.elements if element not in self.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:55: AttributeError
___ CustomSetTest.test_union_of_non_empty_sets_contains_all_unique_elements ____

self = <custom_set_test.CustomSetTest testMethod=test_union_of_non_empty_sets_contains_all_unique_elements>

    def test_union_of_non_empty_sets_contains_all_unique_elements(self):
        set1 = CustomSet([1, 3])
        set2 = CustomSet([2, 3])
        expected = CustomSet([3, 2, 1])
>       self.assertEqual(set1 + set2, expected)

exercises/practice/custom-set/custom_set_test.py:216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <custom_set.CustomSet object at 0x7f06124672b0>
other = <custom_set.CustomSet object at 0x7f06124665f0>

    def __add__(self, other):
        # Find the union of the set with another set
        if isinstance(other, CustomSet):
>           return CustomSet(self.elements + [element for element in other.elements if element not in self.elements])
E           AttributeError: 'CustomSet' object has no attribute 'elements'

exercises/practice/custom-set/custom_set.py:55: AttributeError
______________ CustomSetTest.test_when_the_element_is_in_the_set _______________

self = <custom_set_test.CustomSetTest testMethod=test_when_the_element_is_in_the_set>

    def test_when_the_element_is_in_the_set(self):
        sut = CustomSet([1, 2, 3])
>       self.assertIn(1, sut)
E       AssertionError: 1 not found in <custom_set.CustomSet object at 0x7f0612412380>

exercises/practice/custom-set/custom_set_test.py:27: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_add_to_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_add_to_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_adding_an_existing_element_does_not_change_the_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_difference_of_a_non_empty_set_and_an_empty_set_is_the_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_difference_of_empty_set_and_non_empty_set_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_difference_of_two_empty_sets_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_difference_of_two_non_empty_sets_is_a_set_of_elements_that_are_only_in_the_first_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_empty_set_is_a_subset_of_another_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_empty_set_is_a_subset_of_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_empty_set_is_disjoint_with_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_empty_set_is_not_equal_to_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_empty_sets_are_equal
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_intersection_of_a_non_empty_set_and_an_empty_set_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_intersection_of_an_empty_set_and_non_empty_set_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_intersection_of_two_empty_sets_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_intersection_of_two_sets_with_no_shared_elements_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_intersection_of_two_sets_with_shared_elements_is_a_set_of_the_shared_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_non_empty_set_is_disjoint_with_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_non_empty_set_is_not_a_subset_of_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_non_empty_set_is_not_equal_to_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_set_is_a_subset_of_larger_set_with_same_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_set_is_a_subset_of_set_with_exact_same_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_set_is_not_a_subset_of_set_that_does_not_contain_its_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_set_is_not_equal_to_larger_set_with_same_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_sets_are_disjoint_if_they_share_no_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_sets_are_not_disjoint_if_they_share_an_element
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_sets_with_different_elements_are_not_equal
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_sets_with_elements_are_not_empty
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_sets_with_no_elements_are_empty
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_sets_with_the_same_elements_are_equal
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_the_empty_set_is_disjoint_with_itself
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_union_of_a_non_empty_set_and_empty_set_is_the_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_union_of_an_empty_set_and_non_empty_set_is_the_non_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_union_of_empty_sets_is_an_empty_set
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_union_of_non_empty_sets_contains_all_unique_elements
FAILED exercises/practice/custom-set/custom_set_test.py::CustomSetTest::test_when_the_element_is_in_the_set
========================= 36 failed, 2 passed in 0.32s =========================
