============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 31 items

exercises/practice/bowling/bowling_test.py ..FFFFF......FF.FFF.FF....... [ 93%]
..                                                                       [100%]

=================================== FAILURES ===================================
_ BowlingTest.test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once _

self = <bowling_test.BowlingTest testMethod=test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once>

    def test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 7]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7fab3ef04310>, pins = 7

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_roll >= 20 and not (self.current_roll == 20 and self.rolls[-1] == 10) and not (self.current_roll == 21 and self.rolls[-2] == 10 and self.rolls[-1] < 10):
>           raise IndexError("Cannot roll after game is over")
E           IndexError: Cannot roll after game is over

exercises/practice/bowling/bowling.py:10: IndexError
___ BowlingTest.test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll ___

self = <bowling_test.BowlingTest testMethod=test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll>

    def test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll(self):
        rolls = [10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        game = self.roll_new_game(rolls)
>       self.assertEqual(game.score(), 10)

exercises/practice/bowling/bowling_test.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7fab3f72ab30>

    def score(self):
        if self.current_roll < 20 or (self.current_roll == 20 and self.rolls[-2] + self.rolls[-1] == 10):
>           raise IndexError("Score cannot be taken until the end of the game")
E           IndexError: Score cannot be taken until the end of the game

exercises/practice/bowling/bowling.py:22: IndexError
_ BowlingTest.test_a_strike_in_the_last_frame_gets_a_two_roll_bonus_that_is_counted_once _

self = <bowling_test.BowlingTest testMethod=test_a_strike_in_the_last_frame_gets_a_two_roll_bonus_that_is_counted_once>

    def test_a_strike_in_the_last_frame_gets_a_two_roll_bonus_that_is_counted_once(
        self,
    ):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 7, 1]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7fab3efa90f0>, pins = 1

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_roll >= 20 and not (self.current_roll == 20 and self.rolls[-1] == 10) and not (self.current_roll == 21 and self.rolls[-2] == 10 and self.rolls[-1] < 10):
>           raise IndexError("Cannot roll after game is over")
E           IndexError: Cannot roll after game is over

exercises/practice/bowling/bowling.py:10: IndexError
_ BowlingTest.test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus _

self = <bowling_test.BowlingTest testMethod=test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus>

    def test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus(
        self,
    ):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 10]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7fab3efa76d0>, pins = 10

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_roll >= 20 and not (self.current_roll == 20 and self.rolls[-1] == 10) and not (self.current_roll == 21 and self.rolls[-2] == 10 and self.rolls[-1] < 10):
>           raise IndexError("Cannot roll after game is over")
E           IndexError: Cannot roll after game is over

exercises/practice/bowling/bowling.py:10: IndexError
________________ BowlingTest.test_all_strikes_is_a_perfect_game ________________

self = <bowling_test.BowlingTest testMethod=test_all_strikes_is_a_perfect_game>

    def test_all_strikes_is_a_perfect_game(self):
        rolls = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
        game = self.roll_new_game(rolls)
>       self.assertEqual(game.score(), 300)

exercises/practice/bowling/bowling_test.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7fab3ef05ba0>

    def score(self):
        if self.current_roll < 20 or (self.current_roll == 20 and self.rolls[-2] + self.rolls[-1] == 10):
>           raise IndexError("Score cannot be taken until the end of the game")
E           IndexError: Score cannot be taken until the end of the game

exercises/practice/bowling/bowling.py:22: IndexError
___________ BowlingTest.test_cannot_roll_after_bonus_roll_for_spare ____________

self = <bowling_test.BowlingTest testMethod=test_cannot_roll_after_bonus_roll_for_spare>

    def test_cannot_roll_after_bonus_roll_for_spare(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 2]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7fab3ee1f340>, pins = 2

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_roll >= 20 and not (self.current_roll == 20 and self.rolls[-1] == 10) and not (self.current_roll == 21 and self.rolls[-2] == 10 and self.rolls[-1] < 10):
>           raise IndexError("Cannot roll after game is over")
E           IndexError: Cannot roll after game is over

exercises/practice/bowling/bowling.py:10: IndexError
__________ BowlingTest.test_cannot_roll_after_bonus_rolls_for_strike ___________

self = <bowling_test.BowlingTest testMethod=test_cannot_roll_after_bonus_rolls_for_strike>

    def test_cannot_roll_after_bonus_rolls_for_strike(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 3, 2]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7fab3ef07c10>, pins = 2

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_roll >= 20 and not (self.current_roll == 20 and self.rolls[-1] == 10) and not (self.current_roll == 21 and self.rolls[-2] == 10 and self.rolls[-1] < 10):
>           raise IndexError("Cannot roll after game is over")
E           IndexError: Cannot roll after game is over

exercises/practice/bowling/bowling.py:10: IndexError
________ BowlingTest.test_consecutive_spares_each_get_a_one_roll_bonus _________

self = <bowling_test.BowlingTest testMethod=test_consecutive_spares_each_get_a_one_roll_bonus>

    def test_consecutive_spares_each_get_a_one_roll_bonus(self):
        rolls = [5, 5, 3, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7fab3ee1e4d0>, pins = 4

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_roll >= 20 and not (self.current_roll == 20 and self.rolls[-1] == 10) and not (self.current_roll == 21 and self.rolls[-2] == 10 and self.rolls[-1] < 10):
            raise IndexError("Cannot roll after game is over")
        if self.current_roll > 0 and self.rolls[-1] != 10 and self.rolls[-1] + pins > 10:
>           raise ValueError("Pin count exceeds pins on the lane")
E           ValueError: Pin count exceeds pins on the lane

exercises/practice/bowling/bowling.py:12: ValueError
_______ BowlingTest.test_consecutive_strikes_each_get_the_two_roll_bonus _______

self = <bowling_test.BowlingTest testMethod=test_consecutive_strikes_each_get_the_two_roll_bonus>

    def test_consecutive_strikes_each_get_the_two_roll_bonus(self):
        rolls = [10, 10, 10, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        game = self.roll_new_game(rolls)
>       self.assertEqual(game.score(), 81)

exercises/practice/bowling/bowling_test.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7fab3f72b520>

    def score(self):
        if self.current_roll < 20 or (self.current_roll == 20 and self.rolls[-2] + self.rolls[-1] == 10):
>           raise IndexError("Score cannot be taken until the end of the game")
E           IndexError: Score cannot be taken until the end of the game

exercises/practice/bowling/bowling.py:22: IndexError
_ BowlingTest.test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points _

self = <bowling_test.BowlingTest testMethod=test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points>

    def test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 1]
        game = self.roll_new_game(rolls)
>       self.assertEqual(game.score(), 31)
E       AssertionError: 30 != 31

exercises/practice/bowling/bowling_test.py:86: AssertionError
_ BowlingTest.test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus _

self = <bowling_test.BowlingTest testMethod=test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus>

    def test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus(
        self,
    ):
        rolls = [10, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        game = self.roll_new_game(rolls)
>       self.assertEqual(game.score(), 26)

exercises/practice/bowling/bowling_test.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7fab3ee26f50>

    def score(self):
        if self.current_roll < 20 or (self.current_roll == 20 and self.rolls[-2] + self.rolls[-1] == 10):
>           raise IndexError("Score cannot be taken until the end of the game")
E           IndexError: Score cannot be taken until the end of the game

exercises/practice/bowling/bowling.py:22: IndexError
_ BowlingTest.test_rolling_a_spare_with_the_two_roll_bonus_does_not_get_a_bonus_roll _

self = <bowling_test.BowlingTest testMethod=test_rolling_a_spare_with_the_two_roll_bonus_does_not_get_a_bonus_roll>

    def test_rolling_a_spare_with_the_two_roll_bonus_does_not_get_a_bonus_roll(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 7, 3]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7fab3efb0820>, pins = 3

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_roll >= 20 and not (self.current_roll == 20 and self.rolls[-1] == 10) and not (self.current_roll == 21 and self.rolls[-2] == 10 and self.rolls[-1] < 10):
>           raise IndexError("Cannot roll after game is over")
E           IndexError: Cannot roll after game is over

exercises/practice/bowling/bowling.py:10: IndexError
=========================== short test summary info ============================
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_a_strike_in_the_last_frame_gets_a_two_roll_bonus_that_is_counted_once
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_all_strikes_is_a_perfect_game
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_cannot_roll_after_bonus_roll_for_spare
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_cannot_roll_after_bonus_rolls_for_strike
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_consecutive_spares_each_get_a_one_roll_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_consecutive_strikes_each_get_the_two_roll_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_rolling_a_spare_with_the_two_roll_bonus_does_not_get_a_bonus_roll
======================== 12 failed, 19 passed in 0.15s =========================
