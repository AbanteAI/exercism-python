============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 31 items

exercises/practice/bowling/bowling_test.py .FF..FF...F..F.FFFFFF...FF.F. [ 93%]
F.                                                                       [100%]

=================================== FAILURES ===================================
________ BowlingTest.test_a_spare_followed_by_zeros_is_worth_ten_points ________

self = <bowling_test.BowlingTest testMethod=test_a_spare_followed_by_zeros_is_worth_ten_points>

    def test_a_spare_followed_by_zeros_is_worth_ten_points(self):
        rolls = [6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f1284562050>, pins = 0

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
>           raise Exception("Cannot roll after the game is over.")
E           Exception: Cannot roll after the game is over.

exercises/practice/bowling/bowling.py:11: Exception
_ BowlingTest.test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once _

self = <bowling_test.BowlingTest testMethod=test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once>

    def test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 7]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f1284563a90>, pins = 3

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
>           raise Exception("Cannot roll after the game is over.")
E           Exception: Cannot roll after the game is over.

exercises/practice/bowling/bowling.py:11: Exception
_ BowlingTest.test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus _

self = <bowling_test.BowlingTest testMethod=test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus>

    def test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus(
        self,
    ):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 10]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f12844268c0>, pins = 3

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
>           raise Exception("Cannot roll after the game is over.")
E           Exception: Cannot roll after the game is over.

exercises/practice/bowling/bowling.py:11: Exception
________________ BowlingTest.test_all_strikes_is_a_perfect_game ________________

self = <bowling_test.BowlingTest testMethod=test_all_strikes_is_a_perfect_game>

    def test_all_strikes_is_a_perfect_game(self):
        rolls = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f12844209d0>, pins = 10

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) % 2 == 1 and self.rolls[-1] + pins > 10 and len(self.rolls) < 19:
>           raise ValueError("Invalid number of pins: Frame score cannot exceed 10.")
E           ValueError: Invalid number of pins: Frame score cannot exceed 10.

exercises/practice/bowling/bowling.py:13: ValueError
_ BowlingTest.test_bonus_roll_for_a_spare_in_the_last_frame_must_be_rolled_before_score_can_be_calculated _

self = <bowling_test.BowlingTest testMethod=test_bonus_roll_for_a_spare_in_the_last_frame_must_be_rolled_before_score_can_be_calculated>

    def test_bonus_roll_for_a_spare_in_the_last_frame_must_be_rolled_before_score_can_be_calculated(
        self,
    ):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f1284483b50>, pins = 3

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
>           raise Exception("Cannot roll after the game is over.")
E           Exception: Cannot roll after the game is over.

exercises/practice/bowling/bowling.py:11: Exception
___________ BowlingTest.test_cannot_roll_after_bonus_roll_for_spare ____________

self = <bowling_test.BowlingTest testMethod=test_cannot_roll_after_bonus_roll_for_spare>

    def test_cannot_roll_after_bonus_roll_for_spare(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 2]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f128443cfa0>, pins = 3

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
>           raise Exception("Cannot roll after the game is over.")
E           Exception: Cannot roll after the game is over.

exercises/practice/bowling/bowling.py:11: Exception
_________ BowlingTest.test_cannot_roll_if_game_already_has_ten_frames __________

self = <bowling_test.BowlingTest testMethod=test_cannot_roll_if_game_already_has_ten_frames>

    def test_cannot_roll_if_game_already_has_ten_frames(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f12844244c0>, pins = 0

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
>           raise Exception("Cannot roll after the game is over.")
E           Exception: Cannot roll after the game is over.

exercises/practice/bowling/bowling.py:11: Exception
________ BowlingTest.test_consecutive_spares_each_get_a_one_roll_bonus _________

self = <bowling_test.BowlingTest testMethod=test_consecutive_spares_each_get_a_one_roll_bonus>

    def test_consecutive_spares_each_get_a_one_roll_bonus(self):
        rolls = [5, 5, 3, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f128446aad0>, pins = 0

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
>           raise Exception("Cannot roll after the game is over.")
E           Exception: Cannot roll after the game is over.

exercises/practice/bowling/bowling.py:11: Exception
_______ BowlingTest.test_consecutive_strikes_each_get_the_two_roll_bonus _______

self = <bowling_test.BowlingTest testMethod=test_consecutive_strikes_each_get_the_two_roll_bonus>

    def test_consecutive_strikes_each_get_the_two_roll_bonus(self):
        rolls = [10, 10, 10, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f128444e710>, pins = 10

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) % 2 == 1 and self.rolls[-1] + pins > 10 and len(self.rolls) < 19:
>           raise ValueError("Invalid number of pins: Frame score cannot exceed 10.")
E           ValueError: Invalid number of pins: Frame score cannot exceed 10.

exercises/practice/bowling/bowling.py:13: ValueError
_ BowlingTest.test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points _

self = <bowling_test.BowlingTest testMethod=test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points>

    def test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 1]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f128445e050>, pins = 10

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) % 2 == 1 and self.rolls[-1] + pins > 10 and len(self.rolls) < 19:
>           raise ValueError("Invalid number of pins: Frame score cannot exceed 10.")
E           ValueError: Invalid number of pins: Frame score cannot exceed 10.

exercises/practice/bowling/bowling.py:13: ValueError
__ BowlingTest.test_points_scored_in_the_roll_after_a_spare_are_counted_twice __

self = <bowling_test.BowlingTest testMethod=test_points_scored_in_the_roll_after_a_spare_are_counted_twice>

    def test_points_scored_in_the_roll_after_a_spare_are_counted_twice(self):
        rolls = [6, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f1284422ad0>, pins = 0

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
>           raise Exception("Cannot roll after the game is over.")
E           Exception: Cannot roll after the game is over.

exercises/practice/bowling/bowling.py:11: Exception
_ BowlingTest.test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus _

self = <bowling_test.BowlingTest testMethod=test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus>

    def test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus(
        self,
    ):
        rolls = [10, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f1284563bb0>, pins = 5

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) % 2 == 1 and self.rolls[-1] + pins > 10 and len(self.rolls) < 19:
>           raise ValueError("Invalid number of pins: Frame score cannot exceed 10.")
E           ValueError: Invalid number of pins: Frame score cannot exceed 10.

exercises/practice/bowling/bowling.py:13: ValueError
________ BowlingTest.test_should_be_able_to_score_a_game_with_all_zeros ________

self = <bowling_test.BowlingTest testMethod=test_should_be_able_to_score_a_game_with_all_zeros>

    def test_should_be_able_to_score_a_game_with_all_zeros(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f128443efb0>, pins = 0

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
>           raise Exception("Cannot roll after the game is over.")
E           Exception: Cannot roll after the game is over.

exercises/practice/bowling/bowling.py:11: Exception
__ BowlingTest.test_should_be_able_to_score_a_game_with_no_strikes_or_spares ___

self = <bowling_test.BowlingTest testMethod=test_should_be_able_to_score_a_game_with_no_strikes_or_spares>

    def test_should_be_able_to_score_a_game_with_no_strikes_or_spares(self):
        rolls = [3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f12844813f0>, pins = 6

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins: Pins must be between 0 and 10.")
        if len(self.rolls) >= 21:
            raise Exception("Cannot roll after the game is over.")
        if len(self.rolls) >= 19 and sum(self.rolls[-2:]) < 10 and len(self.rolls) % 2 == 1:
>           raise Exception("Cannot roll after the game is over.")
E           Exception: Cannot roll after the game is over.

exercises/practice/bowling/bowling.py:11: Exception
_ BowlingTest.test_the_second_bonus_rolls_after_a_strike_in_the_last_frame_cannot_be_a_strike_if_the_first_one_is_not_a_strike _

self = <bowling_test.BowlingTest testMethod=test_the_second_bonus_rolls_after_a_strike_in_the_last_frame_cannot_be_a_strike_if_the_first_one_is_not_a_strike>

    def test_the_second_bonus_rolls_after_a_strike_in_the_last_frame_cannot_be_a_strike_if_the_first_one_is_not_a_strike(
        self,
    ):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 6]
        game = self.roll_new_game(rolls)
>       with self.assertRaisesWithMessage(Exception):
E       AssertionError: Exception not raised

exercises/practice/bowling/bowling_test.py:146: AssertionError
_ BowlingTest.test_two_bonus_rolls_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points _

self = <bowling_test.BowlingTest testMethod=test_two_bonus_rolls_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points>

    def test_two_bonus_rolls_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points(
        self,
    ):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 5]
        game = self.roll_new_game(rolls)
>       with self.assertRaisesWithMessage(Exception):
E       AssertionError: Exception not raised

exercises/practice/bowling/bowling_test.py:131: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_a_spare_followed_by_zeros_is_worth_ten_points
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_all_strikes_is_a_perfect_game
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_bonus_roll_for_a_spare_in_the_last_frame_must_be_rolled_before_score_can_be_calculated
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_cannot_roll_after_bonus_roll_for_spare
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_cannot_roll_if_game_already_has_ten_frames
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_consecutive_spares_each_get_a_one_roll_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_consecutive_strikes_each_get_the_two_roll_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_points_scored_in_the_roll_after_a_spare_are_counted_twice
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_should_be_able_to_score_a_game_with_all_zeros
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_should_be_able_to_score_a_game_with_no_strikes_or_spares
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_the_second_bonus_rolls_after_a_strike_in_the_last_frame_cannot_be_a_strike_if_the_first_one_is_not_a_strike
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_two_bonus_rolls_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points
======================== 16 failed, 15 passed in 0.21s =========================
