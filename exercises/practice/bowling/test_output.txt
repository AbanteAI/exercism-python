============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 31 items

exercises/practice/bowling/bowling_test.py .FFF.FF......F.FFFFFF...FF... [ 93%]
..                                                                       [100%]

=================================== FAILURES ===================================
________ BowlingTest.test_a_spare_followed_by_zeros_is_worth_ten_points ________

self = <bowling_test.BowlingTest testMethod=test_a_spare_followed_by_zeros_is_worth_ten_points>

    def test_a_spare_followed_by_zeros_is_worth_ten_points(self):
        rolls = [6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633b2181f0>, pins = 0

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_frame > 10 or (self.current_frame == 10 and len(self.rolls) >= 21):
            raise IndexError("Cannot roll after game is over")
        if not self.first_in_frame and self.rolls[-1] + pins > 10:
            raise ValueError("Pin count exceeds pins on the lane")
        self.rolls.append(pins)
        if self.current_frame < 10 and (pins == 10 or not self.first_in_frame):
            self.current_frame += 1
        elif self.current_frame == 10:
            if len(self.rolls) == 20 and self.rolls[-2] != 10 and self.rolls[-1] + self.rolls[-2] < 10:
>               raise IndexError("No more rolls after the end of the tenth frame")
E               IndexError: No more rolls after the end of the tenth frame

exercises/practice/bowling/bowling.py:19: IndexError
_ BowlingTest.test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once _

self = <bowling_test.BowlingTest testMethod=test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once>

    def test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 7]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633b297c70>, pins = 7

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_frame > 10 or (self.current_frame == 10 and len(self.rolls) >= 21):
            raise IndexError("Cannot roll after game is over")
        if not self.first_in_frame and self.rolls[-1] + pins > 10:
            raise ValueError("Pin count exceeds pins on the lane")
        self.rolls.append(pins)
        if self.current_frame < 10 and (pins == 10 or not self.first_in_frame):
            self.current_frame += 1
        elif self.current_frame == 10:
            if len(self.rolls) == 20 and self.rolls[-2] != 10 and self.rolls[-1] + self.rolls[-2] < 10:
                raise IndexError("No more rolls after the end of the tenth frame")
            if len(self.rolls) == 21 and self.rolls[-3] != 10:
>               raise IndexError("No more rolls after the bonus roll for a spare")
E               IndexError: No more rolls after the bonus roll for a spare

exercises/practice/bowling/bowling.py:21: IndexError
___ BowlingTest.test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll ___

self = <bowling_test.BowlingTest testMethod=test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll>

    def test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll(self):
        rolls = [10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        game = self.roll_new_game(rolls)
>       self.assertEqual(game.score(), 10)

exercises/practice/bowling/bowling_test.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633b28c910>

    def score(self):
        if not self.is_game_over():
>           raise IndexError("Score cannot be taken until the end of the game")
E           IndexError: Score cannot be taken until the end of the game

exercises/practice/bowling/bowling.py:26: IndexError
_ BowlingTest.test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus _

self = <bowling_test.BowlingTest testMethod=test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus>

    def test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus(
        self,
    ):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 10]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633ba233a0>, pins = 10

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_frame > 10 or (self.current_frame == 10 and len(self.rolls) >= 21):
            raise IndexError("Cannot roll after game is over")
        if not self.first_in_frame and self.rolls[-1] + pins > 10:
            raise ValueError("Pin count exceeds pins on the lane")
        self.rolls.append(pins)
        if self.current_frame < 10 and (pins == 10 or not self.first_in_frame):
            self.current_frame += 1
        elif self.current_frame == 10:
            if len(self.rolls) == 20 and self.rolls[-2] != 10 and self.rolls[-1] + self.rolls[-2] < 10:
                raise IndexError("No more rolls after the end of the tenth frame")
            if len(self.rolls) == 21 and self.rolls[-3] != 10:
>               raise IndexError("No more rolls after the bonus roll for a spare")
E               IndexError: No more rolls after the bonus roll for a spare

exercises/practice/bowling/bowling.py:21: IndexError
________________ BowlingTest.test_all_strikes_is_a_perfect_game ________________

self = <bowling_test.BowlingTest testMethod=test_all_strikes_is_a_perfect_game>

    def test_all_strikes_is_a_perfect_game(self):
        rolls = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
        game = self.roll_new_game(rolls)
>       self.assertEqual(game.score(), 300)

exercises/practice/bowling/bowling_test.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633b28d150>

    def score(self):
        if not self.is_game_over():
>           raise IndexError("Score cannot be taken until the end of the game")
E           IndexError: Score cannot be taken until the end of the game

exercises/practice/bowling/bowling.py:26: IndexError
___________ BowlingTest.test_cannot_roll_after_bonus_roll_for_spare ____________

self = <bowling_test.BowlingTest testMethod=test_cannot_roll_after_bonus_roll_for_spare>

    def test_cannot_roll_after_bonus_roll_for_spare(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 2]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633ba22ce0>, pins = 2

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_frame > 10 or (self.current_frame == 10 and len(self.rolls) >= 21):
            raise IndexError("Cannot roll after game is over")
        if not self.first_in_frame and self.rolls[-1] + pins > 10:
            raise ValueError("Pin count exceeds pins on the lane")
        self.rolls.append(pins)
        if self.current_frame < 10 and (pins == 10 or not self.first_in_frame):
            self.current_frame += 1
        elif self.current_frame == 10:
            if len(self.rolls) == 20 and self.rolls[-2] != 10 and self.rolls[-1] + self.rolls[-2] < 10:
                raise IndexError("No more rolls after the end of the tenth frame")
            if len(self.rolls) == 21 and self.rolls[-3] != 10:
>               raise IndexError("No more rolls after the bonus roll for a spare")
E               IndexError: No more rolls after the bonus roll for a spare

exercises/practice/bowling/bowling.py:21: IndexError
_________ BowlingTest.test_cannot_roll_if_game_already_has_ten_frames __________

self = <bowling_test.BowlingTest testMethod=test_cannot_roll_if_game_already_has_ten_frames>

    def test_cannot_roll_if_game_already_has_ten_frames(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633b290fd0>, pins = 0

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_frame > 10 or (self.current_frame == 10 and len(self.rolls) >= 21):
            raise IndexError("Cannot roll after game is over")
        if not self.first_in_frame and self.rolls[-1] + pins > 10:
            raise ValueError("Pin count exceeds pins on the lane")
        self.rolls.append(pins)
        if self.current_frame < 10 and (pins == 10 or not self.first_in_frame):
            self.current_frame += 1
        elif self.current_frame == 10:
            if len(self.rolls) == 20 and self.rolls[-2] != 10 and self.rolls[-1] + self.rolls[-2] < 10:
>               raise IndexError("No more rolls after the end of the tenth frame")
E               IndexError: No more rolls after the end of the tenth frame

exercises/practice/bowling/bowling.py:19: IndexError
________ BowlingTest.test_consecutive_spares_each_get_a_one_roll_bonus _________

self = <bowling_test.BowlingTest testMethod=test_consecutive_spares_each_get_a_one_roll_bonus>

    def test_consecutive_spares_each_get_a_one_roll_bonus(self):
        rolls = [5, 5, 3, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633b2977f0>, pins = 0

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_frame > 10 or (self.current_frame == 10 and len(self.rolls) >= 21):
            raise IndexError("Cannot roll after game is over")
        if not self.first_in_frame and self.rolls[-1] + pins > 10:
            raise ValueError("Pin count exceeds pins on the lane")
        self.rolls.append(pins)
        if self.current_frame < 10 and (pins == 10 or not self.first_in_frame):
            self.current_frame += 1
        elif self.current_frame == 10:
            if len(self.rolls) == 20 and self.rolls[-2] != 10 and self.rolls[-1] + self.rolls[-2] < 10:
>               raise IndexError("No more rolls after the end of the tenth frame")
E               IndexError: No more rolls after the end of the tenth frame

exercises/practice/bowling/bowling.py:19: IndexError
_______ BowlingTest.test_consecutive_strikes_each_get_the_two_roll_bonus _______

self = <bowling_test.BowlingTest testMethod=test_consecutive_strikes_each_get_the_two_roll_bonus>

    def test_consecutive_strikes_each_get_the_two_roll_bonus(self):
        rolls = [10, 10, 10, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        game = self.roll_new_game(rolls)
>       self.assertEqual(game.score(), 81)

exercises/practice/bowling/bowling_test.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633b1ee650>

    def score(self):
        if not self.is_game_over():
>           raise IndexError("Score cannot be taken until the end of the game")
E           IndexError: Score cannot be taken until the end of the game

exercises/practice/bowling/bowling.py:26: IndexError
_ BowlingTest.test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points _

self = <bowling_test.BowlingTest testMethod=test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points>

    def test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 1]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633b28e980>, pins = 1

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_frame > 10 or (self.current_frame == 10 and len(self.rolls) >= 21):
            raise IndexError("Cannot roll after game is over")
        if not self.first_in_frame and self.rolls[-1] + pins > 10:
            raise ValueError("Pin count exceeds pins on the lane")
        self.rolls.append(pins)
        if self.current_frame < 10 and (pins == 10 or not self.first_in_frame):
            self.current_frame += 1
        elif self.current_frame == 10:
            if len(self.rolls) == 20 and self.rolls[-2] != 10 and self.rolls[-1] + self.rolls[-2] < 10:
>               raise IndexError("No more rolls after the end of the tenth frame")
E               IndexError: No more rolls after the end of the tenth frame

exercises/practice/bowling/bowling.py:19: IndexError
__ BowlingTest.test_points_scored_in_the_roll_after_a_spare_are_counted_twice __

self = <bowling_test.BowlingTest testMethod=test_points_scored_in_the_roll_after_a_spare_are_counted_twice>

    def test_points_scored_in_the_roll_after_a_spare_are_counted_twice(self):
        rolls = [6, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633ba22170>, pins = 0

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_frame > 10 or (self.current_frame == 10 and len(self.rolls) >= 21):
            raise IndexError("Cannot roll after game is over")
        if not self.first_in_frame and self.rolls[-1] + pins > 10:
            raise ValueError("Pin count exceeds pins on the lane")
        self.rolls.append(pins)
        if self.current_frame < 10 and (pins == 10 or not self.first_in_frame):
            self.current_frame += 1
        elif self.current_frame == 10:
            if len(self.rolls) == 20 and self.rolls[-2] != 10 and self.rolls[-1] + self.rolls[-2] < 10:
>               raise IndexError("No more rolls after the end of the tenth frame")
E               IndexError: No more rolls after the end of the tenth frame

exercises/practice/bowling/bowling.py:19: IndexError
_ BowlingTest.test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus _

self = <bowling_test.BowlingTest testMethod=test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus>

    def test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus(
        self,
    ):
        rolls = [10, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        game = self.roll_new_game(rolls)
>       self.assertEqual(game.score(), 26)

exercises/practice/bowling/bowling_test.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633b288370>

    def score(self):
        if not self.is_game_over():
>           raise IndexError("Score cannot be taken until the end of the game")
E           IndexError: Score cannot be taken until the end of the game

exercises/practice/bowling/bowling.py:26: IndexError
________ BowlingTest.test_should_be_able_to_score_a_game_with_all_zeros ________

self = <bowling_test.BowlingTest testMethod=test_should_be_able_to_score_a_game_with_all_zeros>

    def test_should_be_able_to_score_a_game_with_all_zeros(self):
        rolls = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633b290f10>, pins = 0

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_frame > 10 or (self.current_frame == 10 and len(self.rolls) >= 21):
            raise IndexError("Cannot roll after game is over")
        if not self.first_in_frame and self.rolls[-1] + pins > 10:
            raise ValueError("Pin count exceeds pins on the lane")
        self.rolls.append(pins)
        if self.current_frame < 10 and (pins == 10 or not self.first_in_frame):
            self.current_frame += 1
        elif self.current_frame == 10:
            if len(self.rolls) == 20 and self.rolls[-2] != 10 and self.rolls[-1] + self.rolls[-2] < 10:
>               raise IndexError("No more rolls after the end of the tenth frame")
E               IndexError: No more rolls after the end of the tenth frame

exercises/practice/bowling/bowling.py:19: IndexError
__ BowlingTest.test_should_be_able_to_score_a_game_with_no_strikes_or_spares ___

self = <bowling_test.BowlingTest testMethod=test_should_be_able_to_score_a_game_with_no_strikes_or_spares>

    def test_should_be_able_to_score_a_game_with_no_strikes_or_spares(self):
        rolls = [3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6]
>       game = self.roll_new_game(rolls)

exercises/practice/bowling/bowling_test.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/bowling/bowling_test.py:16: in roll_new_game
    game.roll(roll)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bowling.BowlingGame object at 0x7f633ba22560>, pins = 6

    def roll(self, pins):
        if pins < 0 or pins > 10:
            raise ValueError("Invalid number of pins")
        if self.current_frame > 10 or (self.current_frame == 10 and len(self.rolls) >= 21):
            raise IndexError("Cannot roll after game is over")
        if not self.first_in_frame and self.rolls[-1] + pins > 10:
            raise ValueError("Pin count exceeds pins on the lane")
        self.rolls.append(pins)
        if self.current_frame < 10 and (pins == 10 or not self.first_in_frame):
            self.current_frame += 1
        elif self.current_frame == 10:
            if len(self.rolls) == 20 and self.rolls[-2] != 10 and self.rolls[-1] + self.rolls[-2] < 10:
>               raise IndexError("No more rolls after the end of the tenth frame")
E               IndexError: No more rolls after the end of the tenth frame

exercises/practice/bowling/bowling.py:19: IndexError
=========================== short test summary info ============================
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_a_spare_followed_by_zeros_is_worth_ten_points
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_all_strikes_is_a_perfect_game
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_cannot_roll_after_bonus_roll_for_spare
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_cannot_roll_if_game_already_has_ten_frames
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_consecutive_spares_each_get_a_one_roll_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_consecutive_strikes_each_get_the_two_roll_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_points_scored_in_the_roll_after_a_spare_are_counted_twice
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_should_be_able_to_score_a_game_with_all_zeros
FAILED exercises/practice/bowling/bowling_test.py::BowlingTest::test_should_be_able_to_score_a_game_with_no_strikes_or_spares
======================== 14 failed, 17 passed in 0.21s =========================
