============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 25 items

exercises/practice/grep/grep_test.py FFFFFFFFFFFFFFFFFFFFFFFFF           [100%]

=================================== FAILURES ===================================
____________ GrepTest.test_multiple_files_no_matches_various_flags _____________

self = <grep_test.GrepTest testMethod=test_multiple_files_no_matches_various_flags>
mock_file = <MagicMock name='StringIO' id='140190132372528'>
mock_open = <MagicMock name='open' id='140190132380496'>

    def test_multiple_files_no_matches_various_flags(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep(
                "Frodo",
                "-n -l -x -i",
                ["iliad.txt", "midsummer-night.txt", "paradise-lost.txt"],
            ),
            "",
        )

exercises/practice/grep/grep_test.py:242: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'Frodo', flags = '-n -l -x -i'
state = <sre_parse.State object at 0x7f808f0bc400>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
________ GrepTest.test_multiple_files_one_match_match_entire_lines_flag ________

self = <grep_test.GrepTest testMethod=test_multiple_files_one_match_match_entire_lines_flag>
mock_file = <MagicMock name='StringIO' id='140190131353920'>
mock_open = <MagicMock name='open' id='140190131346720'>

    def test_multiple_files_one_match_match_entire_lines_flag(
        self, mock_file, mock_open
    ):
        self.assertMultiLineEqual(
>           grep(
                "But I beseech your grace that I may know",
                "-x",
                ["iliad.txt", "midsummer-night.txt", "paradise-lost.txt"],
            ),
            "midsummer-night.txt:But I beseech your grace that I may know\n",
        )

exercises/practice/grep/grep_test.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'But I beseech your grace that I may know', flags = '-x'
state = <sre_parse.State object at 0x7f808ef902b0>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
____________ GrepTest.test_multiple_files_one_match_multiple_flags _____________

self = <grep_test.GrepTest testMethod=test_multiple_files_one_match_multiple_flags>
mock_file = <MagicMock name='StringIO' id='140190132376080'>
mock_open = <MagicMock name='open' id='140190132381984'>

    def test_multiple_files_one_match_multiple_flags(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep(
                "WITH LOSS OF EDEN, TILL ONE GREATER MAN",
                "-n -i -x",
                ["iliad.txt", "midsummer-night.txt", "paradise-lost.txt"],
            ),
            "paradise-lost.txt:4:With loss of Eden, till one greater Man\n",
        )

exercises/practice/grep/grep_test.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'WITH LOSS OF EDEN, TILL ONE GREATER MAN', flags = '-n -i -x'
state = <sre_parse.State object at 0x7f808eef54e0>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
_______________ GrepTest.test_multiple_files_one_match_no_flags ________________

self = <grep_test.GrepTest testMethod=test_multiple_files_one_match_no_flags>
mock_file = <MagicMock name='StringIO' id='140190132975504'>
mock_open = <MagicMock name='open' id='140190132971472'>

    def test_multiple_files_one_match_no_flags(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep(
                "Agamemnon",
                "",
                ["iliad.txt", "midsummer-night.txt", "paradise-lost.txt"],
            ),
            "iliad.txt:Of Atreus, Agamemnon, King of men.\n",
        )

exercises/practice/grep/grep_test.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'Agamemnon', flags = ''
state = <sre_parse.State object at 0x7f808f127220>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
_________ GrepTest.test_multiple_files_one_match_print_file_names_flag _________

self = <grep_test.GrepTest testMethod=test_multiple_files_one_match_print_file_names_flag>
mock_file = <MagicMock name='StringIO' id='140190130194656'>
mock_open = <MagicMock name='open' id='140190130203824'>

    def test_multiple_files_one_match_print_file_names_flag(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep(
                "who", "-l", ["iliad.txt", "midsummer-night.txt", "paradise-lost.txt"]
            ),
            "iliad.txt\n" "paradise-lost.txt\n",
        )

exercises/practice/grep/grep_test.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'who', flags = '-l', state = <sre_parse.State object at 0x7f808ef7fa00>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
______ GrepTest.test_multiple_files_several_matches_case_insensitive_flag ______

self = <grep_test.GrepTest testMethod=test_multiple_files_several_matches_case_insensitive_flag>
mock_file = <MagicMock name='StringIO' id='140190132898880'>
mock_open = <MagicMock name='open' id='140190132910976'>

    def test_multiple_files_several_matches_case_insensitive_flag(
        self, mock_file, mock_open
    ):
        self.assertMultiLineEqual(
>           grep("TO", "-i", ["iliad.txt", "midsummer-night.txt", "paradise-lost.txt"]),
            "iliad.txt:Caused to Achaia's host, sent many a soul\n"
            "iliad.txt:Illustrious into Ades premature,\n"
            "iliad.txt:And Heroes gave (so stood the will of Jove)\n"
            "iliad.txt:To dogs and to all ravening fowls a prey,\n"
            "midsummer-night.txt:I do entreat your grace to pardon me.\n"
            "midsummer-night.txt:In such a presence here to plead my thoughts;\n"
            "midsummer-night.txt:If I refuse to wed Demetrius.\n"
            "paradise-lost.txt:Brought Death into the World, and all our woe,\n"
            "paradise-lost.txt:Restore us, and regain the blissful Seat,\n"
            "paradise-lost.txt:Sing Heav'nly Muse, that on the secret top\n",
        )

exercises/practice/grep/grep_test.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'TO', flags = '-i', state = <sre_parse.State object at 0x7f808f1275e0>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
_ GrepTest.test_multiple_files_several_matches_file_flag_takes_precedence_over_line_number_flag _

self = <grep_test.GrepTest testMethod=test_multiple_files_several_matches_file_flag_takes_precedence_over_line_number_flag>
mock_file = <MagicMock name='StringIO' id='140190132594400'>
mock_open = <MagicMock name='open' id='140190132596560'>

    def test_multiple_files_several_matches_file_flag_takes_precedence_over_line_number_flag(
        self, mock_file, mock_open
    ):
        self.assertMultiLineEqual(
>           grep(
                "who",
                "-n -l",
                ["iliad.txt", "midsummer-night.txt", "paradise-lost.txt"],
            ),
            "iliad.txt\n" "paradise-lost.txt\n",
        )

exercises/practice/grep/grep_test.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'who', flags = '-n -l', state = <sre_parse.State object at 0x7f808f13b100>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
_ GrepTest.test_multiple_files_several_matches_inverted_and_match_entire_lines_flags _

self = <grep_test.GrepTest testMethod=test_multiple_files_several_matches_inverted_and_match_entire_lines_flags>
mock_file = <MagicMock name='StringIO' id='140190131568400'>
mock_open = <MagicMock name='open' id='140190131568208'>

    def test_multiple_files_several_matches_inverted_and_match_entire_lines_flags(
        self, mock_file, mock_open
    ):
        self.assertMultiLineEqual(
>           grep(
                "Illustrious into Ades premature,",
                "-x -v",
                ["iliad.txt", "midsummer-night.txt", "paradise-lost.txt"],
            ),
            "iliad.txt:Achilles sing, O Goddess! Peleus' son;\n"
            "iliad.txt:His wrath pernicious, who ten thousand woes\n"
            "iliad.txt:Caused to Achaia's host, sent many a soul\n"
            "iliad.txt:And Heroes gave (so stood the will of Jove)\n"
            "iliad.txt:To dogs and to all ravening fowls a prey,\n"
            "iliad.txt:When fierce dispute had separated once\n"
            "iliad.txt:The noble Chief Achilles from the son\n"
            "iliad.txt:Of Atreus, Agamemnon, King of men.\n"
            "midsummer-night.txt:I do entreat your grace to pardon me.\n"
            "midsummer-night.txt:I know not by what power I am made bold,\n"
            "midsummer-night.txt:Nor how it may concern my modesty,\n"
            "midsummer-night.txt:In such a presence here to plead my thoughts;\n"
            "midsummer-night.txt:But I beseech your grace that I may know\n"
            "midsummer-night.txt:The worst that may befall me in this case,\n"
            "midsummer-night.txt:If I refuse to wed Demetrius.\n"
            "paradise-lost.txt:Of Mans First Disobedience, and the Fruit\n"
            "paradise-lost.txt:Of that Forbidden Tree, whose mortal tast\n"
            "paradise-lost.txt:Brought Death into the World, and all our woe,\n"
            "paradise-lost.txt:With loss of Eden, till one greater Man\n"
            "paradise-lost.txt:Restore us, and regain the blissful Seat,\n"
            "paradise-lost.txt:Sing Heav'nly Muse, that on the secret top\n"
            "paradise-lost.txt:Of Oreb, or of Sinai, didst inspire\n"
            "paradise-lost.txt:That Shepherd, who first taught the chosen Seed\n",
        )

exercises/practice/grep/grep_test.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'Illustrious into Ades premature,', flags = '-x -v'
state = <sre_parse.State object at 0x7f808ef92e90>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
__________ GrepTest.test_multiple_files_several_matches_inverted_flag __________

self = <grep_test.GrepTest testMethod=test_multiple_files_several_matches_inverted_flag>
mock_file = <MagicMock name='StringIO' id='140190132975792'>
mock_open = <MagicMock name='open' id='140190132970416'>

    def test_multiple_files_several_matches_inverted_flag(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep("a", "-v", ["iliad.txt", "midsummer-night.txt", "paradise-lost.txt"]),
            "iliad.txt:Achilles sing, O Goddess! Peleus' son;\n"
            "iliad.txt:The noble Chief Achilles from the son\n"
            "midsummer-night.txt:If I refuse to wed Demetrius.\n",
        )

exercises/practice/grep/grep_test.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'a', flags = '-v', state = <sre_parse.State object at 0x7f808ee936a0>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
____________ GrepTest.test_multiple_files_several_matches_no_flags _____________

self = <grep_test.GrepTest testMethod=test_multiple_files_several_matches_no_flags>
mock_file = <MagicMock name='StringIO' id='140190131233712'>
mock_open = <MagicMock name='open' id='140190131237552'>

    def test_multiple_files_several_matches_no_flags(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep("may", "", ["iliad.txt", "midsummer-night.txt", "paradise-lost.txt"]),
            "midsummer-night.txt:Nor how it may concern my modesty,\n"
            "midsummer-night.txt:But I beseech your grace that I may know\n"
            "midsummer-night.txt:The worst that may befall me in this case,\n",
        )

exercises/practice/grep/grep_test.py:166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'may', flags = '', state = <sre_parse.State object at 0x7f808efaec50>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
_____ GrepTest.test_multiple_files_several_matches_print_line_numbers_flag _____

self = <grep_test.GrepTest testMethod=test_multiple_files_several_matches_print_line_numbers_flag>
mock_file = <MagicMock name='StringIO' id='140190131584784'>
mock_open = <MagicMock name='open' id='140190131570768'>

    def test_multiple_files_several_matches_print_line_numbers_flag(
        self, mock_file, mock_open
    ):
        self.assertMultiLineEqual(
>           grep(
                "that", "-n", ["iliad.txt", "midsummer-night.txt", "paradise-lost.txt"]
            ),
            "midsummer-night.txt:5:But I beseech your grace that I may know\n"
            "midsummer-night.txt:6:The worst that may befall me in this case,\n"
            "paradise-lost.txt:2:Of that Forbidden Tree, whose mortal tast\n"
            "paradise-lost.txt:6:Sing Heav'nly Muse, that on the secret top\n",
        )

exercises/practice/grep/grep_test.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'that', flags = '-n', state = <sre_parse.State object at 0x7f808eef41c0>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
_______________ GrepTest.test_one_file_no_matches_various_flags ________________

self = <grep_test.GrepTest testMethod=test_one_file_no_matches_various_flags>
mock_file = <MagicMock name='StringIO' id='140190131351664'>
mock_open = <MagicMock name='open' id='140190131343888'>

    def test_one_file_no_matches_various_flags(self, mock_file, mock_open):
>       self.assertMultiLineEqual(grep("Gandalf", "-n -l -x -i", ["iliad.txt"]), "")

exercises/practice/grep/grep_test.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'Gandalf', flags = '-n -l -x -i'
state = <sre_parse.State object at 0x7f808ef7ff70>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
____________ GrepTest.test_one_file_one_match_case_insensitive_flag ____________

self = <grep_test.GrepTest testMethod=test_one_file_one_match_case_insensitive_flag>
mock_file = <MagicMock name='StringIO' id='140190130592624'>
mock_open = <MagicMock name='open' id='140190130599392'>

    def test_one_file_one_match_case_insensitive_flag(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep("FORBIDDEN", "-i", ["paradise-lost.txt"]),
            "Of that Forbidden Tree, whose mortal tast\n",
        )

exercises/practice/grep/grep_test.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'FORBIDDEN', flags = '-i'
state = <sre_parse.State object at 0x7f808efe22f0>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
__ GrepTest.test_one_file_one_match_file_flag_takes_precedence_over_line_flag __

self = <grep_test.GrepTest testMethod=test_one_file_one_match_file_flag_takes_precedence_over_line_flag>
mock_file = <MagicMock name='StringIO' id='140190132963408'>
mock_open = <MagicMock name='open' id='140190132972288'>

    def test_one_file_one_match_file_flag_takes_precedence_over_line_flag(
        self, mock_file, mock_open
    ):
>       self.assertMultiLineEqual(grep("ten", "-n -l", ["iliad.txt"]), "iliad.txt\n")

exercises/practice/grep/grep_test.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'ten', flags = '-n -l', state = <sre_parse.State object at 0x7f808efaaf20>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
___________ GrepTest.test_one_file_one_match_match_entire_lines_flag ___________

self = <grep_test.GrepTest testMethod=test_one_file_one_match_match_entire_lines_flag>
mock_file = <MagicMock name='StringIO' id='140190131849488'>
mock_open = <MagicMock name='open' id='140190131854048'>

    def test_one_file_one_match_match_entire_lines_flag(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep(
                "With loss of Eden, till one greater Man", "-x", ["paradise-lost.txt"]
            ),
            "With loss of Eden, till one greater Man\n",
        )

exercises/practice/grep/grep_test.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'With loss of Eden, till one greater Man', flags = '-x'
state = <sre_parse.State object at 0x7f808efe1d50>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
_______________ GrepTest.test_one_file_one_match_multiple_flags ________________

self = <grep_test.GrepTest testMethod=test_one_file_one_match_multiple_flags>
mock_file = <MagicMock name='StringIO' id='140190130185424'>
mock_open = <MagicMock name='open' id='140190130188640'>

    def test_one_file_one_match_multiple_flags(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep("OF ATREUS, Agamemnon, KIng of MEN.", "-n -i -x", ["iliad.txt"]),
            "9:Of Atreus, Agamemnon, King of men.\n",
        )

exercises/practice/grep/grep_test.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'OF ATREUS, Agamemnon, KIng of MEN.', flags = '-n -i -x'
state = <sre_parse.State object at 0x7f808f0e2650>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
__________________ GrepTest.test_one_file_one_match_no_flags ___________________

self = <grep_test.GrepTest testMethod=test_one_file_one_match_no_flags>
mock_file = <MagicMock name='StringIO' id='140190130588256'>
mock_open = <MagicMock name='open' id='140190130591712'>

    def test_one_file_one_match_no_flags(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep("Agamemnon", "", ["iliad.txt"]), "Of Atreus, Agamemnon, King of men.\n"
        )

exercises/practice/grep/grep_test.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'Agamemnon', flags = ''
state = <sre_parse.State object at 0x7f808efe1210>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
____________ GrepTest.test_one_file_one_match_print_file_names_flag ____________

self = <grep_test.GrepTest testMethod=test_one_file_one_match_print_file_names_flag>
mock_file = <MagicMock name='StringIO' id='140190132610064'>
mock_open = <MagicMock name='open' id='140190132613520'>

    def test_one_file_one_match_print_file_names_flag(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep("Forbidden", "-l", ["paradise-lost.txt"]), "paradise-lost.txt\n"
        )

exercises/practice/grep/grep_test.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'Forbidden', flags = '-l'
state = <sre_parse.State object at 0x7f808efabbb0>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
___________ GrepTest.test_one_file_one_match_print_line_numbers_flag ___________

self = <grep_test.GrepTest testMethod=test_one_file_one_match_print_line_numbers_flag>
mock_file = <MagicMock name='StringIO' id='140190132599056'>
mock_open = <MagicMock name='open' id='140190132595840'>

    def test_one_file_one_match_print_line_numbers_flag(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep("Forbidden", "-n", ["paradise-lost.txt"]),
            "2:Of that Forbidden Tree, whose mortal tast\n",
        )

exercises/practice/grep/grep_test.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'Forbidden', flags = '-n'
state = <sre_parse.State object at 0x7f808efaca00>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
_________ GrepTest.test_one_file_several_matches_case_insensitive_flag _________

self = <grep_test.GrepTest testMethod=test_one_file_several_matches_case_insensitive_flag>
mock_file = <MagicMock name='StringIO' id='140190132896096'>
mock_open = <MagicMock name='open' id='140190132906080'>

    def test_one_file_several_matches_case_insensitive_flag(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep("ACHILLES", "-i", ["iliad.txt"]),
            "Achilles sing, O Goddess! Peleus' son;\n"
            "The noble Chief Achilles from the son\n",
        )

exercises/practice/grep/grep_test.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'ACHILLES', flags = '-i'
state = <sre_parse.State object at 0x7f808ef90850>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
_ GrepTest.test_one_file_several_matches_inverted_and_match_entire_lines_flags _

self = <grep_test.GrepTest testMethod=test_one_file_several_matches_inverted_and_match_entire_lines_flags>
mock_file = <MagicMock name='StringIO' id='140190131354064'>
mock_open = <MagicMock name='open' id='140190131350704'>

    def test_one_file_several_matches_inverted_and_match_entire_lines_flags(
        self, mock_file, mock_open
    ):
        self.assertMultiLineEqual(
>           grep("Illustrious into Ades premature,", "-x -v", ["iliad.txt"]),
            "Achilles sing, O Goddess! Peleus' son;\n"
            "His wrath pernicious, who ten thousand woes\n"
            "Caused to Achaia's host, sent many a soul\n"
            "And Heroes gave (so stood the will of Jove)\n"
            "To dogs and to all ravening fowls a prey,\n"
            "When fierce dispute had separated once\n"
            "The noble Chief Achilles from the son\n"
            "Of Atreus, Agamemnon, King of men.\n",
        )

exercises/practice/grep/grep_test.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'Illustrious into Ades premature,', flags = '-x -v'
state = <sre_parse.State object at 0x7f808ee961a0>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
_____________ GrepTest.test_one_file_several_matches_inverted_flag _____________

self = <grep_test.GrepTest testMethod=test_one_file_several_matches_inverted_flag>
mock_file = <MagicMock name='StringIO' id='140190131224928'>
mock_open = <MagicMock name='open' id='140190131225024'>

    def test_one_file_several_matches_inverted_flag(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep("Of", "-v", ["paradise-lost.txt"]),
            "Brought Death into the World, and all our woe,\n"
            "With loss of Eden, till one greater Man\n"
            "Restore us, and regain the blissful Seat,\n"
            "Sing Heav'nly Muse, that on the secret top\n"
            "That Shepherd, who first taught the chosen Seed\n",
        )

exercises/practice/grep/grep_test.py:122: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'Of', flags = '-v', state = <sre_parse.State object at 0x7f808f12d510>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
________ GrepTest.test_one_file_several_matches_match_entire_lines_flag ________

self = <grep_test.GrepTest testMethod=test_one_file_several_matches_match_entire_lines_flag>
mock_file = <MagicMock name='StringIO' id='140190132375504'>
mock_open = <MagicMock name='open' id='140190132379632'>

    def test_one_file_several_matches_match_entire_lines_flag(
        self, mock_file, mock_open
    ):
>       self.assertMultiLineEqual(grep("may", "-x", ["midsummer-night.txt"]), "")

exercises/practice/grep/grep_test.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'may', flags = '-x', state = <sre_parse.State object at 0x7f808f13a1d0>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
_______________ GrepTest.test_one_file_several_matches_no_flags ________________

self = <grep_test.GrepTest testMethod=test_one_file_several_matches_no_flags>
mock_file = <MagicMock name='StringIO' id='140190132928272'>
mock_open = <MagicMock name='open' id='140190131356576'>

    def test_one_file_several_matches_no_flags(self, mock_file, mock_open):
        self.assertMultiLineEqual(
>           grep("may", "", ["midsummer-night.txt"]),
            "Nor how it may concern my modesty,\n"
            "But I beseech your grace that I may know\n"
            "The worst that may befall me in this case,\n",
        )

exercises/practice/grep/grep_test.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'may', flags = '', state = <sre_parse.State object at 0x7f808efb2020>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
________ GrepTest.test_one_file_several_matches_print_line_numbers_flag ________

self = <grep_test.GrepTest testMethod=test_one_file_several_matches_print_line_numbers_flag>
mock_file = <MagicMock name='StringIO' id='140190132899984'>
mock_open = <MagicMock name='open' id='140190132896336'>

    def test_one_file_several_matches_print_line_numbers_flag(
        self, mock_file, mock_open
    ):
        self.assertMultiLineEqual(
>           grep("may", "-n", ["midsummer-night.txt"]),
            "3:Nor how it may concern my modesty,\n"
            "5:But I beseech your grace that I may know\n"
            "6:The worst that may befall me in this case,\n",
        )

exercises/practice/grep/grep_test.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/grep/grep.py:11: in grep
    match = re.search(pattern, line, flags=flags)
/usr/lib/python3.10/re.py:200: in search
    return _compile(pattern, flags).search(string)
/usr/lib/python3.10/re.py:303: in _compile
    p = sre_compile.compile(pattern, flags)
/usr/lib/python3.10/sre_compile.py:788: in compile
    p = sre_parse.parse(p, flags)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str = 'may', flags = '-n', state = <sre_parse.State object at 0x7f808f02ad40>

    def parse(str, flags=0, state=None):
        # parse 're' pattern into list of (opcode, argument) tuples
    
        source = Tokenizer(str)
    
        if state is None:
            state = State()
        state.flags = flags
        state.str = str
    
        try:
>           p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
E           TypeError: unsupported operand type(s) for &: 'str' and 'int'

/usr/lib/python3.10/sre_parse.py:955: TypeError
=========================== short test summary info ============================
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_multiple_files_no_matches_various_flags
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_multiple_files_one_match_match_entire_lines_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_multiple_files_one_match_multiple_flags
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_multiple_files_one_match_no_flags
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_multiple_files_one_match_print_file_names_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_multiple_files_several_matches_case_insensitive_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_multiple_files_several_matches_file_flag_takes_precedence_over_line_number_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_multiple_files_several_matches_inverted_and_match_entire_lines_flags
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_multiple_files_several_matches_inverted_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_multiple_files_several_matches_no_flags
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_multiple_files_several_matches_print_line_numbers_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_no_matches_various_flags
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_one_match_case_insensitive_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_one_match_file_flag_takes_precedence_over_line_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_one_match_match_entire_lines_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_one_match_multiple_flags
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_one_match_no_flags
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_one_match_print_file_names_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_one_match_print_line_numbers_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_several_matches_case_insensitive_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_several_matches_inverted_and_match_entire_lines_flags
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_several_matches_inverted_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_several_matches_match_entire_lines_flag
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_several_matches_no_flags
FAILED exercises/practice/grep/grep_test.py::GrepTest::test_one_file_several_matches_print_line_numbers_flag
============================== 25 failed in 1.03s ==============================
