============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 25 items

grep/grep_test.py ............F.FFF.FFFF.FF                              [100%]

=================================== FAILURES ===================================
____________ GrepTest.test_one_file_one_match_case_insensitive_flag ____________

self = <grep_test.GrepTest testMethod=test_one_file_one_match_case_insensitive_flag>
mock_file = <MagicMock name='StringIO' id='139621831991088'>
mock_open = <MagicMock name='open' id='139621831991328'>

    def test_one_file_one_match_case_insensitive_flag(self, mock_file, mock_open):
>       self.assertMultiLineEqual(
            grep("FORBIDDEN", "-i", ["paradise-lost.txt"]),
            "Of that Forbidden Tree, whose mortal tast\n",
        )
E       AssertionError: 'paradise-lost.txt:Of that Forbidden Tree, whose mortal tast\n' != 'Of that Forbidden Tree, whose mortal tast\n'
E       - paradise-lost.txt:Of that Forbidden Tree, whose mortal tast
E       ? ------------------
E       + Of that Forbidden Tree, whose mortal tast

grep/grep_test.py:66: AssertionError
___________ GrepTest.test_one_file_one_match_match_entire_lines_flag ___________

self = <grep_test.GrepTest testMethod=test_one_file_one_match_match_entire_lines_flag>
mock_file = <MagicMock name='StringIO' id='139621831805968'>
mock_open = <MagicMock name='open' id='139621831884608'>

    def test_one_file_one_match_match_entire_lines_flag(self, mock_file, mock_open):
>       self.assertMultiLineEqual(
            grep(
                "With loss of Eden, till one greater Man", "-x", ["paradise-lost.txt"]
            ),
            "With loss of Eden, till one greater Man\n",
        )
E       AssertionError: 'paradise-lost.txt:With loss of Eden, till one greater Man\n' != 'With loss of Eden, till one greater Man\n'
E       - paradise-lost.txt:With loss of Eden, till one greater Man
E       ? ------------------
E       + With loss of Eden, till one greater Man

grep/grep_test.py:77: AssertionError
_______________ GrepTest.test_one_file_one_match_multiple_flags ________________

self = <grep_test.GrepTest testMethod=test_one_file_one_match_multiple_flags>
mock_file = <MagicMock name='StringIO' id='139621831952320'>
mock_open = <MagicMock name='open' id='139621831956400'>

    def test_one_file_one_match_multiple_flags(self, mock_file, mock_open):
>       self.assertMultiLineEqual(
            grep("OF ATREUS, Agamemnon, KIng of MEN.", "-n -i -x", ["iliad.txt"]),
            "9:Of Atreus, Agamemnon, King of men.\n",
        )
E       AssertionError: 'iliad.txt:9:Of Atreus, Agamemnon, King of men.\n' != '9:Of Atreus, Agamemnon, King of men.\n'
E       - iliad.txt:9:Of Atreus, Agamemnon, King of men.
E       ? ----------
E       + 9:Of Atreus, Agamemnon, King of men.

grep/grep_test.py:85: AssertionError
__________________ GrepTest.test_one_file_one_match_no_flags ___________________

self = <grep_test.GrepTest testMethod=test_one_file_one_match_no_flags>
mock_file = <MagicMock name='StringIO' id='139621831808944'>
mock_open = <MagicMock name='open' id='139621832077376'>

    def test_one_file_one_match_no_flags(self, mock_file, mock_open):
>       self.assertMultiLineEqual(
            grep("Agamemnon", "", ["iliad.txt"]), "Of Atreus, Agamemnon, King of men.\n"
        )
E       AssertionError: 'iliad.txt:Of Atreus, Agamemnon, King of men.\n' != 'Of Atreus, Agamemnon, King of men.\n'
E       - iliad.txt:Of Atreus, Agamemnon, King of men.
E       ? ----------
E       + Of Atreus, Agamemnon, King of men.

grep/grep_test.py:55: AssertionError
___________ GrepTest.test_one_file_one_match_print_line_numbers_flag ___________

self = <grep_test.GrepTest testMethod=test_one_file_one_match_print_line_numbers_flag>
mock_file = <MagicMock name='StringIO' id='139621832347792'>
mock_open = <MagicMock name='open' id='139621832357296'>

    def test_one_file_one_match_print_line_numbers_flag(self, mock_file, mock_open):
>       self.assertMultiLineEqual(
            grep("Forbidden", "-n", ["paradise-lost.txt"]),
            "2:Of that Forbidden Tree, whose mortal tast\n",
        )
E       AssertionError: 'paradise-lost.txt:2:Of that Forbidden Tree, whose mortal tast\n' != '2:Of that Forbidden Tree, whose mortal tast\n'
E       - paradise-lost.txt:2:Of that Forbidden Tree, whose mortal tast
E       ? ------------------
E       + 2:Of that Forbidden Tree, whose mortal tast

grep/grep_test.py:60: AssertionError
_________ GrepTest.test_one_file_several_matches_case_insensitive_flag _________

self = <grep_test.GrepTest testMethod=test_one_file_several_matches_case_insensitive_flag>
mock_file = <MagicMock name='StringIO' id='139621832428176'>
mock_open = <MagicMock name='open' id='139621832435712'>

    def test_one_file_several_matches_case_insensitive_flag(self, mock_file, mock_open):
>       self.assertMultiLineEqual(
            grep("ACHILLES", "-i", ["iliad.txt"]),
            "Achilles sing, O Goddess! Peleus' son;\n"
            "The noble Chief Achilles from the son\n",
        )
E       AssertionError: "iliad.txt:Achilles sing, O Goddess! Peleu[54 chars]on\n" != "Achilles sing, O Goddess! Peleus' son;\nT[34 chars]on\n"
E       - iliad.txt:Achilles sing, O Goddess! Peleus' son;
E       ? ----------
E       + Achilles sing, O Goddess! Peleus' son;
E       - iliad.txt:The noble Chief Achilles from the son
E       ? ----------
E       + The noble Chief Achilles from the son

grep/grep_test.py:114: AssertionError
_ GrepTest.test_one_file_several_matches_inverted_and_match_entire_lines_flags _

self = <grep_test.GrepTest testMethod=test_one_file_several_matches_inverted_and_match_entire_lines_flags>
mock_file = <MagicMock name='StringIO' id='139621832359888'>
mock_open = <MagicMock name='open' id='139621831816576'>

    def test_one_file_several_matches_inverted_and_match_entire_lines_flags(
        self, mock_file, mock_open
    ):
>       self.assertMultiLineEqual(
            grep("Illustrious into Ades premature,", "-x -v", ["iliad.txt"]),
            "Achilles sing, O Goddess! Peleus' son;\n"
            "His wrath pernicious, who ten thousand woes\n"
            "Caused to Achaia's host, sent many a soul\n"
            "And Heroes gave (so stood the will of Jove)\n"
            "To dogs and to all ravening fowls a prey,\n"
            "When fierce dispute had separated once\n"
            "The noble Chief Achilles from the son\n"
            "Of Atreus, Agamemnon, King of men.\n",
        )
E       AssertionError: "iliad.txt:Achilles sing, O Goddess! Peleu[366 chars]n.\n" != "Achilles sing, O Goddess! Peleus' son;\nH[286 chars]n.\n"
E       Diff is 863 characters long. Set self.maxDiff to None to see it.

grep/grep_test.py:141: AssertionError
_____________ GrepTest.test_one_file_several_matches_inverted_flag _____________

self = <grep_test.GrepTest testMethod=test_one_file_several_matches_inverted_flag>
mock_file = <MagicMock name='StringIO' id='139621831875872'>
mock_open = <MagicMock name='open' id='139621831869248'>

    def test_one_file_several_matches_inverted_flag(self, mock_file, mock_open):
>       self.assertMultiLineEqual(
            grep("Of", "-v", ["paradise-lost.txt"]),
            "Brought Death into the World, and all our woe,\n"
            "With loss of Eden, till one greater Man\n"
            "Restore us, and regain the blissful Seat,\n"
            "Sing Heav'nly Muse, that on the secret top\n"
            "That Shepherd, who first taught the chosen Seed\n",
        )
E       AssertionError: "paradise-lost.txt:Brought Death into the [270 chars]ed\n" != "Brought Death into the World, and all our[180 chars]ed\n"
E       Diff is 656 characters long. Set self.maxDiff to None to see it.

grep/grep_test.py:121: AssertionError
_______________ GrepTest.test_one_file_several_matches_no_flags ________________

self = <grep_test.GrepTest testMethod=test_one_file_several_matches_no_flags>
mock_file = <MagicMock name='StringIO' id='139621832051200'>
mock_open = <MagicMock name='open' id='139621831961104'>

    def test_one_file_several_matches_no_flags(self, mock_file, mock_open):
>       self.assertMultiLineEqual(
            grep("may", "", ["midsummer-night.txt"]),
            "Nor how it may concern my modesty,\n"
            "But I beseech your grace that I may know\n"
            "The worst that may befall me in this case,\n",
        )
E       AssertionError: 'midsummer-night.txt:Nor how it may concer[137 chars]e,\n' != 'Nor how it may concern my modesty,\nBut I[77 chars]e,\n'
E       - midsummer-night.txt:Nor how it may concern my modesty,
E       ? --------------------
E       + Nor how it may concern my modesty,
E       - midsummer-night.txt:But I beseech your grace that I may know
E       ? --------------------
E       + But I beseech your grace that I may know
E       - midsummer-night.txt:The worst that may befall me in this case,
E       ? --------------------
E       + The worst that may befall me in this case,

grep/grep_test.py:91: AssertionError
________ GrepTest.test_one_file_several_matches_print_line_numbers_flag ________

self = <grep_test.GrepTest testMethod=test_one_file_several_matches_print_line_numbers_flag>
mock_file = <MagicMock name='StringIO' id='139621832537856'>
mock_open = <MagicMock name='open' id='139621832530752'>

    def test_one_file_several_matches_print_line_numbers_flag(
        self, mock_file, mock_open
    ):
>       self.assertMultiLineEqual(
            grep("may", "-n", ["midsummer-night.txt"]),
            "3:Nor how it may concern my modesty,\n"
            "5:But I beseech your grace that I may know\n"
            "6:The worst that may befall me in this case,\n",
        )
E       AssertionError: 'midsummer-night.txt:3:Nor how it may conc[143 chars]e,\n' != '3:Nor how it may concern my modesty,\n5:B[83 chars]e,\n'
E       - midsummer-night.txt:3:Nor how it may concern my modesty,
E       ? --------------------
E       + 3:Nor how it may concern my modesty,
E       - midsummer-night.txt:5:But I beseech your grace that I may know
E       ? --------------------
E       + 5:But I beseech your grace that I may know
E       - midsummer-night.txt:6:The worst that may befall me in this case,
E       ? --------------------
E       + 6:The worst that may befall me in this case,

grep/grep_test.py:101: AssertionError
=========================== short test summary info ============================
FAILED grep/grep_test.py::GrepTest::test_one_file_one_match_case_insensitive_flag
FAILED grep/grep_test.py::GrepTest::test_one_file_one_match_match_entire_lines_flag
FAILED grep/grep_test.py::GrepTest::test_one_file_one_match_multiple_flags - ...
FAILED grep/grep_test.py::GrepTest::test_one_file_one_match_no_flags - Assert...
FAILED grep/grep_test.py::GrepTest::test_one_file_one_match_print_line_numbers_flag
FAILED grep/grep_test.py::GrepTest::test_one_file_several_matches_case_insensitive_flag
FAILED grep/grep_test.py::GrepTest::test_one_file_several_matches_inverted_and_match_entire_lines_flags
FAILED grep/grep_test.py::GrepTest::test_one_file_several_matches_inverted_flag
FAILED grep/grep_test.py::GrepTest::test_one_file_several_matches_no_flags - ...
FAILED grep/grep_test.py::GrepTest::test_one_file_several_matches_print_line_numbers_flag
======================== 10 failed, 15 passed in 0.10s =========================
