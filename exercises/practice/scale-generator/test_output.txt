============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 17 items

exercises/practice/scale-generator/scale_generator_test.py .FFFFFFFFFFFF [ 76%]
FFFF                                                                     [100%]

=================================== FAILURES ===================================
_____________ ScaleGeneratorTest.test_chromatic_scale_with_sharps ______________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_chromatic_scale_with_sharps>

    def test_chromatic_scale_with_sharps(self):
        expected = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]
>       self.assertEqual(Scale("C").chromatic(), expected)
E       AssertionError: Lists differ: ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'] != ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
E       
E       First differing element 1:
E       'Db'
E       'C#'
E       
E       - ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B']
E       ?        ^^         ^^              ^^         ^^         ^^
E       
E       + ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
E       ?        ^^         ^^              ^^         ^^         ^^

exercises/practice/scale-generator/scale_generator_test.py:17: AssertionError
_____________________ ScaleGeneratorTest.test_dorian_mode ______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_dorian_mode>

    def test_dorian_mode(self):
        expected = ["D", "E", "F", "G", "A", "B", "C", "D"]
>       self.assertEqual(Scale("d").interval("MmMMMmM"), expected)

exercises/practice/scale-generator/scale_generator_test.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scale_generator.Scale object at 0x7ff0addb3af0>, intervals = 'MmMMMmM'

    def interval(self, intervals):
        chromatic_scale = self.chromatic()
        scale = [self.tonic]
>       idx = chromatic_scale.index(self.tonic)
E       ValueError: 'd' is not in list

exercises/practice/scale-generator/scale_generator.py:18: ValueError
______________________ ScaleGeneratorTest.test_enigmatic _______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_enigmatic>

    def test_enigmatic(self):
        expected = ["G", "G#", "B", "C#", "D#", "F", "F#", "G"]
>       self.assertEqual(Scale("G").interval("mAMMMmm"), expected)
E       AssertionError: Lists differ: ['G', 'G#', 'B', 'C#', 'D#', 'F', 'F#'] != ['G', 'G#', 'B', 'C#', 'D#', 'F', 'F#', 'G']
E       
E       Second list contains 1 additional elements.
E       First extra element 7:
E       'G'
E       
E       - ['G', 'G#', 'B', 'C#', 'D#', 'F', 'F#']
E       + ['G', 'G#', 'B', 'C#', 'D#', 'F', 'F#', 'G']
E       ?                                       +++++

exercises/practice/scale-generator/scale_generator_test.py:82: AssertionError
____________________ ScaleGeneratorTest.test_harmonic_minor ____________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_harmonic_minor>

    def test_harmonic_minor(self):
        expected = ["D", "E", "F", "G", "A", "Bb", "Db", "D"]
>       self.assertEqual(Scale("d").interval("MmMMmAm"), expected)

exercises/practice/scale-generator/scale_generator_test.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scale_generator.Scale object at 0x7ff0add76ce0>, intervals = 'MmMMmAm'

    def interval(self, intervals):
        chromatic_scale = self.chromatic()
        scale = [self.tonic]
>       idx = chromatic_scale.index(self.tonic)
E       ValueError: 'd' is not in list

exercises/practice/scale-generator/scale_generator.py:18: ValueError
______________________ ScaleGeneratorTest.test_hexatonic _______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_hexatonic>

    def test_hexatonic(self):
        expected = ["Db", "Eb", "F", "G", "A", "B", "Db"]
>       self.assertEqual(Scale("Db").interval("MMMMMM"), expected)
E       AssertionError: Lists differ: ['Db', 'Eb', 'F', 'G', 'A', 'B'] != ['Db', 'Eb', 'F', 'G', 'A', 'B', 'Db']
E       
E       Second list contains 1 additional elements.
E       First extra element 6:
E       'Db'
E       
E       - ['Db', 'Eb', 'F', 'G', 'A', 'B']
E       + ['Db', 'Eb', 'F', 'G', 'A', 'B', 'Db']
E       ?                                ++++++

exercises/practice/scale-generator/scale_generator_test.py:74: AssertionError
_____________________ ScaleGeneratorTest.test_locrian_mode _____________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_locrian_mode>

    def test_locrian_mode(self):
        expected = ["G", "Ab", "Bb", "C", "Db", "Eb", "F", "G"]
>       self.assertEqual(Scale("g").interval("mMMmMMM"), expected)

exercises/practice/scale-generator/scale_generator_test.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scale_generator.Scale object at 0x7ff0adc3ea70>, intervals = 'mMMmMMM'

    def interval(self, intervals):
        chromatic_scale = self.chromatic()
        scale = [self.tonic]
>       idx = chromatic_scale.index(self.tonic)
E       ValueError: 'g' is not in list

exercises/practice/scale-generator/scale_generator.py:18: ValueError
_____________________ ScaleGeneratorTest.test_lydian_mode ______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_lydian_mode>

    def test_lydian_mode(self):
        expected = ["A", "B", "C#", "D#", "E", "F#", "G#", "A"]
>       self.assertEqual(Scale("a").interval("MMMmMMm"), expected)

exercises/practice/scale-generator/scale_generator_test.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scale_generator.Scale object at 0x7ff0adc18280>, intervals = 'MMMmMMm'

    def interval(self, intervals):
        chromatic_scale = self.chromatic()
        scale = [self.tonic]
>       idx = chromatic_scale.index(self.tonic)
E       ValueError: 'a' is not in list

exercises/practice/scale-generator/scale_generator.py:18: ValueError
________________ ScaleGeneratorTest.test_major_scale_with_flats ________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_major_scale_with_flats>

    def test_major_scale_with_flats(self):
        expected = ["F", "G", "A", "Bb", "C", "D", "E", "F"]
>       self.assertEqual(Scale("F").interval("MMmMMMm"), expected)
E       AssertionError: Lists differ: ['F', 'G', 'A', 'Bb', 'C', 'D', 'E'] != ['F', 'G', 'A', 'Bb', 'C', 'D', 'E', 'F']
E       
E       Second list contains 1 additional elements.
E       First extra element 7:
E       'F'
E       
E       - ['F', 'G', 'A', 'Bb', 'C', 'D', 'E']
E       + ['F', 'G', 'A', 'Bb', 'C', 'D', 'E', 'F']
E       ?                                    +++++

exercises/practice/scale-generator/scale_generator_test.py:34: AssertionError
_______________ ScaleGeneratorTest.test_major_scale_with_sharps ________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_major_scale_with_sharps>

    def test_major_scale_with_sharps(self):
        expected = ["G", "A", "B", "C", "D", "E", "F#", "G"]
>       self.assertEqual(Scale("G").interval("MMmMMMm"), expected)
E       AssertionError: Lists differ: ['G', 'A', 'B', 'C', 'D', 'E', 'F#'] != ['G', 'A', 'B', 'C', 'D', 'E', 'F#', 'G']
E       
E       Second list contains 1 additional elements.
E       First extra element 7:
E       'G'
E       
E       - ['G', 'A', 'B', 'C', 'D', 'E', 'F#']
E       + ['G', 'A', 'B', 'C', 'D', 'E', 'F#', 'G']
E       ?                                    +++++

exercises/practice/scale-generator/scale_generator_test.py:30: AssertionError
________________ ScaleGeneratorTest.test_minor_scale_with_flats ________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_minor_scale_with_flats>

    def test_minor_scale_with_flats(self):
        expected = ["Bb", "C", "Db", "Eb", "F", "Gb", "Ab", "Bb"]
>       self.assertEqual(Scale("bb").interval("MmMMmMM"), expected)

exercises/practice/scale-generator/scale_generator_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scale_generator.Scale object at 0x7ff0adc3da20>, intervals = 'MmMMmMM'

    def interval(self, intervals):
        chromatic_scale = self.chromatic()
        scale = [self.tonic]
>       idx = chromatic_scale.index(self.tonic)
E       ValueError: 'bb' is not in list

exercises/practice/scale-generator/scale_generator.py:18: ValueError
_______________ ScaleGeneratorTest.test_minor_scale_with_sharps ________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_minor_scale_with_sharps>

    def test_minor_scale_with_sharps(self):
        expected = ["F#", "G#", "A", "B", "C#", "D", "E", "F#"]
>       self.assertEqual(Scale("f#").interval("MmMMmMM"), expected)

exercises/practice/scale-generator/scale_generator_test.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scale_generator.Scale object at 0x7ff0add77430>, intervals = 'MmMMmMM'

    def interval(self, intervals):
        chromatic_scale = self.chromatic()
        scale = [self.tonic]
>       idx = chromatic_scale.index(self.tonic)
E       ValueError: 'f#' is not in list

exercises/practice/scale-generator/scale_generator.py:18: ValueError
___________________ ScaleGeneratorTest.test_mixolydian_mode ____________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_mixolydian_mode>

    def test_mixolydian_mode(self):
        expected = ["Eb", "F", "G", "Ab", "Bb", "C", "Db", "Eb"]
>       self.assertEqual(Scale("Eb").interval("MMmMMmM"), expected)
E       AssertionError: Lists differ: ['Eb', 'F', 'G', 'Ab', 'Bb', 'C', 'Db'] != ['Eb', 'F', 'G', 'Ab', 'Bb', 'C', 'Db', 'Eb']
E       
E       Second list contains 1 additional elements.
E       First extra element 7:
E       'Eb'
E       
E       - ['Eb', 'F', 'G', 'Ab', 'Bb', 'C', 'Db']
E       + ['Eb', 'F', 'G', 'Ab', 'Bb', 'C', 'Db', 'Eb']
E       ?                                       ++++++

exercises/practice/scale-generator/scale_generator_test.py:50: AssertionError
______________________ ScaleGeneratorTest.test_octatonic _______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_octatonic>

    def test_octatonic(self):
        expected = ["C", "D", "D#", "F", "F#", "G#", "A", "B", "C"]
>       self.assertEqual(Scale("C").interval("MmMmMmMm"), expected)
E       AssertionError: Lists differ: ['C', 'D', 'Eb', 'F', 'Gb', 'Ab', 'A', 'B'] != ['C', 'D', 'D#', 'F', 'F#', 'G#', 'A', 'B', 'C']
E       
E       First differing element 2:
E       'Eb'
E       'D#'
E       
E       Second list contains 1 additional elements.
E       First extra element 8:
E       'C'
E       
E       - ['C', 'D', 'Eb', 'F', 'Gb', 'Ab', 'A', 'B']
E       + ['C', 'D', 'D#', 'F', 'F#', 'G#', 'A', 'B', 'C']

exercises/practice/scale-generator/scale_generator_test.py:70: AssertionError
______________________ ScaleGeneratorTest.test_pentatonic ______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_pentatonic>

    def test_pentatonic(self):
        expected = ["A", "B", "C#", "E", "F#", "A"]
>       self.assertEqual(Scale("A").interval("MMAMA"), expected)
E       AssertionError: Lists differ: ['A', 'B', 'C#', 'E', 'F#'] != ['A', 'B', 'C#', 'E', 'F#', 'A']
E       
E       Second list contains 1 additional elements.
E       First extra element 5:
E       'A'
E       
E       - ['A', 'B', 'C#', 'E', 'F#']
E       + ['A', 'B', 'C#', 'E', 'F#', 'A']
E       ?                           +++++

exercises/practice/scale-generator/scale_generator_test.py:78: AssertionError
____________________ ScaleGeneratorTest.test_phrygian_mode _____________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_phrygian_mode>

    def test_phrygian_mode(self):
        expected = ["E", "F", "G", "A", "B", "C", "D", "E"]
>       self.assertEqual(Scale("e").interval("mMMMmMM"), expected)

exercises/practice/scale-generator/scale_generator_test.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scale_generator.Scale object at 0x7ff0adc1a9e0>, intervals = 'mMMMmMM'

    def interval(self, intervals):
        chromatic_scale = self.chromatic()
        scale = [self.tonic]
>       idx = chromatic_scale.index(self.tonic)
E       ValueError: 'e' is not in list

exercises/practice/scale-generator/scale_generator.py:18: ValueError
__________________ ScaleGeneratorTest.test_simple_major_scale __________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_simple_major_scale>

    def test_simple_major_scale(self):
        expected = ["C", "D", "E", "F", "G", "A", "B", "C"]
>       self.assertEqual(Scale("C").interval("MMmMMMm"), expected)
E       AssertionError: Lists differ: ['C', 'D', 'E', 'F', 'G', 'A', 'B'] != ['C', 'D', 'E', 'F', 'G', 'A', 'B', 'C']
E       
E       Second list contains 1 additional elements.
E       First extra element 7:
E       'C'
E       
E       - ['C', 'D', 'E', 'F', 'G', 'A', 'B']
E       + ['C', 'D', 'E', 'F', 'G', 'A', 'B', 'C']
E       ?                                   +++++

exercises/practice/scale-generator/scale_generator_test.py:26: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_chromatic_scale_with_sharps
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_dorian_mode
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_enigmatic
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_harmonic_minor
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_hexatonic
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_locrian_mode
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_lydian_mode
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_major_scale_with_flats
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_major_scale_with_sharps
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_minor_scale_with_flats
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_minor_scale_with_sharps
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_mixolydian_mode
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_octatonic
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_pentatonic
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_phrygian_mode
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_simple_major_scale
========================= 16 failed, 1 passed in 0.09s =========================
