============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1, asyncio-0.21.1
asyncio: mode=strict
collected 17 items

exercises/practice/scale-generator/scale_generator_test.py FFFFFFFFFFFFF [ 76%]
FFFF                                                                     [100%]

=================================== FAILURES ===================================
______________ ScaleGeneratorTest.test_chromatic_scale_with_flats ______________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_chromatic_scale_with_flats>

    def test_chromatic_scale_with_flats(self):
        expected = ["F", "Gb", "G", "Ab", "A", "Bb", "B", "C", "Db", "D", "Eb", "E"]
>       self.assertEqual(Scale("F").chromatic(), expected)
E       AssertionError: None != ['F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B', 'C', 'Db', 'D', 'Eb', 'E']

exercises/practice/scale-generator/scale_generator_test.py:21: AssertionError
_____________ ScaleGeneratorTest.test_chromatic_scale_with_sharps ______________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_chromatic_scale_with_sharps>

    def test_chromatic_scale_with_sharps(self):
        expected = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]
>       self.assertEqual(Scale("C").chromatic(), expected)
E       AssertionError: None != ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']

exercises/practice/scale-generator/scale_generator_test.py:17: AssertionError
_____________________ ScaleGeneratorTest.test_dorian_mode ______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_dorian_mode>

    def test_dorian_mode(self):
        expected = ["D", "E", "F", "G", "A", "B", "C", "D"]
>       self.assertEqual(Scale("d").interval("MmMMMmM"), expected)
E       AssertionError: None != ['D', 'E', 'F', 'G', 'A', 'B', 'C', 'D']

exercises/practice/scale-generator/scale_generator_test.py:46: AssertionError
______________________ ScaleGeneratorTest.test_enigmatic _______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_enigmatic>

    def test_enigmatic(self):
        expected = ["G", "G#", "B", "C#", "D#", "F", "F#", "G"]
>       self.assertEqual(Scale("G").interval("mAMMMmm"), expected)
E       AssertionError: None != ['G', 'G#', 'B', 'C#', 'D#', 'F', 'F#', 'G']

exercises/practice/scale-generator/scale_generator_test.py:82: AssertionError
____________________ ScaleGeneratorTest.test_harmonic_minor ____________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_harmonic_minor>

    def test_harmonic_minor(self):
        expected = ["D", "E", "F", "G", "A", "Bb", "Db", "D"]
>       self.assertEqual(Scale("d").interval("MmMMmAm"), expected)
E       AssertionError: None != ['D', 'E', 'F', 'G', 'A', 'Bb', 'Db', 'D']

exercises/practice/scale-generator/scale_generator_test.py:66: AssertionError
______________________ ScaleGeneratorTest.test_hexatonic _______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_hexatonic>

    def test_hexatonic(self):
        expected = ["Db", "Eb", "F", "G", "A", "B", "Db"]
>       self.assertEqual(Scale("Db").interval("MMMMMM"), expected)
E       AssertionError: None != ['Db', 'Eb', 'F', 'G', 'A', 'B', 'Db']

exercises/practice/scale-generator/scale_generator_test.py:74: AssertionError
_____________________ ScaleGeneratorTest.test_locrian_mode _____________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_locrian_mode>

    def test_locrian_mode(self):
        expected = ["G", "Ab", "Bb", "C", "Db", "Eb", "F", "G"]
>       self.assertEqual(Scale("g").interval("mMMmMMM"), expected)
E       AssertionError: None != ['G', 'Ab', 'Bb', 'C', 'Db', 'Eb', 'F', 'G']

exercises/practice/scale-generator/scale_generator_test.py:62: AssertionError
_____________________ ScaleGeneratorTest.test_lydian_mode ______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_lydian_mode>

    def test_lydian_mode(self):
        expected = ["A", "B", "C#", "D#", "E", "F#", "G#", "A"]
>       self.assertEqual(Scale("a").interval("MMMmMMm"), expected)
E       AssertionError: None != ['A', 'B', 'C#', 'D#', 'E', 'F#', 'G#', 'A']

exercises/practice/scale-generator/scale_generator_test.py:54: AssertionError
________________ ScaleGeneratorTest.test_major_scale_with_flats ________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_major_scale_with_flats>

    def test_major_scale_with_flats(self):
        expected = ["F", "G", "A", "Bb", "C", "D", "E", "F"]
>       self.assertEqual(Scale("F").interval("MMmMMMm"), expected)
E       AssertionError: None != ['F', 'G', 'A', 'Bb', 'C', 'D', 'E', 'F']

exercises/practice/scale-generator/scale_generator_test.py:34: AssertionError
_______________ ScaleGeneratorTest.test_major_scale_with_sharps ________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_major_scale_with_sharps>

    def test_major_scale_with_sharps(self):
        expected = ["G", "A", "B", "C", "D", "E", "F#", "G"]
>       self.assertEqual(Scale("G").interval("MMmMMMm"), expected)
E       AssertionError: None != ['G', 'A', 'B', 'C', 'D', 'E', 'F#', 'G']

exercises/practice/scale-generator/scale_generator_test.py:30: AssertionError
________________ ScaleGeneratorTest.test_minor_scale_with_flats ________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_minor_scale_with_flats>

    def test_minor_scale_with_flats(self):
        expected = ["Bb", "C", "Db", "Eb", "F", "Gb", "Ab", "Bb"]
>       self.assertEqual(Scale("bb").interval("MmMMmMM"), expected)
E       AssertionError: None != ['Bb', 'C', 'Db', 'Eb', 'F', 'Gb', 'Ab', 'Bb']

exercises/practice/scale-generator/scale_generator_test.py:42: AssertionError
_______________ ScaleGeneratorTest.test_minor_scale_with_sharps ________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_minor_scale_with_sharps>

    def test_minor_scale_with_sharps(self):
        expected = ["F#", "G#", "A", "B", "C#", "D", "E", "F#"]
>       self.assertEqual(Scale("f#").interval("MmMMmMM"), expected)
E       AssertionError: None != ['F#', 'G#', 'A', 'B', 'C#', 'D', 'E', 'F#']

exercises/practice/scale-generator/scale_generator_test.py:38: AssertionError
___________________ ScaleGeneratorTest.test_mixolydian_mode ____________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_mixolydian_mode>

    def test_mixolydian_mode(self):
        expected = ["Eb", "F", "G", "Ab", "Bb", "C", "Db", "Eb"]
>       self.assertEqual(Scale("Eb").interval("MMmMMmM"), expected)
E       AssertionError: None != ['Eb', 'F', 'G', 'Ab', 'Bb', 'C', 'Db', 'Eb']

exercises/practice/scale-generator/scale_generator_test.py:50: AssertionError
______________________ ScaleGeneratorTest.test_octatonic _______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_octatonic>

    def test_octatonic(self):
        expected = ["C", "D", "D#", "F", "F#", "G#", "A", "B", "C"]
>       self.assertEqual(Scale("C").interval("MmMmMmMm"), expected)
E       AssertionError: None != ['C', 'D', 'D#', 'F', 'F#', 'G#', 'A', 'B', 'C']

exercises/practice/scale-generator/scale_generator_test.py:70: AssertionError
______________________ ScaleGeneratorTest.test_pentatonic ______________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_pentatonic>

    def test_pentatonic(self):
        expected = ["A", "B", "C#", "E", "F#", "A"]
>       self.assertEqual(Scale("A").interval("MMAMA"), expected)
E       AssertionError: None != ['A', 'B', 'C#', 'E', 'F#', 'A']

exercises/practice/scale-generator/scale_generator_test.py:78: AssertionError
____________________ ScaleGeneratorTest.test_phrygian_mode _____________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_phrygian_mode>

    def test_phrygian_mode(self):
        expected = ["E", "F", "G", "A", "B", "C", "D", "E"]
>       self.assertEqual(Scale("e").interval("mMMMmMM"), expected)
E       AssertionError: None != ['E', 'F', 'G', 'A', 'B', 'C', 'D', 'E']

exercises/practice/scale-generator/scale_generator_test.py:58: AssertionError
__________________ ScaleGeneratorTest.test_simple_major_scale __________________

self = <scale_generator_test.ScaleGeneratorTest testMethod=test_simple_major_scale>

    def test_simple_major_scale(self):
        expected = ["C", "D", "E", "F", "G", "A", "B", "C"]
>       self.assertEqual(Scale("C").interval("MMmMMMm"), expected)
E       AssertionError: None != ['C', 'D', 'E', 'F', 'G', 'A', 'B', 'C']

exercises/practice/scale-generator/scale_generator_test.py:26: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_chromatic_scale_with_flats
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_chromatic_scale_with_sharps
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_dorian_mode
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_enigmatic
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_harmonic_minor
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_hexatonic
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_locrian_mode
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_lydian_mode
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_major_scale_with_flats
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_major_scale_with_sharps
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_minor_scale_with_flats
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_minor_scale_with_sharps
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_mixolydian_mode
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_octatonic
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_pentatonic
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_phrygian_mode
FAILED exercises/practice/scale-generator/scale_generator_test.py::ScaleGeneratorTest::test_simple_major_scale
============================== 17 failed in 0.08s ==============================
