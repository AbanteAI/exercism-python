============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1, asyncio-0.21.1
asyncio: mode=strict
collected 17 items

exercises/practice/word-count/word_count_test.py ...F.FF...F..F.FF       [100%]

=================================== FAILURES ===================================
___________________ WordCountTest.test_handles_cramped_lists ___________________

self = <word_count_test.WordCountTest testMethod=test_handles_cramped_lists>

    def test_handles_cramped_lists(self):
>       self.assertEqual(count_words("one,two,three"), {"one": 1, "two": 1, "three": 1})
E       AssertionError: {'one,two,three': 1} != {'one': 1, 'two': 1, 'three': 1}
E       - {'one,two,three': 1}
E       + {'one': 1, 'three': 1, 'two': 1}

exercises/practice/word-count/word_count_test.py:26: AssertionError
____________________ WordCountTest.test_ignore_punctuation _____________________

self = <word_count_test.WordCountTest testMethod=test_ignore_punctuation>

    def test_ignore_punctuation(self):
>       self.assertEqual(
            count_words("car: carpet as java: javascript!!&@$%^&"),
            {"car": 1, "carpet": 1, "as": 1, "java": 1, "javascript": 1},
        )
E       AssertionError: {'car': 1, 'carpet': 1, 'as': 1, 'java': 1, 'javascript!!&@$%^&': 1} != {'car': 1, 'carpet': 1, 'as': 1, 'java': 1, 'javascript': 1}
E       - {'as': 1, 'car': 1, 'carpet': 1, 'java': 1, 'javascript!!&@$%^&': 1}
E       ?                                                        --------
E       
E       + {'as': 1, 'car': 1, 'carpet': 1, 'java': 1, 'javascript': 1}

exercises/practice/word-count/word_count_test.py:34: AssertionError
______________________ WordCountTest.test_include_numbers ______________________

self = <word_count_test.WordCountTest testMethod=test_include_numbers>

    def test_include_numbers(self):
>       self.assertEqual(
            count_words("testing, 1, 2 testing"), {"testing": 2, "1": 1, "2": 1}
        )
E       AssertionError: {'testing': 2} != {'testing': 2, '1': 1, '2': 1}
E       - {'testing': 2}
E       + {'1': 1, '2': 1, 'testing': 2}

exercises/practice/word-count/word_count_test.py:40: AssertionError
_____________________ WordCountTest.test_non_alphanumeric ______________________

self = <word_count_test.WordCountTest testMethod=test_non_alphanumeric>

    def test_non_alphanumeric(self):
>       self.assertEqual(
            count_words("hey,my_spacebar_is_broken"),
            {"hey": 1, "my": 1, "spacebar": 1, "is": 1, "broken": 1},
        )
E       AssertionError: {'hey,my_spacebar_is_broken': 1} != {'hey': 1, 'my': 1, 'spacebar': 1, 'is': 1, 'broken': 1}
E       - {'hey,my_spacebar_is_broken': 1}
E       + {'broken': 1, 'hey': 1, 'is': 1, 'my': 1, 'spacebar': 1}

exercises/practice/word-count/word_count_test.py:119: AssertionError
_______________ WordCountTest.test_substrings_from_the_beginning _______________

self = <word_count_test.WordCountTest testMethod=test_substrings_from_the_beginning>

    def test_substrings_from_the_beginning(self):
>       self.assertEqual(
            count_words("Joe can't tell between app, apple and a."),
            {
                "joe": 1,
                "can't": 1,
                "tell": 1,
                "between": 1,
                "app": 1,
                "apple": 1,
                "and": 1,
                "a": 1,
            },
        )
E       AssertionError: {'joe[20 chars]ell': 1, 'between': 1, 'app': 1, 'apple': 1, 'and': 1, 'a.': 1} != {'joe[20 chars]ell': 1, 'between': 1, 'app': 1, 'apple': 1, 'and': 1, 'a': 1}
E       - {'a.': 1,
E       ?    -
E       
E       + {'a': 1,
E          'and': 1,
E          'app': 1,
E          'apple': 1,
E          'between': 1,
E          "can't": 1,
E          'joe': 1,
E          'tell': 1}

exercises/practice/word-count/word_count_test.py:69: AssertionError
_____________________ WordCountTest.test_with_apostrophes ______________________

self = <word_count_test.WordCountTest testMethod=test_with_apostrophes>

    def test_with_apostrophes(self):
>       self.assertEqual(
            count_words("'First: don't laugh. Then: don't cry. You're getting it.'"),
            {
                "first": 1,
                "don't": 2,
                "laugh": 1,
                "then": 1,
                "cry": 1,
                "you're": 1,
                "getting": 1,
                "it": 1,
            },
        )
E       AssertionError: {"'first": 1, "don't": 2, 'laugh.': 1, 'th[51 chars]": 1} != {'first': 1, "don't": 2, 'laugh': 1, 'then[46 chars]': 1}
E       - {"'first": 1,
E       -  'cry.': 1,
E       ? ^    -
E       
E       + {'cry': 1,
E       ? ^
E       
E          "don't": 2,
E       +  'first': 1,
E          'getting': 1,
E       -  "it.'": 1,
E       ?  ^  - -
E       
E       +  'it': 1,
E       ?  ^
E       
E       -  'laugh.': 1,
E       ?        -
E       
E       +  'laugh': 1,
E          'then': 1,
E          "you're": 1}

exercises/practice/word-count/word_count_test.py:48: AssertionError
______________________ WordCountTest.test_with_quotations ______________________

self = <word_count_test.WordCountTest testMethod=test_with_quotations>

    def test_with_quotations(self):
>       self.assertEqual(
            count_words("Joe can't tell between 'large' and large."),
            {"joe": 1, "can't": 1, "tell": 1, "between": 1, "large": 2, "and": 1},
        )
E       AssertionError: {'joe[14 chars] 1, 'tell': 1, 'between': 1, 'large': 1, 'and': 1, 'large.': 1} != {'joe[14 chars] 1, 'tell': 1, 'between': 1, 'large': 2, 'and': 1}
E       + {'and': 1, 'between': 1, "can't": 1, 'joe': 1, 'large': 2, 'tell': 1}
E       - {'and': 1,
E       -  'between': 1,
E       -  "can't": 1,
E       -  'joe': 1,
E       -  'large': 1,
E       -  'large.': 1,
E       -  'tell': 1}

exercises/practice/word-count/word_count_test.py:63: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/word-count/word_count_test.py::WordCountTest::test_handles_cramped_lists
FAILED exercises/practice/word-count/word_count_test.py::WordCountTest::test_ignore_punctuation
FAILED exercises/practice/word-count/word_count_test.py::WordCountTest::test_include_numbers
FAILED exercises/practice/word-count/word_count_test.py::WordCountTest::test_non_alphanumeric
FAILED exercises/practice/word-count/word_count_test.py::WordCountTest::test_substrings_from_the_beginning
FAILED exercises/practice/word-count/word_count_test.py::WordCountTest::test_with_apostrophes
FAILED exercises/practice/word-count/word_count_test.py::WordCountTest::test_with_quotations
========================= 7 failed, 10 passed in 0.07s =========================
