============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 21 items

exercises/practice/phone-number/phone_number_test.py FFFFFFFFFFFFFFFFFFF [ 90%]
FF                                                                       [100%]

=================================== FAILURES ===================================
________________________ PhoneNumberTest.test_area_code ________________________

self = <phone_number_test.PhoneNumberTest testMethod=test_area_code>

    def test_area_code(self):
        number = PhoneNumber("2234567890")
>       self.assertEqual(number.area_code, "223")
E       AttributeError: 'PhoneNumber' object has no attribute 'area_code'

exercises/practice/phone-number/phone_number_test.py:114: AttributeError
________________ PhoneNumberTest.test_cleans_numbers_with_dots _________________

self = <phone_number_test.PhoneNumberTest testMethod=test_cleans_numbers_with_dots>

    def test_cleans_numbers_with_dots(self):
>       number = PhoneNumber("223.456.7890").number
E       AttributeError: 'PhoneNumber' object has no attribute 'number'

exercises/practice/phone-number/phone_number_test.py:18: AttributeError
___________ PhoneNumberTest.test_cleans_numbers_with_multiple_spaces ___________

self = <phone_number_test.PhoneNumberTest testMethod=test_cleans_numbers_with_multiple_spaces>

    def test_cleans_numbers_with_multiple_spaces(self):
>       number = PhoneNumber("223 456   7890   ").number
E       AttributeError: 'PhoneNumber' object has no attribute 'number'

exercises/practice/phone-number/phone_number_test.py:22: AttributeError
____________________ PhoneNumberTest.test_cleans_the_number ____________________

self = <phone_number_test.PhoneNumberTest testMethod=test_cleans_the_number>

    def test_cleans_the_number(self):
>       number = PhoneNumber("(223) 456-7890").number
E       AttributeError: 'PhoneNumber' object has no attribute 'number'

exercises/practice/phone-number/phone_number_test.py:14: AttributeError
___________ PhoneNumberTest.test_invalid_if_area_code_starts_with_0 ____________

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_if_area_code_starts_with_0>

    def test_invalid_if_area_code_starts_with_0(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/phone-number/phone_number_test.py:64: AssertionError
_ PhoneNumberTest.test_invalid_if_area_code_starts_with_0_on_valid_11_digit_number _

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_if_area_code_starts_with_0_on_valid_11_digit_number>

    def test_invalid_if_area_code_starts_with_0_on_valid_11_digit_number(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/phone-number/phone_number_test.py:88: AssertionError
___________ PhoneNumberTest.test_invalid_if_area_code_starts_with_1 ____________

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_if_area_code_starts_with_1>

    def test_invalid_if_area_code_starts_with_1(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/phone-number/phone_number_test.py:70: AssertionError
_ PhoneNumberTest.test_invalid_if_area_code_starts_with_1_on_valid_11_digit_number _

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_if_area_code_starts_with_1_on_valid_11_digit_number>

    def test_invalid_if_area_code_starts_with_1_on_valid_11_digit_number(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/phone-number/phone_number_test.py:94: AssertionError
_________ PhoneNumberTest.test_invalid_if_exchange_code_starts_with_0 __________

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_if_exchange_code_starts_with_0>

    def test_invalid_if_exchange_code_starts_with_0(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/phone-number/phone_number_test.py:76: AssertionError
_ PhoneNumberTest.test_invalid_if_exchange_code_starts_with_0_on_valid_11_digit_number _

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_if_exchange_code_starts_with_0_on_valid_11_digit_number>

    def test_invalid_if_exchange_code_starts_with_0_on_valid_11_digit_number(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/phone-number/phone_number_test.py:100: AssertionError
_________ PhoneNumberTest.test_invalid_if_exchange_code_starts_with_1 __________

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_if_exchange_code_starts_with_1>

    def test_invalid_if_exchange_code_starts_with_1(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/phone-number/phone_number_test.py:82: AssertionError
_ PhoneNumberTest.test_invalid_if_exchange_code_starts_with_1_on_valid_11_digit_number _

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_if_exchange_code_starts_with_1_on_valid_11_digit_number>

    def test_invalid_if_exchange_code_starts_with_1_on_valid_11_digit_number(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/phone-number/phone_number_test.py:106: AssertionError
_____ PhoneNumberTest.test_invalid_when_11_digits_does_not_start_with_a_1 ______

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_when_11_digits_does_not_start_with_a_1>

    def test_invalid_when_11_digits_does_not_start_with_a_1(self):
        with self.assertRaises(ValueError) as err:
            PhoneNumber("22234567890")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "11 digits must start with 1")
E       AssertionError: 'Invalid phone number' != '11 digits must start with 1'
E       - Invalid phone number
E       + 11 digits must start with 1

exercises/practice/phone-number/phone_number_test.py:35: AssertionError
__________________ PhoneNumberTest.test_invalid_when_9_digits __________________

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_when_9_digits>

    def test_invalid_when_9_digits(self):
        with self.assertRaises(ValueError) as err:
            PhoneNumber("123456789")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "must not be fewer than 10 digits")
E       AssertionError: 'Invalid phone number' != 'must not be fewer than 10 digits'
E       - Invalid phone number
E       + must not be fewer than 10 digits

exercises/practice/phone-number/phone_number_test.py:29: AssertionError
____________ PhoneNumberTest.test_invalid_when_more_than_11_digits _____________

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_when_more_than_11_digits>

    def test_invalid_when_more_than_11_digits(self):
        with self.assertRaises(ValueError) as err:
            PhoneNumber("321234567890")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "must not be greater than 11 digits")
E       AssertionError: 'Invalid phone number' != 'must not be greater than 11 digits'
E       - Invalid phone number
E       + must not be greater than 11 digits

exercises/practice/phone-number/phone_number_test.py:49: AssertionError
__________________ PhoneNumberTest.test_invalid_with_letters ___________________

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_with_letters>

    def test_invalid_with_letters(self):
        with self.assertRaises(ValueError) as err:
            PhoneNumber("523-abc-7890")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "letters not permitted")
E       AssertionError: 'Invalid phone number' != 'letters not permitted'
E       - Invalid phone number
E       + letters not permitted

exercises/practice/phone-number/phone_number_test.py:55: AssertionError
________________ PhoneNumberTest.test_invalid_with_punctuations ________________

self = <phone_number_test.PhoneNumberTest testMethod=test_invalid_with_punctuations>

    def test_invalid_with_punctuations(self):
        with self.assertRaises(ValueError) as err:
            PhoneNumber("523-@:!-7890")
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "punctuations not permitted")
E       AssertionError: 'Invalid phone number' != 'punctuations not permitted'
E       - Invalid phone number
E       + punctuations not permitted

exercises/practice/phone-number/phone_number_test.py:61: AssertionError
______________________ PhoneNumberTest.test_pretty_print _______________________

self = <phone_number_test.PhoneNumberTest testMethod=test_pretty_print>

    def test_pretty_print(self):
        number = PhoneNumber("2234567890")
>       self.assertEqual(number.pretty(), "(223)-456-7890")
E       AttributeError: 'PhoneNumber' object has no attribute 'pretty'

exercises/practice/phone-number/phone_number_test.py:118: AttributeError
_________ PhoneNumberTest.test_pretty_print_with_full_us_phone_number __________

self = <phone_number_test.PhoneNumberTest testMethod=test_pretty_print_with_full_us_phone_number>

    def test_pretty_print_with_full_us_phone_number(self):
        number = PhoneNumber("12234567890")
>       self.assertEqual(number.pretty(), "(223)-456-7890")
E       AttributeError: 'PhoneNumber' object has no attribute 'pretty'

exercises/practice/phone-number/phone_number_test.py:122: AttributeError
________ PhoneNumberTest.test_valid_when_11_digits_and_starting_with_1 _________

self = <phone_number_test.PhoneNumberTest testMethod=test_valid_when_11_digits_and_starting_with_1>

    def test_valid_when_11_digits_and_starting_with_1(self):
>       number = PhoneNumber("12234567890").number
E       AttributeError: 'PhoneNumber' object has no attribute 'number'

exercises/practice/phone-number/phone_number_test.py:38: AttributeError
_ PhoneNumberTest.test_valid_when_11_digits_and_starting_with_1_even_with_punctuation _

self = <phone_number_test.PhoneNumberTest testMethod=test_valid_when_11_digits_and_starting_with_1_even_with_punctuation>

    def test_valid_when_11_digits_and_starting_with_1_even_with_punctuation(self):
>       number = PhoneNumber("+1 (223) 456-7890").number
E       AttributeError: 'PhoneNumber' object has no attribute 'number'

exercises/practice/phone-number/phone_number_test.py:42: AttributeError
=========================== short test summary info ============================
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_area_code
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_cleans_numbers_with_dots
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_cleans_numbers_with_multiple_spaces
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_cleans_the_number
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_if_area_code_starts_with_0
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_if_area_code_starts_with_0_on_valid_11_digit_number
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_if_area_code_starts_with_1
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_if_area_code_starts_with_1_on_valid_11_digit_number
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_if_exchange_code_starts_with_0
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_if_exchange_code_starts_with_0_on_valid_11_digit_number
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_if_exchange_code_starts_with_1
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_if_exchange_code_starts_with_1_on_valid_11_digit_number
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_when_11_digits_does_not_start_with_a_1
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_when_9_digits
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_when_more_than_11_digits
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_with_letters
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_invalid_with_punctuations
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_pretty_print
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_pretty_print_with_full_us_phone_number
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_valid_when_11_digits_and_starting_with_1
FAILED exercises/practice/phone-number/phone_number_test.py::PhoneNumberTest::test_valid_when_11_digits_and_starting_with_1_even_with_punctuation
============================== 21 failed in 0.11s ==============================
