============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 12 items

exercises/practice/dot-dsl/dot_dsl_test.py ......FFFFFF                  [100%]

=================================== FAILURES ===================================
________________________ DotDslTest.test_malformed_EDGE ________________________

self = <dot_dsl_test.DotDslTest testMethod=test_malformed_EDGE>

    def test_malformed_EDGE(self):
        with self.assertRaises(ValueError) as err:
            Graph([(EDGE, 1, 2)])
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Edge is malformed")
E       AssertionError: 'Edge malformed' != 'Edge is malformed'
E       - Edge malformed
E       + Edge is malformed
E       ?     +++

exercises/practice/dot-dsl/dot_dsl_test.py:115: AssertionError
________________________ DotDslTest.test_malformed_attr ________________________

self = <dot_dsl_test.DotDslTest testMethod=test_malformed_attr>

    def test_malformed_attr(self):
        with self.assertRaises(ValueError) as err:
            Graph([(ATTR, 1, 2, 3)])
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Attribute is malformed")
E       AssertionError: 'Attribute key must be a string' != 'Attribute is malformed'
E       - Attribute key must be a string
E       + Attribute is malformed

exercises/practice/dot-dsl/dot_dsl_test.py:101: AssertionError
_______________________ DotDslTest.test_malformed_graph ________________________

self = <dot_dsl_test.DotDslTest testMethod=test_malformed_graph>

    def test_malformed_graph(self):
        with self.assertRaises(TypeError) as err:
            Graph(1)
        self.assertEqual(type(err.exception), TypeError)
>       self.assertEqual(err.exception.args[0], "Graph data malformed")
E       AssertionError: 'Graph data must be a list' != 'Graph data malformed'
E       - Graph data must be a list
E       + Graph data malformed

exercises/practice/dot-dsl/dot_dsl_test.py:77: AssertionError
_____________________ DotDslTest.test_malformed_graph_item _____________________

self = <dot_dsl_test.DotDslTest testMethod=test_malformed_graph_item>

    def test_malformed_graph_item(self):
        with self.assertRaises(TypeError) as err:
            Graph([()])
        self.assertEqual(type(err.exception), TypeError)
>       self.assertEqual(err.exception.args[0], "Graph item incomplete")
E       AssertionError: 'Malformed graph component' != 'Graph item incomplete'
E       - Malformed graph component
E       + Graph item incomplete

exercises/practice/dot-dsl/dot_dsl_test.py:88: AssertionError
________________________ DotDslTest.test_malformed_node ________________________

self = <dot_dsl_test.DotDslTest testMethod=test_malformed_node>

    def test_malformed_node(self):
        with self.assertRaises(ValueError) as err:
            Graph([(NODE, 1, 2, 3)])
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "Node is malformed")
E       AssertionError: 'Node malformed' != 'Node is malformed'
E       - Node malformed
E       + Node is malformed
E       ?     +++

exercises/practice/dot-dsl/dot_dsl_test.py:108: AssertionError
_________________________ DotDslTest.test_unknown_item _________________________

self = <dot_dsl_test.DotDslTest testMethod=test_unknown_item>

    def test_unknown_item(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/dot-dsl/dot_dsl_test.py:118: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_malformed_EDGE
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_malformed_attr
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_malformed_graph
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_malformed_graph_item
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_malformed_node
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_unknown_item
========================= 6 failed, 6 passed in 0.08s ==========================
