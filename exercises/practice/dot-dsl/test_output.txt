============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 12 items

exercises/practice/dot-dsl/dot_dsl_test.py .FFFFFFF.FFF                  [100%]

=================================== FAILURES ===================================
____________________ DotDslTest.test_graph_with_attributes _____________________

self = <dot_dsl_test.DotDslTest testMethod=test_graph_with_attributes>

    def test_graph_with_attributes(self):
>       g = Graph([
            (ATTR, "foo", "1"),
            (ATTR, "title", "Testing Attrs"),
            (NODE, "a", {"color": "green"}),
            (NODE, "c", {}),
            (NODE, "b", {"label": "Beta!"}),
            (EDGE, "b", "c", {}),
            (EDGE, "a", "b", {"color": "blue"}),
            (ATTR, "bar", "true")
        ])

exercises/practice/dot-dsl/dot_dsl_test.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dot_dsl.Graph object at 0x7f4d7a584d00>
data = [(2, 'foo', '1'), (2, 'title', 'Testing Attrs'), (0, 'a', {'color': 'green'}), (0, 'c', {}), (0, 'b', {'label': 'Beta!'}), (1, 'b', 'c', {}), ...]

    def __init__(self, data=None):
        if data is None:
            self.nodes = []
            self.edges = []
            self.attrs = {}
        elif not isinstance(data, list) or not all(isinstance(item, tuple) and len(item) == 3 for item in data):
>           raise TypeError("Graph data malformed")
E           TypeError: Graph data malformed

exercises/practice/dot-dsl/dot_dsl.py:32: TypeError
___________________ DotDslTest.test_graph_with_one_attribute ___________________

self = <dot_dsl_test.DotDslTest testMethod=test_graph_with_one_attribute>

    def test_graph_with_one_attribute(self):
>       g = Graph([
            (ATTR, "foo", "1")
        ])

exercises/practice/dot-dsl/dot_dsl_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/dot-dsl/dot_dsl.py:35: in __init__
    self.edges = [Edge(src, dst, attrs) for item_type, (src, dst), attrs in data if item_type == EDGE]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f4d7a5e6e60>

>   self.edges = [Edge(src, dst, attrs) for item_type, (src, dst), attrs in data if item_type == EDGE]
E   ValueError: too many values to unpack (expected 2)

exercises/practice/dot-dsl/dot_dsl.py:35: ValueError
_____________________ DotDslTest.test_graph_with_one_edge ______________________

self = <dot_dsl_test.DotDslTest testMethod=test_graph_with_one_edge>

    def test_graph_with_one_edge(self):
>       g = Graph([
            (EDGE, "a", "b", {})
        ])

exercises/practice/dot-dsl/dot_dsl_test.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dot_dsl.Graph object at 0x7f4d7a584040>, data = [(1, 'a', 'b', {})]

    def __init__(self, data=None):
        if data is None:
            self.nodes = []
            self.edges = []
            self.attrs = {}
        elif not isinstance(data, list) or not all(isinstance(item, tuple) and len(item) == 3 for item in data):
>           raise TypeError("Graph data malformed")
E           TypeError: Graph data malformed

exercises/practice/dot-dsl/dot_dsl.py:32: TypeError
_____________________ DotDslTest.test_graph_with_one_node ______________________

self = <dot_dsl_test.DotDslTest testMethod=test_graph_with_one_node>

    def test_graph_with_one_node(self):
>       g = Graph([
            (NODE, "a", {})
        ])

exercises/practice/dot-dsl/dot_dsl_test.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/dot-dsl/dot_dsl.py:35: in __init__
    self.edges = [Edge(src, dst, attrs) for item_type, (src, dst), attrs in data if item_type == EDGE]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f4d7a6204c0>

>   self.edges = [Edge(src, dst, attrs) for item_type, (src, dst), attrs in data if item_type == EDGE]
E   ValueError: not enough values to unpack (expected 2, got 1)

exercises/practice/dot-dsl/dot_dsl.py:35: ValueError
______________ DotDslTest.test_graph_with_one_node_with_keywords _______________

self = <dot_dsl_test.DotDslTest testMethod=test_graph_with_one_node_with_keywords>

    def test_graph_with_one_node_with_keywords(self):
>       g = Graph([
            (NODE, "a", {"color": "green"})
        ])

exercises/practice/dot-dsl/dot_dsl_test.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/dot-dsl/dot_dsl.py:35: in __init__
    self.edges = [Edge(src, dst, attrs) for item_type, (src, dst), attrs in data if item_type == EDGE]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f4d7ad960e0>

>   self.edges = [Edge(src, dst, attrs) for item_type, (src, dst), attrs in data if item_type == EDGE]
E   ValueError: not enough values to unpack (expected 2, got 1)

exercises/practice/dot-dsl/dot_dsl.py:35: ValueError
________________________ DotDslTest.test_malformed_EDGE ________________________

self = <dot_dsl_test.DotDslTest testMethod=test_malformed_EDGE>

    def test_malformed_EDGE(self):
        with self.assertRaises(ValueError) as err:
>           Graph([(EDGE, 1, 2)])

exercises/practice/dot-dsl/dot_dsl_test.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/dot-dsl/dot_dsl.py:35: in __init__
    self.edges = [Edge(src, dst, attrs) for item_type, (src, dst), attrs in data if item_type == EDGE]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   self.edges = [Edge(src, dst, attrs) for item_type, (src, dst), attrs in data if item_type == EDGE]
E   TypeError: cannot unpack non-iterable int object

exercises/practice/dot-dsl/dot_dsl.py:35: TypeError
________________________ DotDslTest.test_malformed_attr ________________________

self = <dot_dsl_test.DotDslTest testMethod=test_malformed_attr>

    def test_malformed_attr(self):
        with self.assertRaises(ValueError) as err:
>           Graph([(ATTR, 1, 2, 3)])

exercises/practice/dot-dsl/dot_dsl_test.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def __init__(self, data=None):
        if data is None:
            self.nodes = []
            self.edges = []
            self.attrs = {}
        elif not isinstance(data, list) or not all(isinstance(item, tuple) and len(item) == 3 for item in data):
>           raise TypeError("Graph data malformed")
E           TypeError: Graph data malformed

exercises/practice/dot-dsl/dot_dsl.py:32: TypeError
_____________________ DotDslTest.test_malformed_graph_item _____________________

self = <dot_dsl_test.DotDslTest testMethod=test_malformed_graph_item>

    def test_malformed_graph_item(self):
        with self.assertRaises(TypeError) as err:
            Graph([()])
        self.assertEqual(type(err.exception), TypeError)
>       self.assertEqual(err.exception.args[0], "Graph item incomplete")
E       AssertionError: 'Graph data malformed' != 'Graph item incomplete'
E       - Graph data malformed
E       + Graph item incomplete

exercises/practice/dot-dsl/dot_dsl_test.py:88: AssertionError
________________________ DotDslTest.test_malformed_node ________________________

self = <dot_dsl_test.DotDslTest testMethod=test_malformed_node>

    def test_malformed_node(self):
        with self.assertRaises(ValueError) as err:
>           Graph([(NODE, 1, 2, 3)])

exercises/practice/dot-dsl/dot_dsl_test.py:106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def __init__(self, data=None):
        if data is None:
            self.nodes = []
            self.edges = []
            self.attrs = {}
        elif not isinstance(data, list) or not all(isinstance(item, tuple) and len(item) == 3 for item in data):
>           raise TypeError("Graph data malformed")
E           TypeError: Graph data malformed

exercises/practice/dot-dsl/dot_dsl.py:32: TypeError
_________________________ DotDslTest.test_unknown_item _________________________

self = <dot_dsl_test.DotDslTest testMethod=test_unknown_item>

    def test_unknown_item(self):
        with self.assertRaises(ValueError) as err:
>           Graph([(99, 1, 2)])

exercises/practice/dot-dsl/dot_dsl_test.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/dot-dsl/dot_dsl.py:35: in __init__
    self.edges = [Edge(src, dst, attrs) for item_type, (src, dst), attrs in data if item_type == EDGE]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   self.edges = [Edge(src, dst, attrs) for item_type, (src, dst), attrs in data if item_type == EDGE]
E   TypeError: cannot unpack non-iterable int object

exercises/practice/dot-dsl/dot_dsl.py:35: TypeError
=========================== short test summary info ============================
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_graph_with_attributes
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_graph_with_one_attribute
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_graph_with_one_edge
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_graph_with_one_node
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_graph_with_one_node_with_keywords
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_malformed_EDGE
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_malformed_attr
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_malformed_graph_item
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_malformed_node
FAILED exercises/practice/dot-dsl/dot_dsl_test.py::DotDslTest::test_unknown_item
========================= 10 failed, 2 passed in 0.08s =========================
