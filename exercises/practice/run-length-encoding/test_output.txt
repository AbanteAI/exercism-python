============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1, asyncio-0.21.1
asyncio: mode=strict
collected 13 items

exercises/practice/run-length-encoding/run_length_encoding_test.py ..... [ 38%]
.FFFFFFF                                                                 [100%]

=================================== FAILURES ===================================
________________ RunLengthEncodingTest.test_encode_empty_string ________________

self = <run_length_encoding_test.RunLengthEncodingTest testMethod=test_encode_empty_string>

    def test_encode_empty_string(self):
>       self.assertMultiLineEqual(encode(""), "")

exercises/practice/run-length-encoding/run_length_encoding_test.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = ''

    def encode(string):
        encoded_string = ""
        count = 1
        for i in range(1, len(string) + 1):
            if string[i] == string[i - 1]:
                count += 1
            else:
                if count > 1:
                    encoded_string += str(count)
                encoded_string += string[i - 1]
                count = 1
        if count > 1:
            encoded_string += str(count)
>       encoded_string += string[-1]
E       IndexError: string index out of range

exercises/practice/run-length-encoding/run_length_encoding.py:28: IndexError
__ RunLengthEncodingTest.test_encode_followed_by_decode_gives_original_string __

self = <run_length_encoding_test.RunLengthEncodingTest testMethod=test_encode_followed_by_decode_gives_original_string>

    def test_encode_followed_by_decode_gives_original_string(self):
>       self.assertMultiLineEqual(decode(encode("zzz ZZ  zZ")), "zzz ZZ  zZ")

exercises/practice/run-length-encoding/run_length_encoding_test.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = 'zzz ZZ  zZ'

    def encode(string):
        encoded_string = ""
        count = 1
        for i in range(1, len(string) + 1):
>           if string[i] == string[i - 1]:
E           IndexError: string index out of range

exercises/practice/run-length-encoding/run_length_encoding.py:19: IndexError
____________ RunLengthEncodingTest.test_encode_lowercase_characters ____________

self = <run_length_encoding_test.RunLengthEncodingTest testMethod=test_encode_lowercase_characters>

    def test_encode_lowercase_characters(self):
>       self.assertMultiLineEqual(encode("aabbbcccc"), "2a3b4c")

exercises/practice/run-length-encoding/run_length_encoding_test.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = 'aabbbcccc'

    def encode(string):
        encoded_string = ""
        count = 1
        for i in range(1, len(string) + 1):
>           if string[i] == string[i - 1]:
E           IndexError: string index out of range

exercises/practice/run-length-encoding/run_length_encoding.py:19: IndexError
____ RunLengthEncodingTest.test_encode_multiple_whitespace_mixed_in_string _____

self = <run_length_encoding_test.RunLengthEncodingTest testMethod=test_encode_multiple_whitespace_mixed_in_string>

    def test_encode_multiple_whitespace_mixed_in_string(self):
>       self.assertMultiLineEqual(encode("  hsqq qww  "), "2 hs2q q2w2 ")

exercises/practice/run-length-encoding/run_length_encoding_test.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '  hsqq qww  '

    def encode(string):
        encoded_string = ""
        count = 1
        for i in range(1, len(string) + 1):
>           if string[i] == string[i - 1]:
E           IndexError: string index out of range

exercises/practice/run-length-encoding/run_length_encoding.py:19: IndexError
_ RunLengthEncodingTest.test_encode_single_characters_mixed_with_repeated_characters _

self = <run_length_encoding_test.RunLengthEncodingTest testMethod=test_encode_single_characters_mixed_with_repeated_characters>

    def test_encode_single_characters_mixed_with_repeated_characters(self):
        self.assertMultiLineEqual(
>           encode("WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB"),
            "12WB12W3B24WB",
        )

exercises/practice/run-length-encoding/run_length_encoding_test.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = 'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB'

    def encode(string):
        encoded_string = ""
        count = 1
        for i in range(1, len(string) + 1):
>           if string[i] == string[i - 1]:
E           IndexError: string index out of range

exercises/practice/run-length-encoding/run_length_encoding.py:19: IndexError
_ RunLengthEncodingTest.test_encode_single_characters_only_are_encoded_without_count _

self = <run_length_encoding_test.RunLengthEncodingTest testMethod=test_encode_single_characters_only_are_encoded_without_count>

    def test_encode_single_characters_only_are_encoded_without_count(self):
>       self.assertMultiLineEqual(encode("XYZ"), "XYZ")

exercises/practice/run-length-encoding/run_length_encoding_test.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = 'XYZ'

    def encode(string):
        encoded_string = ""
        count = 1
        for i in range(1, len(string) + 1):
>           if string[i] == string[i - 1]:
E           IndexError: string index out of range

exercises/practice/run-length-encoding/run_length_encoding.py:19: IndexError
______ RunLengthEncodingTest.test_encode_string_with_no_single_characters ______

self = <run_length_encoding_test.RunLengthEncodingTest testMethod=test_encode_string_with_no_single_characters>

    def test_encode_string_with_no_single_characters(self):
>       self.assertMultiLineEqual(encode("AABBBCCCC"), "2A3B4C")

exercises/practice/run-length-encoding/run_length_encoding_test.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = 'AABBBCCCC'

    def encode(string):
        encoded_string = ""
        count = 1
        for i in range(1, len(string) + 1):
>           if string[i] == string[i - 1]:
E           IndexError: string index out of range

exercises/practice/run-length-encoding/run_length_encoding.py:19: IndexError
=========================== short test summary info ============================
FAILED exercises/practice/run-length-encoding/run_length_encoding_test.py::RunLengthEncodingTest::test_encode_empty_string
FAILED exercises/practice/run-length-encoding/run_length_encoding_test.py::RunLengthEncodingTest::test_encode_followed_by_decode_gives_original_string
FAILED exercises/practice/run-length-encoding/run_length_encoding_test.py::RunLengthEncodingTest::test_encode_lowercase_characters
FAILED exercises/practice/run-length-encoding/run_length_encoding_test.py::RunLengthEncodingTest::test_encode_multiple_whitespace_mixed_in_string
FAILED exercises/practice/run-length-encoding/run_length_encoding_test.py::RunLengthEncodingTest::test_encode_single_characters_mixed_with_repeated_characters
FAILED exercises/practice/run-length-encoding/run_length_encoding_test.py::RunLengthEncodingTest::test_encode_single_characters_only_are_encoded_without_count
FAILED exercises/practice/run-length-encoding/run_length_encoding_test.py::RunLengthEncodingTest::test_encode_string_with_no_single_characters
========================= 7 failed, 6 passed in 0.05s ==========================
