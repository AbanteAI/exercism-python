============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 16 items

exercises/practice/affine-cipher/affine_cipher_test.py FFFFFFFFFF.FF.F.  [100%]

=================================== FAILURES ===================================
___________________ AffineCipherTest.test_decode_a_sentence ____________________

self = <affine_cipher_test.AffineCipherTest testMethod=test_decode_a_sentence>

    def test_decode_a_sentence(self):
        self.assertEqual(
>           decode("qdwju nqcro muwhn odqun oppmd aunwd o", 19, 16),
            "anobstacleisoftenasteppingstone",
        )

exercises/practice/affine-cipher/affine_cipher_test.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ciphered_text = 'qdwju nqcro muwhn odqun oppmd aunwd o', a = 19, b = 16

    def decode(ciphered_text, a, b):
        a_inv = modular_multiplicative_inverse(a, 26)
    
        if a_inv is None:
            raise ValueError("a and m must be coprime")
    
        plain_text = ""
    
>       if char.isalpha():
E       NameError: name 'char' is not defined

exercises/practice/affine-cipher/affine_cipher.py:27: NameError
_________________ AffineCipherTest.test_decode_all_the_letters _________________

self = <affine_cipher_test.AffineCipherTest testMethod=test_decode_all_the_letters>

    def test_decode_all_the_letters(self):
        self.assertEqual(
>           decode("swxtj npvyk lruol iejdc blaxk swxmh qzglf", 17, 33),
            "thequickbrownfoxjumpsoverthelazydog",
        )

exercises/practice/affine-cipher/affine_cipher_test.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ciphered_text = 'swxtj npvyk lruol iejdc blaxk swxmh qzglf', a = 17, b = 33

    def decode(ciphered_text, a, b):
        a_inv = modular_multiplicative_inverse(a, 26)
    
        if a_inv is None:
            raise ValueError("a and m must be coprime")
    
        plain_text = ""
    
>       if char.isalpha():
E       NameError: name 'char' is not defined

exercises/practice/affine-cipher/affine_cipher.py:27: NameError
____________________ AffineCipherTest.test_decode_exercism _____________________

self = <affine_cipher_test.AffineCipherTest testMethod=test_decode_exercism>

    def test_decode_exercism(self):
>       self.assertEqual(decode("tytgn fjr", 3, 7), "exercism")

exercises/practice/affine-cipher/affine_cipher_test.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ciphered_text = 'tytgn fjr', a = 3, b = 7

    def decode(ciphered_text, a, b):
        a_inv = modular_multiplicative_inverse(a, 26)
    
        if a_inv is None:
            raise ValueError("a and m must be coprime")
    
        plain_text = ""
    
>       if char.isalpha():
E       NameError: name 'char' is not defined

exercises/practice/affine-cipher/affine_cipher.py:27: NameError
_____________________ AffineCipherTest.test_decode_numbers _____________________

self = <affine_cipher_test.AffineCipherTest testMethod=test_decode_numbers>

    def test_decode_numbers(self):
>       self.assertEqual(decode("odpoz ub123 odpoz ub", 25, 7), "testing123testing")

exercises/practice/affine-cipher/affine_cipher_test.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ciphered_text = 'odpoz ub123 odpoz ub', a = 25, b = 7

    def decode(ciphered_text, a, b):
        a_inv = modular_multiplicative_inverse(a, 26)
    
        if a_inv is None:
            raise ValueError("a and m must be coprime")
    
        plain_text = ""
    
>       if char.isalpha():
E       NameError: name 'char' is not defined

exercises/practice/affine-cipher/affine_cipher.py:27: NameError
_____________ AffineCipherTest.test_decode_with_a_not_coprime_to_m _____________

self = <affine_cipher_test.AffineCipherTest testMethod=test_decode_with_a_not_coprime_to_m>

    def test_decode_with_a_not_coprime_to_m(self):
        with self.assertRaises(ValueError) as err:
            decode("Test", 13, 5)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "a and m must be coprime.")
E       AssertionError: 'a and m must be coprime' != 'a and m must be coprime.'
E       - a and m must be coprime
E       + a and m must be coprime.
E       ?                        +

exercises/practice/affine-cipher/affine_cipher_test.py:82: AssertionError
_____________ AffineCipherTest.test_decode_with_no_spaces_in_input _____________

self = <affine_cipher_test.AffineCipherTest testMethod=test_decode_with_no_spaces_in_input>

    def test_decode_with_no_spaces_in_input(self):
        self.assertEqual(
>           decode("swxtjnpvyklruoliejdcblaxkswxmhqzglf", 17, 33),
            "thequickbrownfoxjumpsoverthelazydog",
        )

exercises/practice/affine-cipher/affine_cipher_test.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ciphered_text = 'swxtjnpvyklruoliejdcblaxkswxmhqzglf', a = 17, b = 33

    def decode(ciphered_text, a, b):
        a_inv = modular_multiplicative_inverse(a, 26)
    
        if a_inv is None:
            raise ValueError("a and m must be coprime")
    
        plain_text = ""
    
>       if char.isalpha():
E       NameError: name 'char' is not defined

exercises/practice/affine-cipher/affine_cipher.py:27: NameError
______________ AffineCipherTest.test_decode_with_too_many_spaces _______________

self = <affine_cipher_test.AffineCipherTest testMethod=test_decode_with_too_many_spaces>

    def test_decode_with_too_many_spaces(self):
        self.assertEqual(
>           decode("vszzm    cly   yd cg    qdp", 15, 16), "jollygreengiant"
        )

exercises/practice/affine-cipher/affine_cipher_test.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ciphered_text = 'vszzm    cly   yd cg    qdp', a = 15, b = 16

    def decode(ciphered_text, a, b):
        a_inv = modular_multiplicative_inverse(a, 26)
    
        if a_inv is None:
            raise ValueError("a and m must be coprime")
    
        plain_text = ""
    
>       if char.isalpha():
E       NameError: name 'char' is not defined

exercises/practice/affine-cipher/affine_cipher.py:27: NameError
_________________ AffineCipherTest.test_encode_all_the_letters _________________

self = <affine_cipher_test.AffineCipherTest testMethod=test_encode_all_the_letters>

    def test_encode_all_the_letters(self):
>       self.assertEqual(
            encode("The quick brown fox jumps over the lazy dog.", 17, 33),
            "swxtj npvyk lruol iejdc blaxk swxmh qzglf",
        )
E       AssertionError: 'swx tjnpv yklru oli ejdcb laxk swx mhqz glf.' != 'swxtj npvyk lruol iejdc blaxk swxmh qzglf'
E       - swx tjnpv yklru oli ejdcb laxk swx mhqz glf.
E       ?    -     -     -   -     -        -    -   -
E       + swxtj npvyk lruol iejdc blaxk swxmh qzglf
E       ?      +     +     +     +           +

exercises/practice/affine-cipher/affine_cipher_test.py:38: AssertionError
__________________ AffineCipherTest.test_encode_deep_thought ___________________

self = <affine_cipher_test.AffineCipherTest testMethod=test_encode_deep_thought>

    def test_encode_deep_thought(self):
>       self.assertEqual(encode("Truth is fiction.", 5, 17), "iynia fdqfb ifje")
E       AssertionError: 'iynia fd qfbifje.' != 'iynia fdqfb ifje'
E       - iynia fd qfbifje.
E       ?         -       -
E       + iynia fdqfb ifje
E       ?            +

exercises/practice/affine-cipher/affine_cipher_test.py:35: AssertionError
__________________ AffineCipherTest.test_encode_mindblowingly __________________

self = <affine_cipher_test.AffineCipherTest testMethod=test_encode_mindblowingly>

    def test_encode_mindblowingly(self):
>       self.assertEqual(encode("mindblowingly", 11, 15), "rzcwa gnxzc dgt")
E       AssertionError: 'rzcwagnxzcdgt' != 'rzcwa gnxzc dgt'
E       - rzcwagnxzcdgt
E       + rzcwa gnxzc dgt
E       ?      +     +

exercises/practice/affine-cipher/affine_cipher_test.py:27: AssertionError
_____________________ AffineCipherTest.test_encode_numbers _____________________

self = <affine_cipher_test.AffineCipherTest testMethod=test_encode_numbers>

    def test_encode_numbers(self):
>       self.assertEqual(
            encode("Testing,1 2 3, testing.", 3, 4), "jqgjc rw123 jqgjc rw"
        )
E       AssertionError: 'jqgjcrw,1 2 3, jqgjcrw.' != 'jqgjc rw123 jqgjc rw'
E       - jqgjcrw,1 2 3, jqgjcrw.
E       ?        - - - -        -
E       + jqgjc rw123 jqgjc rw
E       ?      +           +

exercises/practice/affine-cipher/affine_cipher_test.py:30: AssertionError
______________________ AffineCipherTest.test_encode_o_m_g ______________________

self = <affine_cipher_test.AffineCipherTest testMethod=test_encode_o_m_g>

    def test_encode_o_m_g(self):
>       self.assertEqual(encode("O M G", 25, 47), "hjp")
E       AssertionError: 'h j p' != 'hjp'
E       - h j p
E       ?  - -
E       + hjp

exercises/practice/affine-cipher/affine_cipher_test.py:24: AssertionError
_____________ AffineCipherTest.test_encode_with_a_not_coprime_to_m _____________

self = <affine_cipher_test.AffineCipherTest testMethod=test_encode_with_a_not_coprime_to_m>

    def test_encode_with_a_not_coprime_to_m(self):
        with self.assertRaises(ValueError) as err:
            encode("This is a test.", 6, 17)
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(err.exception.args[0], "a and m must be coprime.")
E       AssertionError: 'a and m must be coprime' != 'a and m must be coprime.'
E       - a and m must be coprime
E       + a and m must be coprime.
E       ?                        +

exercises/practice/affine-cipher/affine_cipher_test.py:47: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_decode_a_sentence
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_decode_all_the_letters
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_decode_exercism
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_decode_numbers
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_decode_with_a_not_coprime_to_m
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_decode_with_no_spaces_in_input
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_decode_with_too_many_spaces
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_encode_all_the_letters
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_encode_deep_thought
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_encode_mindblowingly
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_encode_numbers
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_encode_o_m_g
FAILED exercises/practice/affine-cipher/affine_cipher_test.py::AffineCipherTest::test_encode_with_a_not_coprime_to_m
========================= 13 failed, 3 passed in 0.07s =========================
