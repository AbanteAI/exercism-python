============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jake/Development/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, repeat-0.9.1
collected 48 items

exercises/practice/forth/forth_test.py .FFFFFFFF...FFF.FFFFFF.FFFFFF.F.F [ 68%]
FFFFFFF.FFFFFF.                                                          [100%]

=================================== FAILURES ===================================
_______ ForthTest.test_addition_errors_if_there_is_nothing_on_the_stack ________

self = <forth_test.ForthTest testMethod=test_addition_errors_if_there_is_nothing_on_the_stack>

    def test_addition_errors_if_there_is_nothing_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
            evaluate(["+"])
        self.assertEqual(type(err.exception), StackUnderflowError)
>       self.assertEqual(
            str(err.exception.args[0]), "Insufficient number of items in stack"
        )
E       AssertionError: 'Not enough items on the stack' != 'Insufficient number of items in stack'
E       - Not enough items on the stack
E       + Insufficient number of items in stack

exercises/practice/forth/forth_test.py:27: AssertionError
____ ForthTest.test_addition_errors_if_there_is_only_one_value_on_the_stack ____

self = <forth_test.ForthTest testMethod=test_addition_errors_if_there_is_only_one_value_on_the_stack>

    def test_addition_errors_if_there_is_only_one_value_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
            evaluate(["1 +"])
        self.assertEqual(type(err.exception), StackUnderflowError)
>       self.assertEqual(
            str(err.exception.args[0]), "Insufficient number of items in stack"
        )
E       AssertionError: 'Not enough items on the stack' != 'Insufficient number of items in stack'
E       - Not enough items on the stack
E       + Insufficient number of items in stack

exercises/practice/forth/forth_test.py:35: AssertionError
______ ForthTest.test_case_insensitivity_definitions_are_case_insensitive ______

self = <forth_test.ForthTest testMethod=test_case_insensitivity_definitions_are_case_insensitive>

    def test_case_insensitivity_definitions_are_case_insensitive(self):
>       self.assertEqual(evaluate([": SWAP DUP Dup dup ;", "1 swap"]), [1, 1, 1, 1])

exercises/practice/forth/forth_test.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
exercises/practice/forth/forth.py:25: in execute_word
    execute_word(w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'DUP'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: DUP

exercises/practice/forth/forth.py:40: ValueError
__________ ForthTest.test_case_insensitivity_drop_is_case_insensitive __________

self = <forth_test.ForthTest testMethod=test_case_insensitivity_drop_is_case_insensitive>

    def test_case_insensitivity_drop_is_case_insensitive(self):
>       self.assertEqual(evaluate(["1 2 3 4 DROP Drop drop"]), [1])

exercises/practice/forth/forth_test.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'DROP'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: DROP

exercises/practice/forth/forth.py:40: ValueError
__________ ForthTest.test_case_insensitivity_dup_is_case_insensitive ___________

self = <forth_test.ForthTest testMethod=test_case_insensitivity_dup_is_case_insensitive>

    def test_case_insensitivity_dup_is_case_insensitive(self):
>       self.assertEqual(evaluate(["1 DUP Dup dup"]), [1, 1, 1, 1])

exercises/practice/forth/forth_test.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'DUP'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: DUP

exercises/practice/forth/forth.py:40: ValueError
__________ ForthTest.test_case_insensitivity_over_is_case_insensitive __________

self = <forth_test.ForthTest testMethod=test_case_insensitivity_over_is_case_insensitive>

    def test_case_insensitivity_over_is_case_insensitive(self):
>       self.assertEqual(evaluate(["1 2 OVER Over over"]), [1, 2, 1, 2, 1])

exercises/practice/forth/forth_test.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'OVER'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: OVER

exercises/practice/forth/forth.py:40: ValueError
__________ ForthTest.test_case_insensitivity_swap_is_case_insensitive __________

self = <forth_test.ForthTest testMethod=test_case_insensitivity_swap_is_case_insensitive>

    def test_case_insensitivity_swap_is_case_insensitive(self):
>       self.assertEqual(evaluate(["1 2 SWAP 3 Swap 4 swap"]), [2, 3, 4, 1])

exercises/practice/forth/forth_test.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'SWAP'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: SWAP

exercises/practice/forth/forth.py:40: ValueError
__ ForthTest.test_case_insensitivity_user_defined_words_are_case_insensitive ___

self = <forth_test.ForthTest testMethod=test_case_insensitivity_user_defined_words_are_case_insensitive>

    def test_case_insensitivity_user_defined_words_are_case_insensitive(self):
>       self.assertEqual(evaluate([": foo dup ;", "1 FOO Foo foo"]), [1, 1, 1, 1])

exercises/practice/forth/forth_test.py:242: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
exercises/practice/forth/forth.py:25: in execute_word
    execute_word(w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'dup'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: dup

exercises/practice/forth/forth.py:40: ValueError
______________ ForthTest.test_division_errors_if_dividing_by_zero ______________

self = <forth_test.ForthTest testMethod=test_division_errors_if_dividing_by_zero>

    def test_division_errors_if_dividing_by_zero(self):
        # divide by zero
        with self.assertRaises(ZeroDivisionError) as err:
            evaluate(["4 0 /"])
        self.assertEqual(type(err.exception), ZeroDivisionError)
>       self.assertEqual(str(err.exception.args[0]), "divide by zero")
E       AssertionError: 'integer division or modulo by zero' != 'divide by zero'
E       - integer division or modulo by zero
E       + divide by zero

exercises/practice/forth/forth_test.py:88: AssertionError
_______ ForthTest.test_division_errors_if_there_is_nothing_on_the_stack ________

self = <forth_test.ForthTest testMethod=test_division_errors_if_there_is_nothing_on_the_stack>

    def test_division_errors_if_there_is_nothing_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
            evaluate(["/"])
        self.assertEqual(type(err.exception), StackUnderflowError)
>       self.assertEqual(
            str(err.exception.args[0]), "Insufficient number of items in stack"
        )
E       AssertionError: 'Not enough items on the stack' != 'Insufficient number of items in stack'
E       - Not enough items on the stack
E       + Insufficient number of items in stack

exercises/practice/forth/forth_test.py:94: AssertionError
____ ForthTest.test_division_errors_if_there_is_only_one_value_on_the_stack ____

self = <forth_test.ForthTest testMethod=test_division_errors_if_there_is_only_one_value_on_the_stack>

    def test_division_errors_if_there_is_only_one_value_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
            evaluate(["1 /"])
        self.assertEqual(type(err.exception), StackUnderflowError)
>       self.assertEqual(
            str(err.exception.args[0]), "Insufficient number of items in stack"
        )
E       AssertionError: 'Not enough items on the stack' != 'Insufficient number of items in stack'
E       - Not enough items on the stack
E       + Insufficient number of items in stack

exercises/practice/forth/forth_test.py:102: AssertionError
_________ ForthTest.test_drop_errors_if_there_is_nothing_on_the_stack __________

self = <forth_test.ForthTest testMethod=test_drop_errors_if_there_is_nothing_on_the_stack>

    def test_drop_errors_if_there_is_nothing_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
>           evaluate(["drop"])

exercises/practice/forth/forth_test.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: DROP

exercises/practice/forth/forth.py:40: ValueError
_ ForthTest.test_drop_removes_the_top_value_on_the_stack_if_it_is_not_the_only_one _

self = <forth_test.ForthTest testMethod=test_drop_removes_the_top_value_on_the_stack_if_it_is_not_the_only_one>

    def test_drop_removes_the_top_value_on_the_stack_if_it_is_not_the_only_one(self):
>       self.assertEqual(evaluate(["1 2 drop"]), [1])

exercises/practice/forth/forth_test.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'DROP'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: DROP

exercises/practice/forth/forth.py:40: ValueError
_ ForthTest.test_drop_removes_the_top_value_on_the_stack_if_it_is_the_only_one _

self = <forth_test.ForthTest testMethod=test_drop_removes_the_top_value_on_the_stack_if_it_is_the_only_one>

    def test_drop_removes_the_top_value_on_the_stack_if_it_is_the_only_one(self):
>       self.assertEqual(evaluate(["1 drop"]), [])

exercises/practice/forth/forth_test.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'DROP'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: DROP

exercises/practice/forth/forth.py:40: ValueError
________________ ForthTest.test_dup_copies_a_value_on_the_stack ________________

self = <forth_test.ForthTest testMethod=test_dup_copies_a_value_on_the_stack>

    def test_dup_copies_a_value_on_the_stack(self):
>       self.assertEqual(evaluate(["1 dup"]), [1, 1])

exercises/practice/forth/forth_test.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'DUP'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: DUP

exercises/practice/forth/forth.py:40: ValueError
_____________ ForthTest.test_dup_copies_the_top_value_on_the_stack _____________

self = <forth_test.ForthTest testMethod=test_dup_copies_the_top_value_on_the_stack>

    def test_dup_copies_the_top_value_on_the_stack(self):
>       self.assertEqual(evaluate(["1 2 dup"]), [1, 2, 2])

exercises/practice/forth/forth_test.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'DUP'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: DUP

exercises/practice/forth/forth.py:40: ValueError
__________ ForthTest.test_dup_errors_if_there_is_nothing_on_the_stack __________

self = <forth_test.ForthTest testMethod=test_dup_errors_if_there_is_nothing_on_the_stack>

    def test_dup_errors_if_there_is_nothing_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
>           evaluate(["dup"])

exercises/practice/forth/forth_test.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: DUP

exercises/practice/forth/forth.py:40: ValueError
____ ForthTest.test_multiplication_errors_if_there_is_nothing_on_the_stack _____

self = <forth_test.ForthTest testMethod=test_multiplication_errors_if_there_is_nothing_on_the_stack>

    def test_multiplication_errors_if_there_is_nothing_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
            evaluate(["*"])
        self.assertEqual(type(err.exception), StackUnderflowError)
>       self.assertEqual(
            str(err.exception.args[0]), "Insufficient number of items in stack"
        )
E       AssertionError: 'Not enough items on the stack' != 'Insufficient number of items in stack'
E       - Not enough items on the stack
E       + Insufficient number of items in stack

exercises/practice/forth/forth_test.py:65: AssertionError
_ ForthTest.test_multiplication_errors_if_there_is_only_one_value_on_the_stack _

self = <forth_test.ForthTest testMethod=test_multiplication_errors_if_there_is_only_one_value_on_the_stack>

    def test_multiplication_errors_if_there_is_only_one_value_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
            evaluate(["1 *"])
        self.assertEqual(type(err.exception), StackUnderflowError)
>       self.assertEqual(
            str(err.exception.args[0]), "Insufficient number of items in stack"
        )
E       AssertionError: 'Not enough items on the stack' != 'Insufficient number of items in stack'
E       - Not enough items on the stack
E       + Insufficient number of items in stack

exercises/practice/forth/forth_test.py:73: AssertionError
___ ForthTest.test_over_copies_the_second_element_if_there_are_more_than_two ___

self = <forth_test.ForthTest testMethod=test_over_copies_the_second_element_if_there_are_more_than_two>

    def test_over_copies_the_second_element_if_there_are_more_than_two(self):
>       self.assertEqual(evaluate(["1 2 3 over"]), [1, 2, 3, 2])

exercises/practice/forth/forth_test.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'OVER'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: OVER

exercises/practice/forth/forth.py:40: ValueError
_____ ForthTest.test_over_copies_the_second_element_if_there_are_only_two ______

self = <forth_test.ForthTest testMethod=test_over_copies_the_second_element_if_there_are_only_two>

    def test_over_copies_the_second_element_if_there_are_only_two(self):
>       self.assertEqual(evaluate(["1 2 over"]), [1, 2, 1])

exercises/practice/forth/forth_test.py:165: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'OVER'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: OVER

exercises/practice/forth/forth.py:40: ValueError
_________ ForthTest.test_over_errors_if_there_is_nothing_on_the_stack __________

self = <forth_test.ForthTest testMethod=test_over_errors_if_there_is_nothing_on_the_stack>

    def test_over_errors_if_there_is_nothing_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
>           evaluate(["over"])

exercises/practice/forth/forth_test.py:172: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: OVER

exercises/practice/forth/forth.py:40: ValueError
______ ForthTest.test_over_errors_if_there_is_only_one_value_on_the_stack ______

self = <forth_test.ForthTest testMethod=test_over_errors_if_there_is_only_one_value_on_the_stack>

    def test_over_errors_if_there_is_only_one_value_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
>           evaluate(["1 over"])

exercises/practice/forth/forth_test.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: OVER

exercises/practice/forth/forth.py:40: ValueError
__ ForthTest.test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack ___

self = <forth_test.ForthTest testMethod=test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack>

    def test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack(self):
>       self.assertEqual(evaluate(["-1 -2 -3 -4 -5"]), [-1, -2, -3, -4, -5])

exercises/practice/forth/forth_test.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = '-1'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: -1

exercises/practice/forth/forth.py:40: ValueError
______ ForthTest.test_subtraction_errors_if_there_is_nothing_on_the_stack ______

self = <forth_test.ForthTest testMethod=test_subtraction_errors_if_there_is_nothing_on_the_stack>

    def test_subtraction_errors_if_there_is_nothing_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
            evaluate(["-"])
        self.assertEqual(type(err.exception), StackUnderflowError)
>       self.assertEqual(
            str(err.exception.args[0]), "Insufficient number of items in stack"
        )
E       AssertionError: 'Not enough items on the stack' != 'Insufficient number of items in stack'
E       - Not enough items on the stack
E       + Insufficient number of items in stack

exercises/practice/forth/forth_test.py:46: AssertionError
__ ForthTest.test_subtraction_errors_if_there_is_only_one_value_on_the_stack ___

self = <forth_test.ForthTest testMethod=test_subtraction_errors_if_there_is_only_one_value_on_the_stack>

    def test_subtraction_errors_if_there_is_only_one_value_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
            evaluate(["1 -"])
        self.assertEqual(type(err.exception), StackUnderflowError)
>       self.assertEqual(
            str(err.exception.args[0]), "Insufficient number of items in stack"
        )
E       AssertionError: 'Not enough items on the stack' != 'Insufficient number of items in stack'
E       - Not enough items on the stack
E       + Insufficient number of items in stack

exercises/practice/forth/forth_test.py:54: AssertionError
_________ ForthTest.test_swap_errors_if_there_is_nothing_on_the_stack __________

self = <forth_test.ForthTest testMethod=test_swap_errors_if_there_is_nothing_on_the_stack>

    def test_swap_errors_if_there_is_nothing_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
>           evaluate(["swap"])

exercises/practice/forth/forth_test.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: SWAP

exercises/practice/forth/forth.py:40: ValueError
______ ForthTest.test_swap_errors_if_there_is_only_one_value_on_the_stack ______

self = <forth_test.ForthTest testMethod=test_swap_errors_if_there_is_only_one_value_on_the_stack>

    def test_swap_errors_if_there_is_only_one_value_on_the_stack(self):
        with self.assertRaises(StackUnderflowError) as err:
>           evaluate(["1 swap"])

exercises/practice/forth/forth_test.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: SWAP

exercises/practice/forth/forth.py:40: ValueError
_ ForthTest.test_swap_swaps_the_top_two_values_on_the_stack_if_they_are_not_the_only_ones _

self = <forth_test.ForthTest testMethod=test_swap_swaps_the_top_two_values_on_the_stack_if_they_are_not_the_only_ones>

    def test_swap_swaps_the_top_two_values_on_the_stack_if_they_are_not_the_only_ones(
        self,
    ):
>       self.assertEqual(evaluate(["1 2 3 swap"]), [1, 3, 2])

exercises/practice/forth/forth_test.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'SWAP'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: SWAP

exercises/practice/forth/forth.py:40: ValueError
_ ForthTest.test_swap_swaps_the_top_two_values_on_the_stack_if_they_are_the_only_ones _

self = <forth_test.ForthTest testMethod=test_swap_swaps_the_top_two_values_on_the_stack_if_they_are_the_only_ones>

    def test_swap_swaps_the_top_two_values_on_the_stack_if_they_are_the_only_ones(self):
>       self.assertEqual(evaluate(["1 2 swap"]), [2, 1])

exercises/practice/forth/forth_test.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'SWAP'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: SWAP

exercises/practice/forth/forth.py:40: ValueError
_______ ForthTest.test_user_defined_words_can_consist_of_built_in_words ________

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_consist_of_built_in_words>

    def test_user_defined_words_can_consist_of_built_in_words(self):
>       self.assertEqual(evaluate([": dup-twice dup dup ;", "1 dup-twice"]), [1, 1, 1])

exercises/practice/forth/forth_test.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
exercises/practice/forth/forth.py:25: in execute_word
    execute_word(w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'dup'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: dup

exercises/practice/forth/forth.py:40: ValueError
_ ForthTest.test_user_defined_words_can_define_word_that_uses_word_with_the_same_name _

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_define_word_that_uses_word_with_the_same_name>

    def test_user_defined_words_can_define_word_that_uses_word_with_the_same_name(self):
>       self.assertEqual(evaluate([": foo 10 ;", ": foo foo 1 + ;", "foo"]), [11])

exercises/practice/forth/forth_test.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
exercises/practice/forth/forth.py:25: in execute_word
    execute_word(w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'foo'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: foo

exercises/practice/forth/forth.py:40: ValueError
________ ForthTest.test_user_defined_words_can_override_built_in_words _________

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_override_built_in_words>

    def test_user_defined_words_can_override_built_in_words(self):
>       self.assertEqual(evaluate([": swap dup ;", "1 swap"]), [1, 1])

exercises/practice/forth/forth_test.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
exercises/practice/forth/forth.py:25: in execute_word
    execute_word(w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'dup'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: dup

exercises/practice/forth/forth.py:40: ValueError
___ ForthTest.test_user_defined_words_can_override_other_user_defined_words ____

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_override_other_user_defined_words>

    def test_user_defined_words_can_override_other_user_defined_words(self):
        self.assertEqual(
>           evaluate([": foo dup ;", ": foo dup dup ;", "1 foo"]), [1, 1, 1]
        )

exercises/practice/forth/forth_test.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
exercises/practice/forth/forth.py:25: in execute_word
    execute_word(w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'dup'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: dup

exercises/practice/forth/forth.py:40: ValueError
_ ForthTest.test_user_defined_words_can_use_different_words_with_the_same_name _

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_use_different_words_with_the_same_name>

    def test_user_defined_words_can_use_different_words_with_the_same_name(self):
        self.assertEqual(
>           evaluate([": foo 5 ;", ": bar foo ;", ": foo 6 ;", "bar foo"]), [5, 6]
        )

exercises/practice/forth/forth_test.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:60: in evaluate
    execute_word(word)
exercises/practice/forth/forth.py:25: in execute_word
    execute_word(w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = 'foo'

    def execute_word(word):
        if word in words:
            for w in words[word]:
                execute_word(w)
        elif word.isdigit():
            push(int(word))
        elif re.match(r"^[-+*/]$", word):
            b = pop()
            a = pop()
            if word == '+':
                push(a + b)
            elif word == '-':
                push(a - b)
            elif word == '*':
                push(a * b)
            elif word == '/':
                push(a // b)
        else:
>           raise ValueError(f"Unknown word: {word}")
E           ValueError: Unknown word: foo

exercises/practice/forth/forth.py:40: ValueError
______ ForthTest.test_user_defined_words_cannot_redefine_negative_numbers ______

self = <forth_test.ForthTest testMethod=test_user_defined_words_cannot_redefine_negative_numbers>

    def test_user_defined_words_cannot_redefine_negative_numbers(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/forth/forth_test.py:218: AssertionError
____ ForthTest.test_user_defined_words_cannot_redefine_non_negative_numbers ____

self = <forth_test.ForthTest testMethod=test_user_defined_words_cannot_redefine_non_negative_numbers>

    def test_user_defined_words_cannot_redefine_non_negative_numbers(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/forth/forth_test.py:212: AssertionError
__ ForthTest.test_user_defined_words_errors_if_executing_a_non_existent_word ___

self = <forth_test.ForthTest testMethod=test_user_defined_words_errors_if_executing_a_non_existent_word>

    def test_user_defined_words_errors_if_executing_a_non_existent_word(self):
        with self.assertRaises(ValueError) as err:
            evaluate(["foo"])
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(str(err.exception.args[0]), "undefined operation")
E       AssertionError: 'Unknown word: FOO' != 'undefined operation'
E       - Unknown word: FOO
E       + undefined operation

exercises/practice/forth/forth_test.py:227: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_addition_errors_if_there_is_nothing_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_addition_errors_if_there_is_only_one_value_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_case_insensitivity_definitions_are_case_insensitive
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_case_insensitivity_drop_is_case_insensitive
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_case_insensitivity_dup_is_case_insensitive
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_case_insensitivity_over_is_case_insensitive
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_case_insensitivity_swap_is_case_insensitive
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_case_insensitivity_user_defined_words_are_case_insensitive
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_division_errors_if_dividing_by_zero
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_division_errors_if_there_is_nothing_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_division_errors_if_there_is_only_one_value_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_drop_errors_if_there_is_nothing_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_drop_removes_the_top_value_on_the_stack_if_it_is_not_the_only_one
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_drop_removes_the_top_value_on_the_stack_if_it_is_the_only_one
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_dup_copies_a_value_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_dup_copies_the_top_value_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_dup_errors_if_there_is_nothing_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_multiplication_errors_if_there_is_nothing_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_multiplication_errors_if_there_is_only_one_value_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_over_copies_the_second_element_if_there_are_more_than_two
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_over_copies_the_second_element_if_there_are_only_two
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_over_errors_if_there_is_nothing_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_over_errors_if_there_is_only_one_value_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_subtraction_errors_if_there_is_nothing_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_subtraction_errors_if_there_is_only_one_value_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_swap_errors_if_there_is_nothing_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_swap_errors_if_there_is_only_one_value_on_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_swap_swaps_the_top_two_values_on_the_stack_if_they_are_not_the_only_ones
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_swap_swaps_the_top_two_values_on_the_stack_if_they_are_the_only_ones
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_consist_of_built_in_words
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_define_word_that_uses_word_with_the_same_name
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_override_built_in_words
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_override_other_user_defined_words
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_use_different_words_with_the_same_name
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_cannot_redefine_negative_numbers
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_cannot_redefine_non_negative_numbers
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_errors_if_executing_a_non_existent_word
======================== 38 failed, 10 passed in 0.36s =========================
