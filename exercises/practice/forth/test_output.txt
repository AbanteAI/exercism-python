============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 48 items

exercises/practice/forth/forth_test.py ...F....F.....................F.. [ 68%]
.....FFFFFFFF.F                                                          [100%]

=================================== FAILURES ===================================
______ ForthTest.test_case_insensitivity_definitions_are_case_insensitive ______

self = <forth_test.ForthTest testMethod=test_case_insensitivity_definitions_are_case_insensitive>

    def test_case_insensitivity_definitions_are_case_insensitive(self):
>       self.assertEqual(evaluate([": SWAP DUP Dup dup ;", "1 swap"]), [1, 1, 1, 1])

exercises/practice/forth/forth_test.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_data = [': SWAP DUP Dup dup ;', '1 swap']

    def evaluate(input_data):
        # Helper functions
        def perform_arithmetic_operation(operation, stack):
            if len(stack) < 2:
                raise StackUnderflowError()
            b, a = stack.pop(), stack.pop()
            if operation == '+':
                stack.append(a + b)
            elif operation == '-':
                stack.append(a - b)
            elif operation == '*':
                stack.append(a * b)
            elif operation == '/':
                if b == 0:
                    raise ZeroDivisionError("divide by zero")
                stack.append(a // b)
    
        def perform_stack_manipulation(operation, stack):
            if operation == 'DUP':
                if not stack:
                    raise StackUnderflowError()
                stack.append(stack[-1])
            elif operation == 'DROP':
                if not stack:
                    raise StackUnderflowError()
                stack.pop()
            elif operation == 'SWAP':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack[-1], stack[-2] = stack[-2], stack[-1]
            elif operation == 'OVER':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack.append(stack[-2])
    
        def define_new_word(definition, word_definitions):
            if definition[0] != ':' or definition[-1] != ';':
                raise ValueError("Invalid word definition syntax")
            parts = definition[1:-1].split()
            name = parts[0].upper()
            if name.isdigit():
                raise ValueError("Word name cannot be a number")
            body = parts[1:]
            word_definitions[name] = body
    
        # Main evaluation function
        stack = []
        word_definitions = {}
        for line in input_data:
            words = line.split()
            for word in words:
                word = word.upper()
                if word.isdigit():
                    stack.append(int(word))
                elif word in word_definitions:
                    evaluate(word_definitions[word])
                elif word in ['+', '-', '*', '/']:
                    perform_arithmetic_operation(word, stack)
                elif word in ['DUP', 'DROP', 'SWAP', 'OVER']:
                    perform_stack_manipulation(word, stack)
                elif word.startswith(':') and word.endswith(';'):
                    define_new_word(words, word_definitions)
                    break  # Exit the loop after defining a new word
                else:
>                   raise ValueError("undefined operation")
E                   ValueError: undefined operation

exercises/practice/forth/forth.py:74: ValueError
__ ForthTest.test_case_insensitivity_user_defined_words_are_case_insensitive ___

self = <forth_test.ForthTest testMethod=test_case_insensitivity_user_defined_words_are_case_insensitive>

    def test_case_insensitivity_user_defined_words_are_case_insensitive(self):
>       self.assertEqual(evaluate([": foo dup ;", "1 FOO Foo foo"]), [1, 1, 1, 1])

exercises/practice/forth/forth_test.py:242: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_data = [': foo dup ;', '1 FOO Foo foo']

    def evaluate(input_data):
        # Helper functions
        def perform_arithmetic_operation(operation, stack):
            if len(stack) < 2:
                raise StackUnderflowError()
            b, a = stack.pop(), stack.pop()
            if operation == '+':
                stack.append(a + b)
            elif operation == '-':
                stack.append(a - b)
            elif operation == '*':
                stack.append(a * b)
            elif operation == '/':
                if b == 0:
                    raise ZeroDivisionError("divide by zero")
                stack.append(a // b)
    
        def perform_stack_manipulation(operation, stack):
            if operation == 'DUP':
                if not stack:
                    raise StackUnderflowError()
                stack.append(stack[-1])
            elif operation == 'DROP':
                if not stack:
                    raise StackUnderflowError()
                stack.pop()
            elif operation == 'SWAP':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack[-1], stack[-2] = stack[-2], stack[-1]
            elif operation == 'OVER':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack.append(stack[-2])
    
        def define_new_word(definition, word_definitions):
            if definition[0] != ':' or definition[-1] != ';':
                raise ValueError("Invalid word definition syntax")
            parts = definition[1:-1].split()
            name = parts[0].upper()
            if name.isdigit():
                raise ValueError("Word name cannot be a number")
            body = parts[1:]
            word_definitions[name] = body
    
        # Main evaluation function
        stack = []
        word_definitions = {}
        for line in input_data:
            words = line.split()
            for word in words:
                word = word.upper()
                if word.isdigit():
                    stack.append(int(word))
                elif word in word_definitions:
                    evaluate(word_definitions[word])
                elif word in ['+', '-', '*', '/']:
                    perform_arithmetic_operation(word, stack)
                elif word in ['DUP', 'DROP', 'SWAP', 'OVER']:
                    perform_stack_manipulation(word, stack)
                elif word.startswith(':') and word.endswith(';'):
                    define_new_word(words, word_definitions)
                    break  # Exit the loop after defining a new word
                else:
>                   raise ValueError("undefined operation")
E                   ValueError: undefined operation

exercises/practice/forth/forth.py:74: ValueError
__ ForthTest.test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack ___

self = <forth_test.ForthTest testMethod=test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack>

    def test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack(self):
>       self.assertEqual(evaluate(["-1 -2 -3 -4 -5"]), [-1, -2, -3, -4, -5])

exercises/practice/forth/forth_test.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_data = ['-1 -2 -3 -4 -5']

    def evaluate(input_data):
        # Helper functions
        def perform_arithmetic_operation(operation, stack):
            if len(stack) < 2:
                raise StackUnderflowError()
            b, a = stack.pop(), stack.pop()
            if operation == '+':
                stack.append(a + b)
            elif operation == '-':
                stack.append(a - b)
            elif operation == '*':
                stack.append(a * b)
            elif operation == '/':
                if b == 0:
                    raise ZeroDivisionError("divide by zero")
                stack.append(a // b)
    
        def perform_stack_manipulation(operation, stack):
            if operation == 'DUP':
                if not stack:
                    raise StackUnderflowError()
                stack.append(stack[-1])
            elif operation == 'DROP':
                if not stack:
                    raise StackUnderflowError()
                stack.pop()
            elif operation == 'SWAP':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack[-1], stack[-2] = stack[-2], stack[-1]
            elif operation == 'OVER':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack.append(stack[-2])
    
        def define_new_word(definition, word_definitions):
            if definition[0] != ':' or definition[-1] != ';':
                raise ValueError("Invalid word definition syntax")
            parts = definition[1:-1].split()
            name = parts[0].upper()
            if name.isdigit():
                raise ValueError("Word name cannot be a number")
            body = parts[1:]
            word_definitions[name] = body
    
        # Main evaluation function
        stack = []
        word_definitions = {}
        for line in input_data:
            words = line.split()
            for word in words:
                word = word.upper()
                if word.isdigit():
                    stack.append(int(word))
                elif word in word_definitions:
                    evaluate(word_definitions[word])
                elif word in ['+', '-', '*', '/']:
                    perform_arithmetic_operation(word, stack)
                elif word in ['DUP', 'DROP', 'SWAP', 'OVER']:
                    perform_stack_manipulation(word, stack)
                elif word.startswith(':') and word.endswith(';'):
                    define_new_word(words, word_definitions)
                    break  # Exit the loop after defining a new word
                else:
>                   raise ValueError("undefined operation")
E                   ValueError: undefined operation

exercises/practice/forth/forth.py:74: ValueError
_______ ForthTest.test_user_defined_words_can_consist_of_built_in_words ________

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_consist_of_built_in_words>

    def test_user_defined_words_can_consist_of_built_in_words(self):
>       self.assertEqual(evaluate([": dup-twice dup dup ;", "1 dup-twice"]), [1, 1, 1])

exercises/practice/forth/forth_test.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_data = [': dup-twice dup dup ;', '1 dup-twice']

    def evaluate(input_data):
        # Helper functions
        def perform_arithmetic_operation(operation, stack):
            if len(stack) < 2:
                raise StackUnderflowError()
            b, a = stack.pop(), stack.pop()
            if operation == '+':
                stack.append(a + b)
            elif operation == '-':
                stack.append(a - b)
            elif operation == '*':
                stack.append(a * b)
            elif operation == '/':
                if b == 0:
                    raise ZeroDivisionError("divide by zero")
                stack.append(a // b)
    
        def perform_stack_manipulation(operation, stack):
            if operation == 'DUP':
                if not stack:
                    raise StackUnderflowError()
                stack.append(stack[-1])
            elif operation == 'DROP':
                if not stack:
                    raise StackUnderflowError()
                stack.pop()
            elif operation == 'SWAP':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack[-1], stack[-2] = stack[-2], stack[-1]
            elif operation == 'OVER':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack.append(stack[-2])
    
        def define_new_word(definition, word_definitions):
            if definition[0] != ':' or definition[-1] != ';':
                raise ValueError("Invalid word definition syntax")
            parts = definition[1:-1].split()
            name = parts[0].upper()
            if name.isdigit():
                raise ValueError("Word name cannot be a number")
            body = parts[1:]
            word_definitions[name] = body
    
        # Main evaluation function
        stack = []
        word_definitions = {}
        for line in input_data:
            words = line.split()
            for word in words:
                word = word.upper()
                if word.isdigit():
                    stack.append(int(word))
                elif word in word_definitions:
                    evaluate(word_definitions[word])
                elif word in ['+', '-', '*', '/']:
                    perform_arithmetic_operation(word, stack)
                elif word in ['DUP', 'DROP', 'SWAP', 'OVER']:
                    perform_stack_manipulation(word, stack)
                elif word.startswith(':') and word.endswith(';'):
                    define_new_word(words, word_definitions)
                    break  # Exit the loop after defining a new word
                else:
>                   raise ValueError("undefined operation")
E                   ValueError: undefined operation

exercises/practice/forth/forth.py:74: ValueError
_ ForthTest.test_user_defined_words_can_define_word_that_uses_word_with_the_same_name _

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_define_word_that_uses_word_with_the_same_name>

    def test_user_defined_words_can_define_word_that_uses_word_with_the_same_name(self):
>       self.assertEqual(evaluate([": foo 10 ;", ": foo foo 1 + ;", "foo"]), [11])

exercises/practice/forth/forth_test.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_data = [': foo 10 ;', ': foo foo 1 + ;', 'foo']

    def evaluate(input_data):
        # Helper functions
        def perform_arithmetic_operation(operation, stack):
            if len(stack) < 2:
                raise StackUnderflowError()
            b, a = stack.pop(), stack.pop()
            if operation == '+':
                stack.append(a + b)
            elif operation == '-':
                stack.append(a - b)
            elif operation == '*':
                stack.append(a * b)
            elif operation == '/':
                if b == 0:
                    raise ZeroDivisionError("divide by zero")
                stack.append(a // b)
    
        def perform_stack_manipulation(operation, stack):
            if operation == 'DUP':
                if not stack:
                    raise StackUnderflowError()
                stack.append(stack[-1])
            elif operation == 'DROP':
                if not stack:
                    raise StackUnderflowError()
                stack.pop()
            elif operation == 'SWAP':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack[-1], stack[-2] = stack[-2], stack[-1]
            elif operation == 'OVER':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack.append(stack[-2])
    
        def define_new_word(definition, word_definitions):
            if definition[0] != ':' or definition[-1] != ';':
                raise ValueError("Invalid word definition syntax")
            parts = definition[1:-1].split()
            name = parts[0].upper()
            if name.isdigit():
                raise ValueError("Word name cannot be a number")
            body = parts[1:]
            word_definitions[name] = body
    
        # Main evaluation function
        stack = []
        word_definitions = {}
        for line in input_data:
            words = line.split()
            for word in words:
                word = word.upper()
                if word.isdigit():
                    stack.append(int(word))
                elif word in word_definitions:
                    evaluate(word_definitions[word])
                elif word in ['+', '-', '*', '/']:
                    perform_arithmetic_operation(word, stack)
                elif word in ['DUP', 'DROP', 'SWAP', 'OVER']:
                    perform_stack_manipulation(word, stack)
                elif word.startswith(':') and word.endswith(';'):
                    define_new_word(words, word_definitions)
                    break  # Exit the loop after defining a new word
                else:
>                   raise ValueError("undefined operation")
E                   ValueError: undefined operation

exercises/practice/forth/forth.py:74: ValueError
______ ForthTest.test_user_defined_words_can_override_built_in_operators _______

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_override_built_in_operators>

    def test_user_defined_words_can_override_built_in_operators(self):
>       self.assertEqual(evaluate([": + * ;", "3 4 +"]), [12])

exercises/practice/forth/forth_test.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_data = [': + * ;', '3 4 +']

    def evaluate(input_data):
        # Helper functions
        def perform_arithmetic_operation(operation, stack):
            if len(stack) < 2:
                raise StackUnderflowError()
            b, a = stack.pop(), stack.pop()
            if operation == '+':
                stack.append(a + b)
            elif operation == '-':
                stack.append(a - b)
            elif operation == '*':
                stack.append(a * b)
            elif operation == '/':
                if b == 0:
                    raise ZeroDivisionError("divide by zero")
                stack.append(a // b)
    
        def perform_stack_manipulation(operation, stack):
            if operation == 'DUP':
                if not stack:
                    raise StackUnderflowError()
                stack.append(stack[-1])
            elif operation == 'DROP':
                if not stack:
                    raise StackUnderflowError()
                stack.pop()
            elif operation == 'SWAP':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack[-1], stack[-2] = stack[-2], stack[-1]
            elif operation == 'OVER':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack.append(stack[-2])
    
        def define_new_word(definition, word_definitions):
            if definition[0] != ':' or definition[-1] != ';':
                raise ValueError("Invalid word definition syntax")
            parts = definition[1:-1].split()
            name = parts[0].upper()
            if name.isdigit():
                raise ValueError("Word name cannot be a number")
            body = parts[1:]
            word_definitions[name] = body
    
        # Main evaluation function
        stack = []
        word_definitions = {}
        for line in input_data:
            words = line.split()
            for word in words:
                word = word.upper()
                if word.isdigit():
                    stack.append(int(word))
                elif word in word_definitions:
                    evaluate(word_definitions[word])
                elif word in ['+', '-', '*', '/']:
                    perform_arithmetic_operation(word, stack)
                elif word in ['DUP', 'DROP', 'SWAP', 'OVER']:
                    perform_stack_manipulation(word, stack)
                elif word.startswith(':') and word.endswith(';'):
                    define_new_word(words, word_definitions)
                    break  # Exit the loop after defining a new word
                else:
>                   raise ValueError("undefined operation")
E                   ValueError: undefined operation

exercises/practice/forth/forth.py:74: ValueError
________ ForthTest.test_user_defined_words_can_override_built_in_words _________

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_override_built_in_words>

    def test_user_defined_words_can_override_built_in_words(self):
>       self.assertEqual(evaluate([": swap dup ;", "1 swap"]), [1, 1])

exercises/practice/forth/forth_test.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_data = [': swap dup ;', '1 swap']

    def evaluate(input_data):
        # Helper functions
        def perform_arithmetic_operation(operation, stack):
            if len(stack) < 2:
                raise StackUnderflowError()
            b, a = stack.pop(), stack.pop()
            if operation == '+':
                stack.append(a + b)
            elif operation == '-':
                stack.append(a - b)
            elif operation == '*':
                stack.append(a * b)
            elif operation == '/':
                if b == 0:
                    raise ZeroDivisionError("divide by zero")
                stack.append(a // b)
    
        def perform_stack_manipulation(operation, stack):
            if operation == 'DUP':
                if not stack:
                    raise StackUnderflowError()
                stack.append(stack[-1])
            elif operation == 'DROP':
                if not stack:
                    raise StackUnderflowError()
                stack.pop()
            elif operation == 'SWAP':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack[-1], stack[-2] = stack[-2], stack[-1]
            elif operation == 'OVER':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack.append(stack[-2])
    
        def define_new_word(definition, word_definitions):
            if definition[0] != ':' or definition[-1] != ';':
                raise ValueError("Invalid word definition syntax")
            parts = definition[1:-1].split()
            name = parts[0].upper()
            if name.isdigit():
                raise ValueError("Word name cannot be a number")
            body = parts[1:]
            word_definitions[name] = body
    
        # Main evaluation function
        stack = []
        word_definitions = {}
        for line in input_data:
            words = line.split()
            for word in words:
                word = word.upper()
                if word.isdigit():
                    stack.append(int(word))
                elif word in word_definitions:
                    evaluate(word_definitions[word])
                elif word in ['+', '-', '*', '/']:
                    perform_arithmetic_operation(word, stack)
                elif word in ['DUP', 'DROP', 'SWAP', 'OVER']:
                    perform_stack_manipulation(word, stack)
                elif word.startswith(':') and word.endswith(';'):
                    define_new_word(words, word_definitions)
                    break  # Exit the loop after defining a new word
                else:
>                   raise ValueError("undefined operation")
E                   ValueError: undefined operation

exercises/practice/forth/forth.py:74: ValueError
___ ForthTest.test_user_defined_words_can_override_other_user_defined_words ____

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_override_other_user_defined_words>

    def test_user_defined_words_can_override_other_user_defined_words(self):
        self.assertEqual(
>           evaluate([": foo dup ;", ": foo dup dup ;", "1 foo"]), [1, 1, 1]
        )

exercises/practice/forth/forth_test.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_data = [': foo dup ;', ': foo dup dup ;', '1 foo']

    def evaluate(input_data):
        # Helper functions
        def perform_arithmetic_operation(operation, stack):
            if len(stack) < 2:
                raise StackUnderflowError()
            b, a = stack.pop(), stack.pop()
            if operation == '+':
                stack.append(a + b)
            elif operation == '-':
                stack.append(a - b)
            elif operation == '*':
                stack.append(a * b)
            elif operation == '/':
                if b == 0:
                    raise ZeroDivisionError("divide by zero")
                stack.append(a // b)
    
        def perform_stack_manipulation(operation, stack):
            if operation == 'DUP':
                if not stack:
                    raise StackUnderflowError()
                stack.append(stack[-1])
            elif operation == 'DROP':
                if not stack:
                    raise StackUnderflowError()
                stack.pop()
            elif operation == 'SWAP':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack[-1], stack[-2] = stack[-2], stack[-1]
            elif operation == 'OVER':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack.append(stack[-2])
    
        def define_new_word(definition, word_definitions):
            if definition[0] != ':' or definition[-1] != ';':
                raise ValueError("Invalid word definition syntax")
            parts = definition[1:-1].split()
            name = parts[0].upper()
            if name.isdigit():
                raise ValueError("Word name cannot be a number")
            body = parts[1:]
            word_definitions[name] = body
    
        # Main evaluation function
        stack = []
        word_definitions = {}
        for line in input_data:
            words = line.split()
            for word in words:
                word = word.upper()
                if word.isdigit():
                    stack.append(int(word))
                elif word in word_definitions:
                    evaluate(word_definitions[word])
                elif word in ['+', '-', '*', '/']:
                    perform_arithmetic_operation(word, stack)
                elif word in ['DUP', 'DROP', 'SWAP', 'OVER']:
                    perform_stack_manipulation(word, stack)
                elif word.startswith(':') and word.endswith(';'):
                    define_new_word(words, word_definitions)
                    break  # Exit the loop after defining a new word
                else:
>                   raise ValueError("undefined operation")
E                   ValueError: undefined operation

exercises/practice/forth/forth.py:74: ValueError
_ ForthTest.test_user_defined_words_can_use_different_words_with_the_same_name _

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_use_different_words_with_the_same_name>

    def test_user_defined_words_can_use_different_words_with_the_same_name(self):
        self.assertEqual(
>           evaluate([": foo 5 ;", ": bar foo ;", ": foo 6 ;", "bar foo"]), [5, 6]
        )

exercises/practice/forth/forth_test.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_data = [': foo 5 ;', ': bar foo ;', ': foo 6 ;', 'bar foo']

    def evaluate(input_data):
        # Helper functions
        def perform_arithmetic_operation(operation, stack):
            if len(stack) < 2:
                raise StackUnderflowError()
            b, a = stack.pop(), stack.pop()
            if operation == '+':
                stack.append(a + b)
            elif operation == '-':
                stack.append(a - b)
            elif operation == '*':
                stack.append(a * b)
            elif operation == '/':
                if b == 0:
                    raise ZeroDivisionError("divide by zero")
                stack.append(a // b)
    
        def perform_stack_manipulation(operation, stack):
            if operation == 'DUP':
                if not stack:
                    raise StackUnderflowError()
                stack.append(stack[-1])
            elif operation == 'DROP':
                if not stack:
                    raise StackUnderflowError()
                stack.pop()
            elif operation == 'SWAP':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack[-1], stack[-2] = stack[-2], stack[-1]
            elif operation == 'OVER':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack.append(stack[-2])
    
        def define_new_word(definition, word_definitions):
            if definition[0] != ':' or definition[-1] != ';':
                raise ValueError("Invalid word definition syntax")
            parts = definition[1:-1].split()
            name = parts[0].upper()
            if name.isdigit():
                raise ValueError("Word name cannot be a number")
            body = parts[1:]
            word_definitions[name] = body
    
        # Main evaluation function
        stack = []
        word_definitions = {}
        for line in input_data:
            words = line.split()
            for word in words:
                word = word.upper()
                if word.isdigit():
                    stack.append(int(word))
                elif word in word_definitions:
                    evaluate(word_definitions[word])
                elif word in ['+', '-', '*', '/']:
                    perform_arithmetic_operation(word, stack)
                elif word in ['DUP', 'DROP', 'SWAP', 'OVER']:
                    perform_stack_manipulation(word, stack)
                elif word.startswith(':') and word.endswith(';'):
                    define_new_word(words, word_definitions)
                    break  # Exit the loop after defining a new word
                else:
>                   raise ValueError("undefined operation")
E                   ValueError: undefined operation

exercises/practice/forth/forth.py:74: ValueError
______ ForthTest.test_user_defined_words_cannot_redefine_negative_numbers ______

self = <forth_test.ForthTest testMethod=test_user_defined_words_cannot_redefine_negative_numbers>

    def test_user_defined_words_cannot_redefine_negative_numbers(self):
        with self.assertRaises(ValueError) as err:
            evaluate([": -1 2 ;"])
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(str(err.exception.args[0]), "illegal operation")
E       AssertionError: 'undefined operation' != 'illegal operation'
E       - undefined operation
E       + illegal operation

exercises/practice/forth/forth_test.py:221: AssertionError
____ ForthTest.test_user_defined_words_cannot_redefine_non_negative_numbers ____

self = <forth_test.ForthTest testMethod=test_user_defined_words_cannot_redefine_non_negative_numbers>

    def test_user_defined_words_cannot_redefine_non_negative_numbers(self):
        with self.assertRaises(ValueError) as err:
            evaluate([": 1 2 ;"])
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(str(err.exception.args[0]), "illegal operation")
E       AssertionError: 'undefined operation' != 'illegal operation'
E       - undefined operation
E       + illegal operation

exercises/practice/forth/forth_test.py:215: AssertionError
_________ ForthTest.test_user_defined_words_execute_in_the_right_order _________

self = <forth_test.ForthTest testMethod=test_user_defined_words_execute_in_the_right_order>

    def test_user_defined_words_execute_in_the_right_order(self):
>       self.assertEqual(evaluate([": countup 1 2 3 ;", "countup"]), [1, 2, 3])

exercises/practice/forth/forth_test.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_data = [': countup 1 2 3 ;', 'countup']

    def evaluate(input_data):
        # Helper functions
        def perform_arithmetic_operation(operation, stack):
            if len(stack) < 2:
                raise StackUnderflowError()
            b, a = stack.pop(), stack.pop()
            if operation == '+':
                stack.append(a + b)
            elif operation == '-':
                stack.append(a - b)
            elif operation == '*':
                stack.append(a * b)
            elif operation == '/':
                if b == 0:
                    raise ZeroDivisionError("divide by zero")
                stack.append(a // b)
    
        def perform_stack_manipulation(operation, stack):
            if operation == 'DUP':
                if not stack:
                    raise StackUnderflowError()
                stack.append(stack[-1])
            elif operation == 'DROP':
                if not stack:
                    raise StackUnderflowError()
                stack.pop()
            elif operation == 'SWAP':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack[-1], stack[-2] = stack[-2], stack[-1]
            elif operation == 'OVER':
                if len(stack) < 2:
                    raise StackUnderflowError()
                stack.append(stack[-2])
    
        def define_new_word(definition, word_definitions):
            if definition[0] != ':' or definition[-1] != ';':
                raise ValueError("Invalid word definition syntax")
            parts = definition[1:-1].split()
            name = parts[0].upper()
            if name.isdigit():
                raise ValueError("Word name cannot be a number")
            body = parts[1:]
            word_definitions[name] = body
    
        # Main evaluation function
        stack = []
        word_definitions = {}
        for line in input_data:
            words = line.split()
            for word in words:
                word = word.upper()
                if word.isdigit():
                    stack.append(int(word))
                elif word in word_definitions:
                    evaluate(word_definitions[word])
                elif word in ['+', '-', '*', '/']:
                    perform_arithmetic_operation(word, stack)
                elif word in ['DUP', 'DROP', 'SWAP', 'OVER']:
                    perform_stack_manipulation(word, stack)
                elif word.startswith(':') and word.endswith(';'):
                    define_new_word(words, word_definitions)
                    break  # Exit the loop after defining a new word
                else:
>                   raise ValueError("undefined operation")
E                   ValueError: undefined operation

exercises/practice/forth/forth.py:74: ValueError
=========================== short test summary info ============================
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_case_insensitivity_definitions_are_case_insensitive
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_case_insensitivity_user_defined_words_are_case_insensitive
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_consist_of_built_in_words
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_define_word_that_uses_word_with_the_same_name
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_override_built_in_operators
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_override_built_in_words
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_override_other_user_defined_words
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_use_different_words_with_the_same_name
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_cannot_redefine_negative_numbers
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_cannot_redefine_non_negative_numbers
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_execute_in_the_right_order
======================== 12 failed, 36 passed in 0.23s =========================
