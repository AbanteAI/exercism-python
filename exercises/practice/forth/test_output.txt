============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 48 items

exercises/practice/forth/forth_test.py ................................. [ 68%]
......F...FFFF.                                                          [100%]

=================================== FAILURES ===================================
_ ForthTest.test_user_defined_words_can_define_word_that_uses_word_with_the_same_name _

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_define_word_that_uses_word_with_the_same_name>

    def test_user_defined_words_can_define_word_that_uses_word_with_the_same_name(self):
>       self.assertEqual(evaluate([": foo 10 ;", ": foo foo 1 + ;", "foo"]), [11])

exercises/practice/forth/forth_test.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:55: in evaluate
    apply_operation(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = '+'

    def apply_operation(op):
        if len(stack) < 2:
>           raise StackUnderflowError("Insufficient number of items in stack")
E           forth.StackUnderflowError: Insufficient number of items in stack

exercises/practice/forth/forth.py:21: StackUnderflowError
_ ForthTest.test_user_defined_words_can_use_different_words_with_the_same_name _

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_use_different_words_with_the_same_name>

    def test_user_defined_words_can_use_different_words_with_the_same_name(self):
>       self.assertEqual(
            evaluate([": foo 5 ;", ": bar foo ;", ": foo 6 ;", "bar foo"]), [5, 6]
        )
E       AssertionError: Lists differ: [6, 6] != [5, 6]
E       
E       First differing element 0:
E       6
E       5
E       
E       - [6, 6]
E       ?  ^
E       
E       + [5, 6]
E       ?  ^

exercises/practice/forth/forth_test.py:204: AssertionError
______ ForthTest.test_user_defined_words_cannot_redefine_negative_numbers ______

self = <forth_test.ForthTest testMethod=test_user_defined_words_cannot_redefine_negative_numbers>

    def test_user_defined_words_cannot_redefine_negative_numbers(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/forth/forth_test.py:218: AssertionError
____ ForthTest.test_user_defined_words_cannot_redefine_non_negative_numbers ____

self = <forth_test.ForthTest testMethod=test_user_defined_words_cannot_redefine_non_negative_numbers>

    def test_user_defined_words_cannot_redefine_non_negative_numbers(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/forth/forth_test.py:212: AssertionError
__ ForthTest.test_user_defined_words_errors_if_executing_a_non_existent_word ___

self = <forth_test.ForthTest testMethod=test_user_defined_words_errors_if_executing_a_non_existent_word>

    def test_user_defined_words_errors_if_executing_a_non_existent_word(self):
        with self.assertRaises(ValueError) as err:
            evaluate(["foo"])
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(str(err.exception.args[0]), "undefined operation")
E       AssertionError: 'undefined operation foo' != 'undefined operation'
E       - undefined operation foo
E       ?                    ----
E       + undefined operation

exercises/practice/forth/forth_test.py:227: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_define_word_that_uses_word_with_the_same_name
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_use_different_words_with_the_same_name
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_cannot_redefine_negative_numbers
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_cannot_redefine_non_negative_numbers
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_errors_if_executing_a_non_existent_word
========================= 5 failed, 43 passed in 0.10s =========================
