============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.0, pluggy-1.3.0
rootdir: /home/jake/Development/mentat/tests/benchmarks/repos/exercism-python
configfile: pytest.ini
plugins: mock-3.11.1, reportlog-0.4.0, asyncio-0.21.1, xdist-3.3.1
asyncio: mode=strict
collected 48 items

exercises/practice/forth/forth_test.py ...F..........................F.. [ 68%]
......FFF.FFFF.                                                          [100%]

=================================== FAILURES ===================================
______ ForthTest.test_case_insensitivity_definitions_are_case_insensitive ______

self = <forth_test.ForthTest testMethod=test_case_insensitivity_definitions_are_case_insensitive>

    def test_case_insensitivity_definitions_are_case_insensitive(self):
>       self.assertEqual(evaluate([": SWAP DUP Dup dup ;", "1 swap"]), [1, 1, 1, 1])

exercises/practice/forth/forth_test.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:84: in evaluate
    execute_word(word)
exercises/practice/forth/forth.py:49: in execute_word
    require_stack_size(2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

size = 2

    def require_stack_size(size):
        if len(stack) < size:
>           raise StackUnderflowError()
E           forth.StackUnderflowError: Insufficient number of items in stack

exercises/practice/forth/forth.py:18: StackUnderflowError
__ ForthTest.test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack ___

self = <forth_test.ForthTest testMethod=test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack>

    def test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack(self):
>       self.assertEqual(evaluate(["-1 -2 -3 -4 -5"]), [-1, -2, -3, -4, -5])

exercises/practice/forth/forth_test.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:84: in evaluate
    execute_word(word)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

word = '-1'

    def execute_word(word):
        if word.isdigit():
            stack.append(int(word))
        elif word == '+':
            require_stack_size(2)
            b, a = stack.pop(), stack.pop()
            stack.append(a + b)
        elif word == '-':
            require_stack_size(2)
            b, a = stack.pop(), stack.pop()
            stack.append(a - b)
        elif word == '*':
            require_stack_size(2)
            b, a = stack.pop(), stack.pop()
            stack.append(a * b)
        elif word == '/':
            require_stack_size(2)
            b, a = stack.pop(), stack.pop()
            if b == 0:
                raise ZeroDivisionError("divide by zero")
            stack.append(a // b)
        elif word.upper() == 'DUP':
            require_stack_size(1)
            stack.append(stack[-1])
        elif word.upper() == 'DROP':
            require_stack_size(1)
            stack.pop()
        elif word.upper() == 'SWAP':
            require_stack_size(2)
            stack[-2], stack[-1] = stack[-1], stack[-2]
        elif word.upper() == 'OVER':
            require_stack_size(2)
            stack.append(stack[-2])
        elif word.upper() in definitions:
            for def_word in definitions[word.upper()].split():
                execute_word(def_word)
        else:
>           raise ValueError(f"undefined operation: {word}")
E           ValueError: undefined operation: -1

exercises/practice/forth/forth.py:58: ValueError
_ ForthTest.test_user_defined_words_can_define_word_that_uses_word_with_the_same_name _

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_define_word_that_uses_word_with_the_same_name>

    def test_user_defined_words_can_define_word_that_uses_word_with_the_same_name(self):
>       self.assertEqual(evaluate([": foo 10 ;", ": foo foo 1 + ;", "foo"]), [11])

exercises/practice/forth/forth_test.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:84: in evaluate
    execute_word(word)
exercises/practice/forth/forth.py:56: in execute_word
    execute_word(def_word)
exercises/practice/forth/forth.py:56: in execute_word
    execute_word(def_word)
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals & position)
______ ForthTest.test_user_defined_words_can_override_built_in_operators _______

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_override_built_in_operators>

    def test_user_defined_words_can_override_built_in_operators(self):
>       self.assertEqual(evaluate([": + * ;", "3 4 +"]), [12])
E       AssertionError: Lists differ: [7] != [12]
E       
E       First differing element 0:
E       7
E       12
E       
E       - [7]
E       + [12]

exercises/practice/forth/forth_test.py:201: AssertionError
________ ForthTest.test_user_defined_words_can_override_built_in_words _________

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_override_built_in_words>

    def test_user_defined_words_can_override_built_in_words(self):
>       self.assertEqual(evaluate([": swap dup ;", "1 swap"]), [1, 1])

exercises/practice/forth/forth_test.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
exercises/practice/forth/forth.py:84: in evaluate
    execute_word(word)
exercises/practice/forth/forth.py:49: in execute_word
    require_stack_size(2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

size = 2

    def require_stack_size(size):
        if len(stack) < size:
>           raise StackUnderflowError()
E           forth.StackUnderflowError: Insufficient number of items in stack

exercises/practice/forth/forth.py:18: StackUnderflowError
_ ForthTest.test_user_defined_words_can_use_different_words_with_the_same_name _

self = <forth_test.ForthTest testMethod=test_user_defined_words_can_use_different_words_with_the_same_name>

    def test_user_defined_words_can_use_different_words_with_the_same_name(self):
>       self.assertEqual(
            evaluate([": foo 5 ;", ": bar foo ;", ": foo 6 ;", "bar foo"]), [5, 6]
        )
E       AssertionError: Lists differ: [6, 6] != [5, 6]
E       
E       First differing element 0:
E       6
E       5
E       
E       - [6, 6]
E       ?  ^
E       
E       + [5, 6]
E       ?  ^

exercises/practice/forth/forth_test.py:204: AssertionError
______ ForthTest.test_user_defined_words_cannot_redefine_negative_numbers ______

self = <forth_test.ForthTest testMethod=test_user_defined_words_cannot_redefine_negative_numbers>

    def test_user_defined_words_cannot_redefine_negative_numbers(self):
>       with self.assertRaises(ValueError) as err:
E       AssertionError: ValueError not raised

exercises/practice/forth/forth_test.py:218: AssertionError
____ ForthTest.test_user_defined_words_cannot_redefine_non_negative_numbers ____

self = <forth_test.ForthTest testMethod=test_user_defined_words_cannot_redefine_non_negative_numbers>

    def test_user_defined_words_cannot_redefine_non_negative_numbers(self):
        with self.assertRaises(ValueError) as err:
            evaluate([": 1 2 ;"])
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(str(err.exception.args[0]), "illegal operation")
E       AssertionError: 'invalid definition name' != 'illegal operation'
E       - invalid definition name
E       + illegal operation

exercises/practice/forth/forth_test.py:215: AssertionError
__ ForthTest.test_user_defined_words_errors_if_executing_a_non_existent_word ___

self = <forth_test.ForthTest testMethod=test_user_defined_words_errors_if_executing_a_non_existent_word>

    def test_user_defined_words_errors_if_executing_a_non_existent_word(self):
        with self.assertRaises(ValueError) as err:
            evaluate(["foo"])
        self.assertEqual(type(err.exception), ValueError)
>       self.assertEqual(str(err.exception.args[0]), "undefined operation")
E       AssertionError: 'undefined operation: foo' != 'undefined operation'
E       - undefined operation: foo
E       ?                    -----
E       + undefined operation

exercises/practice/forth/forth_test.py:227: AssertionError
=========================== short test summary info ============================
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_case_insensitivity_definitions_are_case_insensitive
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_define_word_that_uses_word_with_the_same_name
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_override_built_in_operators
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_override_built_in_words
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_can_use_different_words_with_the_same_name
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_cannot_redefine_negative_numbers
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_cannot_redefine_non_negative_numbers
FAILED exercises/practice/forth/forth_test.py::ForthTest::test_user_defined_words_errors_if_executing_a_non_existent_word
========================= 9 failed, 39 passed in 0.14s =========================
